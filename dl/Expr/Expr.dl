
@import { 
	'../dl/String.dl',
	'Type.dl',
	'Block.dl',
	'Call.dl',
	'Control.dl',
	'Function.dl',
	'Structure.dl',
	'Trait.dl',
	'Type.dl',
	'Variable.dl',
    'Constant.dl',
}

PrintTabs fn(count i32) {
    for i32(0) .. count {
        Print('\t')
    }
}

New fn(type T?) T^ {
    t T^ = new(T)
    t.Init()
    return t
}

Expr struct {
    at Position
    kind i64
    typ Type^
}

TypeAs struct
{
    super Expr
    ident str
}
Init fn(self ref TypeAs)
{
    self.super.kind = Id(TypeAs)
}

ExpressionList struct
{
    super Expr
    list DynamicArray(Expr^)
}
Init fn(self ref ExpressionList)
{
    self.list.Init()
    self.super.kind = Id(ExpressionList)
}
Add fn(list ref ExpressionList, expr Expr^) {
    Assert(expr, 'Expected non nil item')
    list.list.Push(expr)
}

TypeList struct
{
    super Expr
    list DynamicArray(Type^)
}
Init fn(self ref TypeList)
{
    self.list.Init()
    self.super.kind = Id(TypeList)
}
Add fn(list ref TypeList, expr Type^) {
    Assert(expr, 'Expected non nil item')
    list.list.Push(expr)
}

As fn(expr ref Expr, type T?) T^ {
    Assert(expr.kind == Id(T), 'As type Type mismatch') 
    return cast(T^, &expr)
}
Is fn(expr ref Expr, type T?) i8 {
    Assert(&expr, 'Is expr: Expected non nil expression')
    return expr.kind == Id(T)
}
As fn(typ ref Type, type T?) T^ {
    Assert(&typ, 'As tpe: Expected non nil type')
    if typ.kind != Id(T) {
        PrettyPrint(typ)
    }
    Assert(typ.kind == Id(T), 'Type mismatch ' + String(typ.kind) + ' is not ' + String(Id(T))) 
    return cast(T^, &typ)
}
Is fn(typ ref Type, type T?) i8 {
    Assert(&typ, 'Is type: Expected non nil type')
    return typ.kind == Id(T)
}


Id fn(type Function) i32 {
    return 1
}
Id fn(type Structure) i32 {
    return 2
}
Id fn(type Variable) i32 {
    return 3
}
Id fn(type Block) i32 {
    return 4
}
Id fn(type Identifier) i32 {
    return 5
}
Id fn(type Call) i32 {
    return 7
}
Id fn(type ExpressionList) i32 {
    return 8
}
Id fn(type If) i32 {
    return 9
}
Id fn(type For) i32 {
    return 10
}
Id fn(type Trait) i32 {
    return 11
}
Id fn(type Require) i32 {
    return 12
}
Id fn(type TypeList) i32 {
    return 13
}
Id fn(type FunctionSpec) i32 {
    return 14
}
Id fn(type Access) i32 {
    return 15
}
Id fn(type TypeAs) i32 {
    return 16
}
Id fn(type Assign) i32 {
    return 17
}
Id fn(type StructureSpec) i32 {
    return 18
}
Id fn(type ForList) i32 {
    return 19
}

Id fn(type StringConstant) i32 {
    return 20
}
Id fn(type NumberConstant) i32 {
    return 21
}
Id fn(type StripOption) i32 {
    return 22
}
Id fn(type StripRef) i32 {
    return 22
}
Id fn(type Branch) i32 {
    return 23
}
Id fn(type Return) i32 {
    return 24
}

Id fn(type TypeRef) i32 {
    return 1
}
Id fn(type TypeIdentifier) i32 {
    return 2
}
Id fn(type TypeFunctions) i32 {
    return 3
}
Id fn(type TypeGeneric) i32 {
    return 4
}
Id fn(type TypeAny) i32 {
    return 5
}
Id fn(type TypeType) i32 {
    return 6
}
Id fn(type TypeOption) i32 {
    return 7
}
