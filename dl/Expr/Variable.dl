
@import { 
	'Expr.dl'
}

Identifier struct
{
    super Expr
    ident str
    reference Expr^
}

Identifier fn() Identifier^
{
    self Identifier^ = new(Identifier)
    self.Init()
    return self
}
Init fn(self ref Identifier)
{
    self.super.kind = Id(Identifier)
}

Variable struct
{
    super Expr
    ident str
    assign Expr^
}
Init fn(self ref Variable)
{
    self.super.kind = Id(Variable)
}
Variable fn() Variable^
{
    self Variable^ = new(Variable)
    self.super.kind = Id(Variable)
    return self
}

Assign struct
{
    super Expr
    left Expr^
    right Expr^
    drefCount i32 // number of dref calls to needed to accomplish this assignment
}

Init fn(self ref Assign)
{
    self.super.kind = Id(Assign)
}

StripRef struct
{
    super Expr
    operand Expr^
}

Init fn(self ref StripRef)
{
    self.super.kind = Id(StripRef)
}

StripOption struct
{
    super Expr
    operand Expr^
}

Init fn(self ref StripOption)
{
    self.super.kind = Id(StripOption)
}
