@import {
	'Expr.dl',
}

Specializeable struct {
	specializations DynamicArray(Specialized^)
}


ForList struct 
{
    super Expr

    list ExpressionList^
    it Variable^

    block Block^
}

Init fn(self ref ForList)
{
    self.super.kind = Id(ForList)
}



Specialized struct {
	kind i32
}

ForListSpec struct {
	super Specialized

	parent ForList^

	list ExpressionList^

	// these specializations are for each element in the list
}

Init fn(self ref ForListSpec) {
	self.super.kind = Id(ForListSpec)
}

SetIt fn(semantic ref Semantic, self ref ForList, it Expr^) 
{
	self.it.super.typ = it.typ
	semantic.Visit(self.block.super)
	Assert(self.it.super.typ)
}

As fn(expr ref Specialized, type T?) T^ {
    Assert(expr.kind == Id(T), 'Type mismatch asdfs') 
    return cast(T^, &expr)
}
Is fn(expr ref Specialized, type T?) i8 {
    return expr.kind == Id(T)
}

Id fn(type ForListSpec) i32 {
	return 1
}
