@import {
	'dl/String.dl',
	'dl/c.dl'
}

Position struct {
    line i32
    column i16
    file i16
}

Token struct
{
	Type i32
	value str
	at Position
}

Lexer struct {
	file File^
	nextCharacter i32
	nextNextCharacter i32

	tokens DynamicArray(Token)
	at i64

	currentLine i64
	currentColumn i64
	currentFile i64


	dataIndex i64
	data i8^
}

kParenOpen i32 = Char('(')
kParenClose i32 = Char(')')

kBracketOpen i32 = Char('{')
kBracketClose i32 = Char('}')

kBraceOpen i32 = Char('[')
kBraceClose i32 = Char(']')

kPlus i32 = Char('+')
kMinus i32 = Char('-')
kDivide i32 = Char('/')
kMultiply i32 = Char('*')
kMod i32 = Char('%')

kEqual i32 = Char('=')
kNot i32 = Char('!')
kGreater i32 = Char('>')
kLess i32 = Char('<')

kComma i32 = Char(',')
kDot i32 = Char('.')

kCaret i32 = Char('^')
kDollar i32 = Char('$')
kOption i32 = Char('?')
kAddress i32 = Char('&')

kAt i32 = Char('@')

kEnd i32 = 0
kSemicolon i32 = -25
kEndLine i32 = -26


kKeywordsBegin i32 = -100 			//Keywords end

kStruct i32 = kKeywordsBegin + 1
kFunction i32 = kKeywordsBegin + 2
kRef i32 = kKeywordsBegin + 3
//kDref i32 = kKeywordsBegin + 4

kTrait i32 = kKeywordsBegin + 5
kRequire i32 = kKeywordsBegin + 6
kFor i32 = kKeywordsBegin + 7
kBreak i32 = kKeywordsBegin + 8
kContinue i32 = kKeywordsBegin + 9
kIf i32 = kKeywordsBegin + 10
kElse i32 = kKeywordsBegin + 11
kReturn i32 = kKeywordsBegin + 12

kKeywordsEnd i32 = -50	

kIdentifier i32 = -20
kString i32 = -21
kNumber i32 = -22

TokenString fn(token i32) str {
	if token == kNumber {
		return 'number'
	}
	if token == kStruct {
		return 'struct'
	}
	if token == kIdentifier {
		return 'identifier'
	}
	if token == kString {
		return 'string'
	}
	if token == kRef {
		return 'ref'
	}
	if token == kTrait {
		return 'trait'
	}
	if token == kEndLine {
		return 'end of line'
	}
	return StringFromChar(token.i8())
}

equal fn(token Token, kind i64) i8 {
	return token.Type == kind
}
notEqual fn(token Token, kind i64) i8 {
	return token.Type != kind
}

Lexer fn(file str, fileNumber i64) Lexer
{
	self Lexer
	self.currentLine = 1
	self.currentColumn = 0
	self.currentFile = fileNumber

	self.file = FileOpen(file.chars, 'r'.chars)


	if !self.file {
		Print('Failed to open file \'' + file + '\'')
		return self
	}

	self.data = Alloc(i8, 10000)
    newLen u64 = FileRead(self.data, 1, 10000, self.file)
    



	token Token = self.Next() 
	for token.Type != 0 && token.Type != -1
	{
		self.tokens.Push(token)
		token = self.Next() 
	}

	none Token
	self.tokens.Push(none)
	self.tokens.Push(none)
	self.tokens.Push(none)
	return self
}



Peek fn(self ref Lexer) i32
{
	return ^(self.data + self.dataIndex)
}
Peek fn(self ref Lexer, at i64) i32
{
	return ^(self.data + self.dataIndex + at)
}
Get fn(self ref Lexer) i32
{

	character i32 = self.Peek()
	self.dataIndex = self.dataIndex + 1
	self.currentColumn = self.currentColumn + 1
	return character
}

@extern
{
	isspace fn(v i32)i32
	isalpha fn(v i32)i32
	isalnum fn(v i32)i32
	isdigit fn(v i32)i32
}

At fn(self ref Lexer, i i64) Token
{
	return self.tokens[self.at + i]
}
Eat fn(self ref Lexer) {
	self.at = self.at + 1
}
Eat fn(self ref Lexer, count i64) {
	self.at = self.at + count
}

Next fn(self ref Lexer) Token
{
	insertNewLine i8
	for isspace(Peek(self))
	{
		if Get(self) == Char('\n')
		{
			self.currentLine = self.currentLine + 1
			self.currentColumn = 0
			insertNewLine = 1
		}
	}

	if insertNewLine && self.tokens.length && Peek(self) != Char('{') && Peek(self) != Char('}'){

		t i32 = self.tokens[self.tokens.length-1].Type
		if  t == kParenClose || t == kBraceClose || t == kIdentifier || t == kNumber || t == kString || (t >= kKeywordsBegin && t < kKeywordsEnd)
		{
			t Token
			t.Type = kEndLine
			t.at.line = self.currentLine.i32()
			t.at.file = self.currentFile.i16()
			t.at.column = self.currentColumn.i16()
			self.tokens.Push(t)
		}
	}



	if (isalpha(Peek(self)) || Peek(self) == Char('_'))
	{
		t Token
		t.at.line = self.currentLine.i32()
		t.at.file = self.currentFile.i16()
		t.at.column = self.currentColumn.i16()

		data DynamicArray(i8)
		Init(data)
		for isalnum(Peek(self)){
			Push(data, i8(Get(self)))
		}
		Push(data, 0)

	 	
		t.Type = kIdentifier
		t.value.chars = data.elements
		t.value.length = data.length - 1

		if 		Equal(t.value, 'struct')	{ t.Type = kStruct }
		else if Equal(t.value, 'fn')		{ t.Type = kFunction }
		else if Equal(t.value, 'ref')		{ t.Type = kRef }
		//else if Equal(t.value, 'dref')		{ t.Type = kDref }
		else if Equal(t.value, 'trait')		{ t.Type = kTrait }
		else if Equal(t.value, 'require')	{ t.Type = kRequire }
		else if Equal(t.value, 'for')		{ t.Type = kFor }
		else if Equal(t.value, 'break')		{ t.Type = kBreak }
		else if Equal(t.value, 'continue')	{ t.Type = kContinue }
		else if Equal(t.value, 'if')		{ t.Type = kIf }
		else if Equal(t.value, 'else')		{ t.Type = kElse }
		else if Equal(t.value, 'return')	{ t.Type = kReturn }
		return t
	}

	if isdigit(Peek(self))
	{
		num f64 = (0)
		m f64 = (10)

		data DynamicArray(i8)
		Init(data)

		for isdigit(Peek(self)) 
		{
			Push(data, i8(Get(self)))
		}
		if Peek(self) == Char('.') && isdigit(Peek(self, 1) == Char('.'))
		{
			Push(data, i8(Get(self)))
			for isdigit(Peek(self)) {
				Push(data, i8(Get(self)))
			}
		}

		Push(data, 0)

		t Token
		t.Type = kNumber
		t.value.chars = data.elements
		t.value.length = data.length - 1
		t.at.line = self.currentLine.i32()
		t.at.file = self.currentFile.i16()
		t.at.column = self.currentColumn.i16()
		return t
	}
	if Peek(self) == Char('\'')
	{
		Get(self)//Consume '

		data DynamicArray(i8)
		Init(data)

		for Peek(self) != Char('\'') {
			Push(data, i8(Get(self)))
		}

		Push(data, 0)
		Get(self)//Consume '

		t Token
		t.Type = kString
		t.value.chars = data.elements
		t.value.length = data.length - 1
		t.at.line = self.currentLine.i32()
		t.at.file = self.currentFile.i16()
		t.at.column = self.currentColumn.i16()
		return t
	}
	t Token
	t.Type = (Get(self))

	if t.Type == Char('/') && Peek(self) == Char('/') {
		self.Get()
		for Peek(self) != Char('\n') &&  Peek(self) != 0 {
			self.Get()
		}
		return self.Next()
	}

	chars i8^ = Alloc(i8, 2)
	^(chars + 0) = t.Type.i8()
	^(chars + 1) = 0
	t.value = String(chars)
	t.at.line = self.currentLine.i32()
	t.at.file = self.currentFile.i16()
	t.at.column = self.currentColumn.i16()
	return t
}
