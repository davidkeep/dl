@import {
	'Lexer.dl'
}

Module struct
{
	path str
}

Project struct
{
	files DynamicArray(Module^)
}

AddFile fn(self ref Project, path str) Module^
{
	for i64(0) .. self.files.length {
		if Equal(self.files[it].path, path)
		{
			return self.files[it]
		}
	}

	file Module^ = new(Module)
	file.path = path
	self.files.Push(file)
	return file
}

PrintLines fn(self ref Project, position Position, lines i64) {
	if position.file == 0 {
		Println('Internal position: (' + String(position.line) + ', '+ String(position.line) + ')')
		return
	}

	file File^ = FileOpen(self.files[position.file-1].path.chars, 'r'.chars)

	buffer i8^ = Alloc(i8, 1024)

	for i64(1) .. position.line + lines {

		ret i8^ = GetLine(file, buffer, 1024)

		if it == position.line {

			// offset for side number
			len i64 = String(it).length + 2
			for i64(0) .. len {
				Print(' ') 
			}
			
			for i64(0) .. position.column - 1 {
				if ^(ret + it) == Char('\t') {
					Print('\t')
				}
				else {
					Print(' ')
				}
			}
			Println('v')
		}
		if it >= position.line && cast(i64, ret) {
			Print(String(it) + '  ')  // print side number
			Print(String(buffer))
		}
	}
}