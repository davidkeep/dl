 
Module struct
{
	path Str
}

Project struct
{
	files Array(ref Module)
}

GetFile fn self ref Project, path Str => ref Module {
	for i64(0) .. self.files.length {
		if self.files[it].path == path
		{
			return self.files[it]
		}
	}
	return cast(ref Module, 0)
}

AddFile fn self ref Project, path Str => ref Module
{
	hasFile ref Module = self.GetFile(path)
	if hasFile != Nil {
		return hasFile
	}

	file ref Module = Alloc(Module, 1)
	file.path = path
	self.files.Push(file)
	return file
}

PrintLines fn self ref Project, position Position, lines i64 => {
	if position.file == 0 {
		Println('Internal position: (' + String(position.line) + ', '+ String(position.line) + ')')
		return
	}

	file ref FileHandle = FileOpen(self.files[position.file-1].path.chars, 'r'.chars)
	if file == Nil {
		return
	}

	buffer ref i8 = Alloc(i8, 1024)
	for i64(1) .. position.line + lines {

		ret ref i8 = GetLine(file, buffer, 1024)

		if it == position.line {

			// offset for side number
			len i64 = String(it).length
			for i64(0) .. len {
				Print('•')
			}
			
			for i64(0) .. position.column - 1 {
				if PtrAdd(ret, it).dref == Char('\t') {
					Print('•••')
					len = len + 3 
				}
				else {
					Print('•') 
					len = len + 1
				}
			}

			Print('  ▼  ' )
			for i64(0) .. 93 - len{
				Print('•') 
			}
			Println('')
		}
		if it >= position.line && ret != Nil {
			Print(String(it) + '  ')  // print side number
			Print(StringFromCString(buffer))
		}
	}
}
