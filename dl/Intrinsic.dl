

@import {
	'Ast.dl',
	'Semantic.dl',
}


Intrinsics struct 
{
	i8_  Structure
	i16_ Structure
	i32_ Structure
	i64_ Structure


	f32_  Structure
	f64_ Structure

	bool_ Structure

	isEq Array(Function)
	notEq Array(Function)
	greater Array(Function)
	greaterEq Array(Function)
	less Array(Function)
	lessEq Array(Function)
	add Array(Function)
	mul Array(Function)
	sub Array(Function)
	div Array(Function)

	fnBegin Function

	i32_i32_mul Function
	i64_i64_mul Function

	i32_i32_add Function
	i64_i64_add Function

	ptr_add Function

	reference Function			// &
	dereference Function		// dref
	castOp Function				// cast 


	// TO i32
	i8_to_i32 Function
	i16_to_i32 Function
	i64_to_i32 Function
	f32_to_i32 Function
	f64_to_i32 Function

	i8_to_i64 Function
	i16_to_i64 Function
	i32_to_i64 Function
	f32_to_i64 Function
	f64_to_i64 Function

	fnEnd Function
}

Create fn(self ref Intrinsics, func ref Function, semantic ref Semantic, ident str, t ref Structure)  {

    func.Init()
	field Variable^ = Variable()
	typ TypeIdentifier^ = TypeIdentifier()
	typ.ident = ''
	typ.spec = &t.super
	field.super.typ = &typ.super
	func.ident = ident
	func.params.Add(&field.super)
	func.params.Add(&field.super)
	func.result = &typ.super

	semantic.Declare(func.super)
}
Create fn(self ref Intrinsics, func ref Function, semantic ref Semantic, ident str, t ref Structure, r ref Structure)  {

    func.Init()
	field Variable^ = Variable()
	typ TypeIdentifier^ = TypeIdentifier()
	typ.ident = ''
	typ.spec = &t.super
	field.super.typ = &typ.super
	func.ident = ident
	func.params.Add(&field.super)
	func.params.Add(&field.super)
	func.result = r.typeIdent
	semantic.Declare(func.super)
}
Convert fn(self ref Intrinsics, semantic ref Semantic, func ref Function, from ref Structure, to ref Structure)  {
	field Variable^ = Variable()
	field.super.typ = from.typeIdent

	Assert(from.typeIdent, from.ident)

    func.Init()
	func.ident = to.ident
	func.params.Add(&field.super)
	func.result = to.typeIdent
	semantic.Declare(func.super)
}
SIZE i64 = 6


Init fn(self ref Intrinsics, semantic ref Semantic, ast ref Block) {

	Init(self.i8_)
	self.i8_.ident = 'i8'
	semantic.Declare(self.i8_.super)

	Init(self.i16_)
	self.i16_.ident = 'i16'
	semantic.Declare(self.i16_.super)

	Init(self.i32_)
	self.i32_.ident = 'i32'
	semantic.Declare(self.i32_.super)


	Init(self.i64_)
	self.i64_.ident = 'i64'
	semantic.Declare(self.i64_.super)

	Init(self.f32_)
	self.f32_.ident = 'f32'
	semantic.Declare(self.f32_.super)

	Init(self.f64_)
	self.f64_.ident = 'f64'
	semantic.Declare(self.f64_.super)



	Init(self.i32_i32_mul)
	Init(self.i64_i64_mul)
	
	Init(self.i32_i32_add)
	Init(self.i64_i64_add)

	i64_field Variable^ = Variable()
	typ TypeIdentifier^ = TypeIdentifier()
	typ.ident = 'i64'
	typ.spec = &self.i64_.super
	i64_field.super.typ = &typ.super

	i32_field Variable^ = Variable() {
		typ TypeIdentifier^ = TypeIdentifier()
		typ.ident = 'i32'
		typ.spec = &self.i32_.super
		i32_field.super.typ = &typ.super
	}
	self.i32_.ident = 'i32'
	self.i64_.ident = 'i64'

	self.i32_i32_mul.ident = '*'
	self.i64_i64_mul.ident = '*'

	self.i32_i32_add.ident = '+'
	self.i64_i64_add.ident = '+'

	self.i64_i64_mul.params.Add(&i64_field.super)
	self.i64_i64_mul.params.Add(&i64_field.super)
	self.i64_i64_mul.result = &typ.super

	self.i64_i64_add.params.Add(&i64_field.super)
	self.i64_i64_add.params.Add(&i64_field.super)
	self.i64_i64_add.result = &typ.super

	semantic.Declare(self.i32_.super)
	semantic.Declare(self.i64_.super)

	semantic.Declare(self.i64_i64_mul.super)
	semantic.Declare(self.i64_i64_add.super)


	any TypeAny^ = New(TypeAny)
	any.ident = 'T'
	any_field Variable^ = Variable()
	any_field.super.typ = &any.super

	self.ptr_add.Init()
	self.ptr_add.ident = '+'
	self.ptr_add.params.Add(&any_field.super)
	self.ptr_add.params.Add(&i64_field.super)
	self.ptr_add.result = &any.super

	self.ptr_add.block = New(Block)
	semantic.Declare(self.ptr_add.super)
	semantic.Visit(self.ptr_add.super)

	{
		any TypeAny^ = New(TypeAny)
		any.ident = 'T'
		any_field Variable^ = Variable()
		any_field.super.typ = &any.super

		refer TypeRef^ = New(TypeRef)
		refer.reference = &any.super

		self.reference.Init()
		self.reference.ident = '&'
		self.reference.params.Add(&any_field.super)
		self.reference.result = &refer.super

		self.reference.block = New(Block)
		semantic.Declare(self.reference.super)
		semantic.Visit(self.reference.super)
	}

	{
		any TypeAny^ = New(TypeAny)
		any.ident = 'T'
		

		refer TypeRef^ = New(TypeRef)
		refer.reference = &any.super

		param Variable^ = Variable()
		param.super.typ = &refer.super

		self.dereference.Init()
		self.dereference.ident = 'dref'
		self.dereference.params.Add(&param.super)
		self.dereference.result = &any.super

		self.dereference.block = New(Block)
		semantic.Declare(self.dereference.super)
		semantic.Visit(self.dereference.super)
	}
	{

		in TypeAny^ = New(TypeAny)
		in.ident = 'To'
		inOf TypeType^ = New(TypeType)
		inOf.reference = &in.super

		toParam Variable^ = Variable()
		toParam.super.typ = &inOf.super

		out TypeAny^ = New(TypeAny)
		out.ident = 'From'
		
		fromParam Variable^ = Variable()
		fromParam.super.typ = &out.super



		outt TypeIdentifier^ = New(TypeIdentifier)
		outt.ident = 'To'

		self.castOp.Init()
		self.castOp.ident = 'cast'
		self.castOp.params.Add(&toParam.super)
		self.castOp.params.Add(&fromParam.super)
		self.castOp.result = &outt.super

		self.castOp.block = New(Block)
		semantic.Declare(self.castOp.super)
		semantic.Visit(self.castOp.super)
	}


	types Array(Structure^)
	types.Init(SIZE)
	types[0] = &self.i8_
	types[1] = &self.i16_
	types[2] = &self.i32_
	types[3] = &self.i64_
	types[4] = &self.f32_
	types[5] = &self.f64_

	self.notEq.Init(SIZE)
	self.isEq.Init(SIZE)
	self.less.Init(SIZE)
	self.lessEq.Init(SIZE)
	self.greater.Init(SIZE)
	self.greaterEq.Init(SIZE)

	self.add.Init(SIZE)
	self.mul.Init(SIZE)
	self.sub.Init(SIZE)
	self.div.Init(SIZE)

	for i64(0) .. SIZE {
		self.Create(self.mul[it], semantic, '*', ^types[it])
		self.Create(self.add[it], semantic, '+', ^types[it])
		self.Create(self.sub[it], semantic, '-', ^types[it])
		self.Create(self.div[it], semantic, '/', ^types[it])

		self.Create(self.notEq[it], semantic, '!=', ^types[it], self.i8_)
		self.Create(self.isEq[it], semantic, '==', ^types[it], self.i8_)
		self.Create(self.less[it], semantic, '<', ^types[it], self.i8_)
		self.Create(self.lessEq[it], semantic, '<=', ^types[it], self.i8_)
		self.Create(self.greater[it], semantic, '>', ^types[it], self.i8_)
		self.Create(self.greaterEq[it], semantic, '>=', ^types[it], self.i8_)
	}



	self.Convert(semantic, self.i8_to_i32,  self.i8_, self.i32_)
	self.Convert(semantic, self.i16_to_i32, self.i16_, self.i32_)
	self.Convert(semantic, self.i64_to_i32, self.i64_, self.i32_)
	self.Convert(semantic, self.f32_to_i32, self.f32_, self.i32_)
	self.Convert(semantic, self.f64_to_i32, self.f64_, self.i32_)

	self.Convert(semantic, self.i8_to_i64,  self.i8_, self.i64_)
	self.Convert(semantic, self.i16_to_i64, self.i16_, self.i64_)
	self.Convert(semantic, self.i32_to_i64, self.i32_, self.i64_)
	self.Convert(semantic, self.f32_to_i64, self.f32_, self.i64_)
	self.Convert(semantic, self.f64_to_i64, self.f64_, self.i64_)
}

IsIntrinsic fn(intrinsics ref Intrinsics, structure Structure^) {

}

IsIntrinsic fn(intrinsics ref Intrinsics, function Function^) i8 {
	if (cast(i64, function) > cast(i64, &intrinsics.fnBegin)) && (cast(i64, function) < cast(i64, &intrinsics.fnEnd)) {
		return true
	}
	if 	(cast(i64, function) >= cast(i64, &intrinsics.notEq[0])) && 
		(cast(i64, function) <  cast(i64, &intrinsics.notEq[SIZE-1]) + 1) {
		return true
	}
	if 	(cast(i64, function) >= cast(i64, &intrinsics.isEq[0])) && 
		(cast(i64, function) <  cast(i64, &intrinsics.isEq[SIZE-1]) + 1) {
		return true
	}
	if 	(cast(i64, function) >= cast(i64, &intrinsics.less[0])) && 
		(cast(i64, function) <  cast(i64, &intrinsics.less[SIZE-1]) + 1) {
		return true
	}
	if 	(cast(i64, function) >= cast(i64, &intrinsics.lessEq[0])) && 
		(cast(i64, function) <  cast(i64, &intrinsics.lessEq[SIZE-1]) + 1) {
		return true
	}
	if 	(cast(i64, function) >= cast(i64, &intrinsics.greater[0])) && 
		(cast(i64, function) <  cast(i64, &intrinsics.greater[SIZE-1]) + 1) {
		return true
	}
	if 	(cast(i64, function) >= cast(i64, &intrinsics.greaterEq[0])) && 
		(cast(i64, function) <  cast(i64, &intrinsics.greaterEq[SIZE-1]) + 1) {
		return true
	}
	if 	(cast(i64, function) >= cast(i64, &intrinsics.add[0])) && 
		(cast(i64, function) <  cast(i64, &intrinsics.add[SIZE-1]) + 1) {
		return true
	}
	if 	(cast(i64, function) >= cast(i64, &intrinsics.mul[0])) && 
		(cast(i64, function) <  cast(i64, &intrinsics.mul[SIZE-1]) + 1) {
		return true
	}
	if 	(cast(i64, function) >= cast(i64, &intrinsics.sub[0])) && 
		(cast(i64, function) <  cast(i64, &intrinsics.sub[SIZE-1]) + 1) {
		return true
	}
	if 	(cast(i64, function) >= cast(i64, &intrinsics.div[0])) && 
		(cast(i64, function) <  cast(i64, &intrinsics.div[SIZE-1]) + 1) {
		return true
	}
	return false
}

