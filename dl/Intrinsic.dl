
Intrinsics struct 
{

	f32_  Structure
	f64_ Structure

	bool_ Structure

	voidptr_ Structure

	fnBegin Function

	isEq Function
	notEq Function
	greater Function
	greaterEq Function
	less Function
	lessEq Function

	isEqf32 Function
	notEqf32 Function
	greaterf32 Function
	greaterEqf32 Function
	lessf32 Function
	lessEqf32 Function

	ptr_add Function
	abortFn Function

	reference Function			// &
	dereference Function		// dref
	castOp Function				// cast 

	sizeFn Function				// cast 

	// TO i32
	i8_to_i32 Function
	i16_to_i32 Function
	i64_to_i32 Function
	f32_to_i32 Function
	f64_to_i32 Function

	i8_to_i64 Function
	i16_to_i64 Function
	i32_to_i64 Function
	f32_to_i64 Function
	f64_to_i64 Function

	i64_to_f32 Function
	i64_to_f64 Function

	f32_to_f64 Function
	f64_to_f32 Function

	u32_to_i64 Function

	i32_to_u64 Function

	to_i8 Function
	to_i16 Function
	to_i32 Function
	to_i64 Function

	to_u8 Function
	to_u16 Function
	to_u32 Function
	to_u64 Function
	
	to_f32 Function

	add_i64 Function
	sub_i64 Function
	div_i64 Function
	mul_i64 Function
	mod_i64 Function

	add_i32 Function
	sub_i32 Function
	div_i32 Function
	mul_i32 Function
	mod_i32 Function

	add_f32 Function
	sub_f32 Function
	div_f32 Function
	mul_f32 Function
	mod_f32 Function

	invert Function

	and_ Function
	or_ Function

	bitand_ Function
	bitor_ Function
	
	enumTrait Trait

	to_ Array(Function)

	fnEnd Function
}

Create fn self ref Intrinsics, func ref Function, semantic ref Semantic, ident Str, t ref Type, r ref Type  {

    func.Init()
	field ref Variable = New(Variable)
	field.super.typ = t
	func.ident = ident
	func.params.Add(&field.super)
	func.params.Add(&field.super)
	func.result = r
	semantic.Declare(func.super)
}
Convert fn self ref Intrinsics, semantic ref Semantic, func ref Function, from ref Structure, to ref Structure  {
	field ref Variable = New(Variable)
	field.super.typ = from.typeIdent

	assert(from.typeIdent, from.ident)

    func.Init()
	func.ident = to.ident
	func.params.Add(&field.super)
	func.result = to.typeIdent
	semantic.Declare(func.super)
}


Init fn self ref Intrinsics, semantic ref Semantic, ast ref Block {

	Init(self.voidptr_)
	self.voidptr_.ident = 'voidptr'
	semantic.Declare(self.voidptr_.super)
	self.voidptr_.incomplete = true
	
	{
		self.enumTrait.Init()
		self.enumTrait.ident = 'enum'
		semantic.Declare(self.enumTrait.super)
	}

	{
		as ref TypeAs = New(TypeAs)
		as.ident = 'i8'
		as.super.typ = &i8Type.super
		semantic.Declare(as.super)
	}
	{
		as ref TypeAs = New(TypeAs)
		as.ident = 'i16'
		as.super.typ = &i16Type.super
		semantic.Declare(as.super)
	}
	{
		as ref TypeAs = New(TypeAs)
		as.ident = 'i32'
		as.super.typ = &i32Type.super
		semantic.Declare(as.super)
	}
	{
		as ref TypeAs = New(TypeAs)
		as.ident = 'i64'
		as.super.typ = &i64Type.super
		semantic.Declare(as.super)
	}

	{
		as ref TypeAs = New(TypeAs)
		as.ident = 'u8'
		as.super.typ = &u8Type.super
		semantic.Declare(as.super)
	}
	{
		as ref TypeAs = New(TypeAs)
		as.ident = 'u16'
		as.super.typ = &u16Type.super
		semantic.Declare(as.super)
	}
	{
		as ref TypeAs = New(TypeAs)
		as.ident = 'u32'
		as.super.typ = &u32Type.super
		semantic.Declare(as.super)
	}
	{
		as ref TypeAs = New(TypeAs)
		as.ident = 'u64'
		as.super.typ = &u64Type.super
		semantic.Declare(as.super)
	}
	{
		as ref TypeAs = New(TypeAs)
		as.ident = 'f32'
		as.super.typ = &f32Type.super
		semantic.Declare(as.super)
	}
	{
		as ref TypeAs = New(TypeAs)
		as.ident = 'f64'
		as.super.typ = &f64Type.super
		semantic.Declare(as.super)
	}



	any ref TypeAny = New(TypeAny)
	any.ident = 'T'
	any_field ref Variable = New(Variable)
	any_field.super.typ = &any.super


	i64_field ref Variable = New(Variable)
	i64_field.super.typ = &i64Type.super

	self.ptr_add.Init()
	self.ptr_add.ident = 'PtrAdd'
	self.ptr_add.params.Add(&any_field.super)
	self.ptr_add.params.Add(&i64_field.super)
	self.ptr_add.result = &any.super

	ast.Add(&self.ptr_add.super)

	{
		any ref TypeAny = New(TypeAny)
		any.ident = 'T'
		any_field ref Variable = New(Variable)
		any_field.super.typ = &any.super

		refer ref TypeRef = New(TypeRef)
		refer.reference = &any.super

		self.reference.Init()
		self.reference.ident = '&'
		self.reference.params.Add(&any_field.super)
		self.reference.result = &refer.super

		ast.Add(&self.reference.super)
	}

	{
		any ref TypeAny = New(TypeAny)
		any.ident = 'T'

		refer ref TypeRef = New(TypeRef)
		refer.reference = &any.super

		param ref Variable = New(Variable)
		param.super.typ = &refer.super


		ident ref TypeIdentifier = New(TypeIdentifier)
		ident.ident = 'T'

		self.dereference.Init()
		self.dereference.ident = 'dref'
		self.dereference.params.Add(&param.super)
		self.dereference.result = &any.super

		ast.Add(&self.dereference.super)
	}
	{

		in ref TypeAny = New(TypeAny)
		in.ident = 'To'
		inOf ref TypeType = New(TypeType)
		inOf.reference = &in.super

		toParam ref Variable = New(Variable)
		toParam.super.typ = &inOf.super

		out ref TypeAny = New(TypeAny)
		out.ident = 'From'
		
		fromParam ref Variable = New(Variable)
		fromParam.super.typ = &out.super

		self.castOp.Init()
		self.castOp.ident = 'cast'
		self.castOp.params.Add(&toParam.super)
		self.castOp.params.Add(&fromParam.super)
		self.castOp.result = &in.super
		ast.Add(&self.castOp.super)
	}

	{
		// var typeof $To
		in ref TypeAny = New(TypeAny)
		in.ident = 'T'
		inOf ref TypeType = New(TypeType)
		inOf.reference = &in.super
		toParam ref Variable = New(Variable)
		toParam.super.typ = &inOf.super

		self.sizeFn.Init()
		self.sizeFn.ident = 'Size'
		self.sizeFn.params.Add(&toParam.super)
		self.sizeFn.result = &i64Type.super
		ast.Add(&self.sizeFn.super)
	}

	self.abortFn.Init()
	self.abortFn.ident = 'abort'
	semantic.Declare(self.abortFn.super)



	{
		out ref TypeAny = New(TypeAny)
		out.ident = 'From'
		out.required = Id(TypeNumber)

		fromParam ref Variable = New(Variable)
		fromParam.super.typ = &out.super

		self.to_i8.Init()
		self.to_i8.ident = 'i8'
		self.to_i8.params.Add(&fromParam.super)
		self.to_i8.result = &i8Type.super
		ast.Add(&self.to_i8.super)
	}
	{
		out ref TypeAny = New(TypeAny)
		out.ident = 'From'
		out.required = Id(TypeNumber)

		fromParam ref Variable = New(Variable)
		fromParam.super.typ = &out.super

		self.to_i16.Init()
		self.to_i16.ident = 'i16'
		self.to_i16.params.Add(&fromParam.super)
		self.to_i16.result = &i16Type.super
		ast.Add(&self.to_i16.super)
	}
	{
		out ref TypeAny = New(TypeAny)
		out.ident = 'From'
		out.required = Id(TypeNumber)

		fromParam ref Variable = New(Variable)
		fromParam.super.typ = &out.super

		self.to_i32.Init()
		self.to_i32.ident = 'i32'
		self.to_i32.params.Add(&fromParam.super)
		self.to_i32.result = &i32Type.super
		ast.Add(&self.to_i32.super)
	}
	{
		out ref TypeAny = New(TypeAny)
		out.ident = 'From'
		out.required = Id(TypeNumber)

		fromParam ref Variable = New(Variable)
		fromParam.super.typ = &out.super

		self.to_i64.Init()
		self.to_i64.ident = 'i64'
		self.to_i64.params.Add(&fromParam.super)
		self.to_i64.result = &i64Type.super
		ast.Add(&self.to_i64.super)
	}
	{
		out ref TypeAny = New(TypeAny)
		out.ident = 'From'
		out.required = Id(TypeNumber)

		fromParam ref Variable = New(Variable)
		fromParam.super.typ = &out.super

		self.to_u8.Init()
		self.to_u8.ident = 'u8'
		self.to_u8.params.Add(&fromParam.super)
		self.to_u8.result = &u8Type.super
		ast.Add(&self.to_u8.super)
	}
	{
		out ref TypeAny = New(TypeAny)
		out.ident = 'From'
		out.required = Id(TypeNumber)

		fromParam ref Variable = New(Variable)
		fromParam.super.typ = &out.super

		self.to_u16.Init()
		self.to_u16.ident = 'u16'
		self.to_u16.params.Add(&fromParam.super)
		self.to_u16.result = &u16Type.super
		ast.Add(&self.to_u16.super)

	}
	{
		out ref TypeAny = New(TypeAny)
		out.ident = 'From'
		out.required = Id(TypeNumber)

		fromParam ref Variable = New(Variable)
		fromParam.super.typ = &out.super

		self.to_u32.Init()
		self.to_u32.ident = 'u32'
		self.to_u32.params.Add(&fromParam.super)
		self.to_u32.result = &u32Type.super
		ast.Add(&self.to_u32.super)

	}
	{
		out ref TypeAny = New(TypeAny)
		out.ident = 'From'
		out.required = Id(TypeNumber)

		fromParam ref Variable = New(Variable)
		fromParam.super.typ = &out.super

		self.to_u64.Init()
		self.to_u64.ident = 'u64'
		self.to_u64.params.Add(&fromParam.super)
		self.to_u64.result = &u64Type.super
		ast.Add(&self.to_u64.super)
	}
	{
		out ref TypeAny = New(TypeAny)
		out.ident = 'From'
		out.required = Id(TypeNumber)

		fromParam ref Variable = New(Variable)
		fromParam.super.typ = &out.super

		self.to_f32.Init()
		self.to_f32.ident = 'f32'
		self.to_f32.params.Add(&fromParam.super)
		self.to_f32.result = &f32Type.super
		ast.Add(&self.to_f32.super)
	}

	{
		fromParam ref Variable = New(Variable)
		fromParam.super.typ = &i8Type.super

		self.invert.Init()
		self.invert.ident = '!'
		self.invert.params.Add(&fromParam.super)
		self.invert.result = &i8Type.super
		ast.Add(&self.invert.super)
	}

	self.Create(self.mul_f32, semantic, '*', f32Type.super, f32Type.super)
	self.Create(self.add_f32, semantic, '+', f32Type.super, f32Type.super)
	self.Create(self.sub_f32, semantic, '-', f32Type.super, f32Type.super)
	self.Create(self.div_f32, semantic, '/', f32Type.super, f32Type.super)
	self.Create(self.mod_f32, semantic, '%', f32Type.super, f32Type.super)

	self.Create(self.mul_i64, semantic, '*', i64Type.super, i64Type.super)
	self.Create(self.add_i64, semantic, '+', i64Type.super, i64Type.super)
	self.Create(self.sub_i64, semantic, '-', i64Type.super, i64Type.super)
	self.Create(self.div_i64, semantic, '/', i64Type.super, i64Type.super)
	self.Create(self.mod_i64, semantic, '%', i64Type.super, i64Type.super)

	self.Create(self.mul_i32, semantic, '*', i32Type.super, i32Type.super)
	self.Create(self.add_i32, semantic, '+', i32Type.super, i32Type.super)
	self.Create(self.sub_i32, semantic, '-', i32Type.super, i32Type.super)
	self.Create(self.div_i32, semantic, '/', i32Type.super, i32Type.super)
	self.Create(self.mod_i32, semantic, '%', i32Type.super, i32Type.super)
	

	self.Create(self.notEq, 	semantic, '!=', i64Type.super, i8Type.super)
	self.Create(self.isEq, 		semantic, '==', i64Type.super, i8Type.super)
	self.Create(self.less, 		semantic, '<' , i64Type.super, i8Type.super)
	self.Create(self.lessEq, 	semantic, '<=', i64Type.super, i8Type.super)
	self.Create(self.greater, 	semantic, '>' , i64Type.super, i8Type.super)
	self.Create(self.greaterEq, semantic, '>=', i64Type.super, i8Type.super)

	self.Create(self.notEqf32, 		semantic, '!=', f32Type.super, i8Type.super)
	self.Create(self.isEqf32, 		semantic, '==', f32Type.super, i8Type.super)
	self.Create(self.lessf32, 		semantic, '<' , f32Type.super, i8Type.super)
	self.Create(self.lessEqf32, 	semantic, '<=', f32Type.super, i8Type.super)
	self.Create(self.greaterf32, 	semantic, '>' , f32Type.super, i8Type.super)
	self.Create(self.greaterEqf32,  semantic, '>=', f32Type.super, i8Type.super)

	self.Create(self.and_, semantic, '&&', i8Type.super, i8Type.super)
	self.Create(self.or_, semantic,  '||', i8Type.super, i8Type.super)

	self.Create(self.bitand_, semantic, '&', i64Type.super, i64Type.super)
	self.Create(self.bitor_, semantic,  '|', i64Type.super, i64Type.super)

	types Array(ref TypeNumber)
	types.Init(10)
	types[0] = u8Type
	types[1] = u16Type
	types[2] = u32Type
	types[3] = u64Type

	types[4] = i8Type
	types[5] = i16Type
	types[6] = i32Type
	types[7] = i64Type

	types[8] = f32Type
	types[9] = f64Type

	self.to_.Init(10*10)

	at i64
	for i64(0) .. 10 {
		to ref TypeNumber =  types[it]
		name Str = to.ident

		for i64(0) .. 10 {

			from ref TypeNumber =  types[it]
			fromParam ref Variable = New(Variable)
			fromParam.super.typ = &from.super

			self.to_[at].Init()
			self.to_[at].ident = name
			self.to_[at].params.Add(&fromParam.super)
			self.to_[at].result = &to.super
			ast.Add(&self.to_[at].super)
			at = at + 1
		}
	}
}

IsIntrinsic fn intrinsics ref Intrinsics, function ref Function => i8 {
	if (cast(i64, function) > cast(i64, &intrinsics.fnBegin)) && (cast(i64, function) < cast(i64, &intrinsics.fnEnd)) {
		return true
	}
	if cast(i64, function) >= cast(i64, intrinsics.to_[0]) && cast(i64, function) <= cast(i64, intrinsics.to_[99]) {
		return true
	}
	return false
}

