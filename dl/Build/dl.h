#include "dltypes.h"
extern "C" i32 putchar(i32 character);
extern "C" i8* dlMalloc(i64 size);
extern "C" i8* dlMallocZero(i64 size);
extern "C" i8* dlRealloc(i8* nmem, i64 size);
extern "C" i8* dlMemcpy(i8* dst, i8* src, i64 count);
extern "C" i8* dlMemset(i8* dst, i32 value, i64 count);
extern "C" f32 sqrtf(f32 f);
extern "C" void abort();
extern "C" void Backtrace();
extern "C" GLFWWindow* glfwCreateWindow(i32 width, i32 height, i8* title, i64 monitor, i64 share);
extern "C" i32 glfwWindowShouldClose(GLFWWindow* window);
extern "C" i32 glfwInit();
extern "C" void glfwPollEvents();
extern "C" void glfwSwapBuffers(GLFWWindow* window);
extern "C" FileHandle* FileOpen(i8* filename, i8* mode);
extern "C" u32 FileClose(FileHandle* file);
extern "C" i8* GetLine(FileHandle* stream, i8* data, i32 count);
extern "C" u64 FileRead(i8* f, u64 a, u64 b, FileHandle* c);
extern "C" i32 FileGetChar(FileHandle* file);
extern "C" u64 FileWrite(i8* data, u64 size, u64 count, FileHandle* stream);
extern "C" void FileFlush(FileHandle* file);
extern "C" FileHandle* FileOut();
extern "C" FileHandle* FileError();
extern "C" i32 FilePut(FileHandle* file, i8* data);
extern "C" void FlushOut();
void Error_StrPosition(Str message, Position at);
Position Expect__ref_Lexeri32(Lexer* lexer, i32 token);
void ExpectEndStatement__ref_Lexer(Lexer* lexer);
Block* ParseBasicBlock__ref_Lexer(Lexer* lexer);
void ParseDirective__ref_Lexer_ref_Block(Lexer* lexer, Block* block);
Function* ParseFunction__ref_Lexer(Lexer* lexer);
Structure* ParseStructure__ref_Lexer(Lexer* lexer);
void ParseConstraints__ref_Lexer_ref_Array__ref_Type(Lexer* lexer, Array__ref_Type* constraints);
Trait* ParseTrait__ref_Lexer(Lexer* lexer);
Type* ParseOptions__ref_Lexer_ref_Type(Lexer* lexer, Type* typ);
Type* ParseType__ref_Lexer(Lexer* lexer);
Variable* ParseField__ref_Lexer(Lexer* lexer);
Variable* ParseParameter__ref_Lexer(Lexer* lexer);
Variable* ParseVariable__ref_Lexer(Lexer* lexer);
Expr* ParseControl__ref_Lexer(Lexer* lexer);
Expr* ParseOperand__ref_Lexeri32(Lexer* lexer, i32 precedence);
i8 IsOperator_Token(Token token);
i32 Precedence_Token(Token token);
Expr* CreateCall_Str_ref_Expr_ref_Expr(Str ident, Expr* left, Expr* right);
Expr* ParseExpression__ref_Lexeri32(Lexer* lexer, i32 precedence);
Expr* ParseExpression__ref_Lexer(Lexer* lexer);
void Parse__ref_BlockStr(Block* block, Str file);
Block* Compile_Str(Str file);
void PrintError_PositionStr(Position at, Str message);
void Run_();
void Main_();
void Indent__ref_GenerateBasic(GenerateBasic* self);
Str Mangle__ref_Type(Type* self);
Str Name__ref_Structure(Structure* self);
Str Name__ref_Function(Function* self);
Str Name__ref_FunctionSpec(FunctionSpec* self);
void Init__ref_GenerateBasic_ref_Semantic_ref_Block(GenerateBasic* generate, Semantic* semantic, Block* ast);
void Write__ref_FileHandleStr(FileHandle* file, Str s);
void Visit__ref_FileHandle_ref_Type(FileHandle* file, Type* t);
void Visit__ref_GenerateBasic_ref_Expr(GenerateBasic* generate, Expr* expr);
void PerformVisitAutoReference__ref_GenerateBasic_ref_Expri64(GenerateBasic* self, Expr* expr, i64 count);
void PerformReference__ref_GenerateBasic_ref_Expri64(GenerateBasic* self, Expr* expr, i64 count);
void PerformDereference__ref_GenerateBasic_ref_Expri64(GenerateBasic* self, Expr* expr, i64 count);
void GenerateBasicIntrinsic__ref_GenerateBasic_ref_Function_ref_Call(GenerateBasic* generate, Function* function, Call* call);
void Create__ref_Intrinsics_ref_Function_ref_SemanticStr_ref_Type_ref_Type(Intrinsics* self, Function* func, Semantic* semantic, Str ident, Type* t, Type* r);
void Convert__ref_Intrinsics_ref_Semantic_ref_Function_ref_Structure_ref_Structure(Intrinsics* self, Semantic* semantic, Function* func, Structure* from, Structure* to);
void Init__ref_Intrinsics_ref_Semantic_ref_Block(Intrinsics* self, Semantic* semantic, Block* ast);
i8 IsIntrinsic__ref_Intrinsics_ref_Function(Intrinsics* intrinsics, Function* function);
void Error__ref_ExprStr(Expr* node, Str message);
void Error_PositionStr(Position at, Str message);
void Init__ref_Semantic_ref_Block(Semantic* semantic, Block* ast);
i8 Implements__ref_Semantic_ref_Trait_ref_Type(Semantic* semantic, Trait* trai, Type* typ);
TypeFunctions* FindMatches__ref_Semantic_ref_ExprStr_ref_ExpressionList(Semantic* semantic, Expr* self, Str ident, ExpressionList* args);
Function* FindMatch__ref_Semantic_ref_ExprStr_ref_ExpressionList(Semantic* semantic, Expr* self, Str ident, ExpressionList* args);
Expr* FindType__ref_SemanticStrPosition(Semantic* semantic, Str ident, Position at);
Expr* FindVariable__ref_SemanticStrPosition(Semantic* semantic, Str ident, Position at);
Expr* FindPrivate__ref_SemanticStr(Semantic* semantic, Str ident);
void Declare__ref_Block_ref_Expr(Block* block, Expr* expr);
void Declare__ref_Semantic_ref_Expr(Semantic* semantic, Expr* expr);
i64 DrefCount__ref_Type_ref_Type(Type* desired, Type* from);
i64 CheckAssignment__ref_Expr_ref_Type_ref_Expr(Expr* self, Type* desired, Expr* from);
void Visit__ref_Semantic_ref_Expr(Semantic* semantic, Expr* expr);
Function* ParentFunction__ref_Block(Block* block);
void AnnotateGeneric__ref_Semantic_ref_Type_ref_Function(Semantic* semantic, Type* t, Function* spec);
void Annotate__ref_Semantic_ref_Type(Semantic* semantic, Type* t);
void Annotate__ref_Semantic_ref_Typei8(Semantic* semantic, Type* t, i8 reference);
Type* Clone__ref_Type(Type* t);
Type* CloneAny__ref_Type_ref__ref_Type(Type* t, Type** any);
i32 Convert__ref_Expr_ref_Expri8(Expr* desired, Expr* from, i8 reportError);
i32 Coerce__ref_Expr_ref_Expri8(Expr* desired, Expr* from, i8 reportError);
i32 Coerce__ref_Type_ref_Expri8(Type* desiredType, Expr* from, i8 reportError);
i8 Equal_Array__ref_TypeArray__ref_Type(Array__ref_Type left, Array__ref_Type right);
i8 Equal__ref_Type_ref_Type(Type* from, Type* to);
i8 Equal__ref_Type_ref_Typei8(Type* from, Type* to, i8 allowConversions);
i8 Apply__ref_Semantic_ref_Type_ref_Type_ref_Knowni64(Semantic* semantic, Type* argument, Type* parameter, Known* known, i64 index);
TypeStructure* ResolveSpec__ref_Type(Type* typ);
Type* Resolved__ref_Type(Type* typ);
void PrintIndent__ref_PrintVisitor(PrintVisitor* visitor);
void PrintTabs_i32(i32 count);
void Print__ref_Expr(Expr* expr);
void Print_Type(Type expr);
void Print__ref_Type(Type* expr);
void Visit__ref_Expr_ref_PrintVisitor(Expr* expr, PrintVisitor* visitor);
void Visit__ref_Type_ref_PrintVisitor(Type* t, PrintVisitor* visitor);
void PrettyPrint__ref_Type(Type* expr);
void PrettyPrint__ref_Expr(Expr* expr);
void PrettyPrint_Type(Type expr);
Str String__ref_Expr(Expr* expr);
Str String__ref_Type(Type* expr);
Module* GetFile__ref_ProjectStr(Project* self, Str path);
Module* AddFile__ref_ProjectStr(Project* self, Str path);
void PrintLines__ref_ProjectPositioni64(Project* self, Position position, i64 lines);
void Init__ref_TypeIdentifier(TypeIdentifier* self);
void Init__ref_TypeRef(TypeRef* self);
void Init__ref_TypeOption(TypeOption* self);
void Init__ref_TypeGeneric(TypeGeneric* self);
void Init__ref_TypeAny(TypeAny* self);
void Init__ref_TypeType(TypeType* self);
void Init__ref_TypeStructure(TypeStructure* self);
void Init__ref_TypeNumber(TypeNumber* self);
TypeNumber* New__typeofTypeNumberi8i64Str(i8 kind, i64 size, Str ident);
i32 Id__typeofTypeRef();
i32 Id__typeofTypeIdentifier();
i32 Id__typeofTypeFunctions();
i32 Id__typeofTypeGeneric();
i32 Id__typeofTypeAny();
i32 Id__typeofTypeType();
i32 Id__typeofTypeOption();
i32 Id__typeofTypeNumber();
i32 Id__typeofTypeStructure();
void Init__ref_Block(Block* self);
Expr* Lookup__ref_BlockStr(Block* self, Str ident);
TypeFunctions* LookupFns__ref_BlockStr(Block* self, Str ident);
void InsertFn__ref_BlockStr_ref_Function(Block* self, Str ident, Function* function);
void Insert__ref_BlockStr_ref_Expr(Block* self, Str ident, Expr* expr);
void Add__ref_Block_ref_Expr(Block* self, Expr* expr);
void Init__ref_Call(Call* self);
void Init__ref_Access(Access* self);
void Init__ref_NumberConstant(NumberConstant* self);
void Init__ref_StringConstant(StringConstant* self);
void Init__ref_If(If* self);
void Init__ref_For(For* self);
void Init__ref_ForList(ForList* self);
void Init__ref_Branch(Branch* self);
void Init__ref_Return(Return* self);
void Init__ref_Function(Function* self);
void Init__ref_FunctionSpec(FunctionSpec* self);
void AddAny__ref_Function_ref_Type(Function* self, Type* typ);
FunctionSpec* Specialize__ref_Function_ref_Semantic_ref_Call_ref_Function_ref_Known(Function* self, Semantic* semantic, Call* call, Function* parent, Known* known);
i8 ContainsUnknown__ref_Type(Type* t);
i8 ContainsAny__ref_Type(Type* t);
FunctionSpec* Specialize__ref_Function_ref_Semantic_ref_Call_ref_Function_ref_Knowni32(Function* self, Semantic* semantic, Call* call, Function* parent, Known* known, i32 level);
void Apply__ref_FunctionSpec(FunctionSpec* self);
void Clear__ref_FunctionSpec(FunctionSpec* self);
i8 Add__ref_Known_ref_Type_ref_Type(Known* self, Type* any, Type* typ);
void Init__ref_Structure(Structure* self);
void Add__ref_Structure_ref_Variable(Structure* structure, Variable* field);
Variable* Lookup__ref_StructureStr(Structure* structure, Str ident);
Type* Lookup__ref_TypeStructureStr(TypeStructure* spec, Str ident);
void ApplyConstraints__ref_Array__ref_Type_ref_Array__ref_Type(Array__ref_Type* anythings, Array__ref_Type* constraints);
void ClearConstraints__ref_Array__ref_Type(Array__ref_Type* anythings);
TypeStructure* SpecializeStructure__ref_Semantic_ref_TypeStructure_ref_Array__ref_Type(Semantic* semantic, TypeStructure* self, Array__ref_Type* constraints);
void Init__ref_Trait(Trait* self);
void AddFunction__ref_Trait_ref_Function(Trait* self, Function* function);
void Init__ref_Identifier(Identifier* self);
void Init__ref_Variable(Variable* self);
void Init__ref_Assign(Assign* self);
void Init__ref_TypeAs(TypeAs* self);
void Init__ref_ExpressionList(ExpressionList* self);
void Add__ref_ExpressionList_ref_Expr(ExpressionList* list, Expr* expr);
i32 Id__typeofFunction();
i32 Id__typeofStructure();
i32 Id__typeofVariable();
i32 Id__typeofBlock();
i32 Id__typeofIdentifier();
i32 Id__typeofCall();
i32 Id__typeofExpressionList();
i32 Id__typeofIf();
i32 Id__typeofFor();
i32 Id__typeofTrait();
i32 Id__typeofFunctionSpec();
i32 Id__typeofAccess();
i32 Id__typeofTypeAs();
i32 Id__typeofAssign();
i32 Id__typeofForList();
i32 Id__typeofStringConstant();
i32 Id__typeofNumberConstant();
i32 Id__typeofBranch();
i32 Id__typeofReturn();
Str TokenString_i32(i32 token);
i8 _eq__Tokeni64(Token token, i64 kind);
i8 _notEq__Tokeni64(Token token, i64 kind);
Lexer Lexer_Stri64(Str file, i64 fileNumber);
i32 Peek__ref_Lexer(Lexer* self);
i32 Peek__ref_Lexeri64(Lexer* self, i64 at);
i32 Get__ref_Lexer(Lexer* self);
extern "C" i32 isspace(i32 v);
extern "C" i32 isalpha(i32 v);
extern "C" i32 isalnum(i32 v);
extern "C" i32 isdigit(i32 v);
Token At__ref_Lexeri64(Lexer* self, i64 i);
void Eat__ref_Lexer(Lexer* self);
void Eat__ref_Lexeri64(Lexer* self, i64 count);
Token Next__ref_Lexer(Lexer* self);
extern "C" i32 putchar(i32 c);
extern "C" void abort();
extern "C" i32 dlatoi(i8* src);
extern "C" i64 dlStringToI64(i8* string);
extern "C" f64 dlStringToF64(i8* string);
i32 i32FromString_Str(Str string);
i64 i64FromString_Str(Str string);
f64 f64FromString_Str(Str string);
i32 cstrlen__ref_i8(i8* chars);
Str StringFromCString__ref_i8(i8* chars);
i8 _eq__StrStr(Str l, Str r);
void Print_Str(Str value);
i32 Char_Str(Str char);
Str StringFromChar_i8(i8 char);
void Println_Str(Str string);
Str _add__StrStr(Str a, Str b);
Str String_i64(i64 number);
Str String_f32(f32 number);
void assert_i8Str(i8 condition, Str reason);
void assert_i8(i8 condition);
i64 Hash_i64(i64 p);
i64 Hash_Str(Str string);
i8 HashEqual_StrStr(Str a, Str b);
void Push_ref_Array_ErrorError1(Array_Error* array, Error value);
Block* New_typeofBlock1();
i8 _eq__ref_Expr_typeofNil1(Expr* value);
i8 _notEq__ref_Expr_typeofNil1(Expr* value);
void Push_ref_Array_StrStr2(Array_Str* array, Str value);
Function* New_typeofFunction2();
Structure* New_typeofStructure3();
i8 _eq__ref_Type_typeofNil2(Type* value);
void Push_ref_Array__ref_Type_ref_Type3(Array__ref_Type* array, Type* value);
Trait* New_typeofTrait4();
i8 _notEq__ref_Function_typeofNil2(Function* value);
TypeOption* New_typeofTypeOption5();
TypeType* New_typeofTypeType6();
TypeIdentifier* New_typeofTypeIdentifier7();
TypeGeneric* New_typeofTypeGeneric8();
TypeRef* New_typeofTypeRef9();
TypeAny* New_typeofTypeAny10();
Variable* New_typeofVariable11();
i8 Is_ref_Expr_typeofExpressionList1(Expr* expr);
ForList* New_typeofForList12();
ExpressionList* As_ref_Expr_typeofExpressionList1(Expr* expr);
For* New_typeofFor13();
Branch* New_typeofBranch14();
If* New_typeofIf15();
Return* New_typeofReturn16();
Identifier* New_typeofIdentifier17();
NumberConstant* New_typeofNumberConstant18();
StringConstant* New_typeofStringConstant19();
Call* New_typeofCall20();
ExpressionList* New_typeofExpressionList21();
void Push_ref_Array__ref_Expr_ref_Expr4(Array__ref_Expr* array, Expr* value);
i8 _notEq__ref_Type_typeofNil3(Type* value);
Access* New_typeofAccess22();
Assign* New_typeofAssign23();
void assert_ref_ExprStr1(Expr* condition, Str reason);
Str* Last_ref_Array_Str1(Array_Str* array);
void Pop_ref_Array_Str1(Array_Str* array);
i8 _eq__ref_Module_typeofNil3(Module* value);
Module** _bracket__ref_Array__ref_Modulei641(Array__ref_Module* array, i64 size);
Error* _bracket__ref_Array_Errori642(Array_Error* array, i64 size);
i8 Is_ref_Type_typeofTypeAny1(Type* typ);
i8 Is_ref_Type_typeofTypeType2(Type* typ);
TypeType* As_ref_Type_typeofTypeType1(Type* typ);
i8 Is_ref_Type_typeofTypeRef3(Type* typ);
TypeRef* As_ref_Type_typeofTypeRef2(Type* typ);
i8 Is_ref_Type_typeofTypeIdentifier4(Type* typ);
TypeIdentifier* As_ref_Type_typeofTypeIdentifier3(Type* typ);
i8 Is_ref_Expr_typeofStructure2(Expr* expr);
Structure* As_ref_Expr_typeofStructure2(Expr* expr);
i8 Is_ref_Type_typeofTypeGeneric5(Type* typ);
TypeGeneric* As_ref_Type_typeofTypeGeneric4(Type* typ);
i8 Is_ref_Type_typeofTypeStructure6(Type* typ);
TypeStructure* As_ref_Type_typeofTypeStructure5(Type* typ);
Type** _bracket__ref_Array__ref_Typei643(Array__ref_Type* array, i64 size);
i8 Is_ref_Type_typeofTypeNumber7(Type* typ);
TypeNumber* As_ref_Type_typeofTypeNumber6(Type* typ);
Str* _bracket__ref_Table_StrStrStr1(Table_StrStr* table, Str key);
i8 _notEq__ref_FunctionSpec_typeofNil4(FunctionSpec* value);
i8 _notEq__ref_Block_typeofNil5(Block* value);
Expr** _bracket__ref_Array__ref_Expri644(Array__ref_Expr* array, i64 size);
void Init_ref_Table_StrStr1(Table_StrStr* table);
i8 Is_ref_Expr_typeofVariable3(Expr* expr);
FunctionSpec** _bracket__ref_Array__ref_FunctionSpeci645(Array__ref_FunctionSpec* array, i64 size);
TypeAnyResolved* _bracket__ref_Array_TypeAnyResolvedi646(Array_TypeAnyResolved* array, i64 size);
TypeStructure** _bracket__ref_Array__ref_TypeStructurei647(Array__ref_TypeStructure* array, i64 size);
i8 PtrEqual_ref_Structure_ref_Structure1(Structure* lhs, Structure* rhs);
Variable** _bracket__ref_Array__ref_Variablei648(Array__ref_Variable* array, i64 size);
i8 Is_ref_Type_typeofTypeOption8(Type* typ);
TypeOption* As_ref_Type_typeofTypeOption7(Type* typ);
i8 Is_ref_Expr_typeofBlock4(Expr* expr);
Block* As_ref_Expr_typeofBlock3(Expr* expr);
i8 Is_ref_Expr_typeofFunction5(Expr* expr);
Function* As_ref_Expr_typeofFunction4(Expr* expr);
i8 _eq__ref_Block_typeofNil4(Block* value);
Variable* As_ref_Expr_typeofVariable5(Expr* expr);
i8 Is_ref_Expr_typeofCall6(Expr* expr);
Call* As_ref_Expr_typeofCall6(Expr* expr);
i8 Is_ref_Expr_typeofTypeAs7(Expr* expr);
i8* _bracket__ref_Array_i8i649(Array_i8* array, i64 size);
i8 Is_ref_Expr_typeofFunctionSpec8(Expr* expr);
FunctionSpec* As_ref_Expr_typeofFunctionSpec7(Expr* expr);
i8 Is_ref_Expr_typeofForList9(Expr* expr);
ForList* As_ref_Expr_typeofForList8(Expr* expr);
void assert_ref_Type1(Type* condition);
i8 Is_ref_Expr_typeofFor10(Expr* expr);
For* As_ref_Expr_typeofFor9(Expr* expr);
i8 Is_ref_Expr_typeofIf11(Expr* expr);
If* As_ref_Expr_typeofIf10(Expr* expr);
i8 _notEq__ref_If_typeofNil6(If* value);
i8 Is_ref_Expr_typeofIdentifier12(Expr* expr);
Identifier* As_ref_Expr_typeofIdentifier11(Expr* expr);
i8 Is_ref_Expr_typeofAccess13(Expr* expr);
Access* As_ref_Expr_typeofAccess12(Expr* expr);
i8 _notEq__ref_Call_typeofNil7(Call* value);
i8 Is_ref_Expr_typeofAssign14(Expr* expr);
Assign* As_ref_Expr_typeofAssign13(Expr* expr);
i8 Is_ref_Expr_typeofTrait15(Expr* expr);
Trait* As_ref_Expr_typeofTrait14(Expr* expr);
i8 Is_ref_Expr_typeofNumberConstant16(Expr* expr);
NumberConstant* As_ref_Expr_typeofNumberConstant15(Expr* expr);
i8 Is_ref_Expr_typeofStringConstant17(Expr* expr);
StringConstant* As_ref_Expr_typeofStringConstant16(Expr* expr);
i8 Is_ref_Expr_typeofReturn18(Expr* expr);
Return* As_ref_Expr_typeofReturn17(Expr* expr);
i8 PtrEqual_ref_Function_ref_Function2(Function* lhs, Function* rhs);
void assert_ref_TypeStr2(Type* condition, Str reason);
TypeAs* New_typeofTypeAs24();
void Init_ref_Array__ref_TypeNumberi641(Array__ref_TypeNumber* array, i64 length);
TypeNumber** _bracket__ref_Array__ref_TypeNumberi6410(Array__ref_TypeNumber* array, i64 size);
void Init_ref_Array_Functioni642(Array_Function* array, i64 length);
Function* _bracket__ref_Array_Functioni6411(Array_Function* array, i64 size);
void Push_ref_Array__ref_Block_ref_Block5(Array__ref_Block* array, Block* value);
Block** Last_ref_Array__ref_Block2(Array__ref_Block* array);
void Pop_ref_Array__ref_Block2(Array__ref_Block* array);
TypeAny* As_ref_Type_typeofTypeAny8(Type* typ);
i8 _notEq__ref_TypeIdentifier_typeofNil8(TypeIdentifier* value);
i8 PtrEqual_ref_Expr_ref_Trait3(Expr* lhs, Trait* rhs);
Function** _bracket__ref_Array__ref_Functioni6412(Array__ref_Function* array, i64 size);
i8 PtrEqual_ref_Trait_ref_Trait4(Trait* lhs, Trait* rhs);
i8 _eq__ref_Function_typeofNil5(Function* value);
i8 _notEq__ref_TypeFunctions_typeofNil9(TypeFunctions* value);
void Init_ref_Array_i8i643(Array_i8* array, i64 length);
Expr** _bracket__ref_Table_Str_ref_ExprStr2(Table_Str_ref_Expr* table, Str key);
TypeAs* As_ref_Expr_typeofTypeAs18(Expr* expr);
void Push_ref_Array__ref_Structure_ref_Structure6(Array__ref_Structure* array, Structure* value);
void Push_ref_Array__ref_TypeStructure_ref_TypeStructure7(Array__ref_TypeStructure* array, TypeStructure* value);
i8 _notEq__ref_Variable_typeofNil10(Variable* value);
i8 _notEq__ref_TypeStructure_typeofNil11(TypeStructure* value);
void Insert_ref_Array__ref_Expri64_ref_Expr1(Array__ref_Expr* array, i64 index, Expr* value);
void assert_ref_FunctionSpec2(FunctionSpec* condition);
void assert_ref_ExpressionListStr3(ExpressionList* condition, Str reason);
void assert_ref__ref_ExprStr4(Expr** condition, Str reason);
i8 _eq__ref_Variable_typeofNil6(Variable* value);
i8 _eq__ref_Call_typeofNil7(Call* value);
i8 Is_ref_Expr_typeofBranch19(Expr* expr);
i8 PtrEqual_ref_Type_ref_Type5(Type* lhs, Type* rhs);
i8 _eq__ref_TypeIdentifier_typeofNil8(TypeIdentifier* value);
i8 PtrEqual_ref_Expr_ref_Expr6(Expr* lhs, Expr* rhs);
i8 PtrEqual_ref_TypeAny_ref_TypeAny7(TypeAny* lhs, TypeAny* rhs);
void assert_ref_TypeStructure3(TypeStructure* condition);
i8 PtrEqual_ref_TypeStructure_ref_TypeStructure8(TypeStructure* lhs, TypeStructure* rhs);
i8 PtrEqual_ref_TypeNumber_ref_TypeNumber9(TypeNumber* lhs, TypeNumber* rhs);
void assert_ref_TypeStructureStr5(TypeStructure* condition, Str reason);
void assert_ref__ref_TypeStr6(Type** condition, Str reason);
i8 _notEq__ref_Module_typeofNil12(Module* value);
Module* Alloc_typeofModulei641(i64 count);
void Push_ref_Array__ref_Module_ref_Module8(Array__ref_Module* array, Module* value);
i8 _eq__ref_FileHandle_typeofNil9(FileHandle* value);
i8* Alloc_typeofi8i642(i64 count);
i8 _notEq__ref_i8_typeofNil13(i8* value);
void Init_ref_Array__ref_Type1(Array__ref_Type* array);
TypeNumber* New_typeofTypeNumber25();
void Init_ref_Array__ref_Expr2(Array__ref_Expr* array);
void Init_ref_Table_Str_ref_Expr2(Table_Str_ref_Expr* table);
void Init_ref_Table_Str_ref_TypeFunctions3(Table_Str_ref_TypeFunctions* table);
TypeFunctions** _bracket__ref_Table_Str_ref_TypeFunctionsStr3(Table_Str_ref_TypeFunctions* table, Str key);
i8 _eq__ref_TypeFunctions_typeofNil10(TypeFunctions* value);
TypeFunctions* Alloc_typeofTypeFunctionsi643(i64 count);
void Push_ref_Array__ref_Function_ref_Function9(Array__ref_Function* array, Function* value);
void Init_ref_Array_TypeAnyResolved3(Array_TypeAnyResolved* array);
FunctionSpec* New_typeofFunctionSpec26();
void Push_ref_Array__ref_FunctionSpec_ref_FunctionSpec10(Array__ref_FunctionSpec* array, FunctionSpec* value);
void Push_ref_Array_TypeAnyResolvedTypeAnyResolved11(Array_TypeAnyResolved* array, TypeAnyResolved value);
void assert_ref_VariableStr7(Variable* condition, Str reason);
void Push_ref_Array__ref_Variable_ref_Variable12(Array__ref_Variable* array, Variable* value);
TypeStructure* New_typeofTypeStructure27();
void Push_ref_Array_TokenToken13(Array_Token* array, Token value);
Token* _bracket__ref_Array_Tokeni6414(Array_Token* array, i64 size);
void Init_ref_Array_i84(Array_i8* array);
void Push_ref_Array_i8i814(Array_i8* array, i8 value);
void Push_ref_Array_i8i815(Array_i8* array, i8 value);
void CopyPtr_ref_i8_ref_i8i641(i8* from, i8* to, i64 len);
void Reserve_ref_Array_Errori645(Array_Error* array, i64 count);
Block* Alloc_typeofBlocki645(i64 count);
void Reserve_ref_Array_Stri646(Array_Str* array, i64 count);
Function* Alloc_typeofFunctioni646(i64 count);
Structure* Alloc_typeofStructurei647(i64 count);
void Reserve_ref_Array__ref_Typei647(Array__ref_Type* array, i64 count);
Trait* Alloc_typeofTraiti648(i64 count);
TypeOption* Alloc_typeofTypeOptioni649(i64 count);
TypeType* Alloc_typeofTypeTypei6410(i64 count);
TypeIdentifier* Alloc_typeofTypeIdentifieri6411(i64 count);
TypeGeneric* Alloc_typeofTypeGenerici6412(i64 count);
TypeRef* Alloc_typeofTypeRefi6413(i64 count);
TypeAny* Alloc_typeofTypeAnyi6414(i64 count);
Variable* Alloc_typeofVariablei6415(i64 count);
ForList* Alloc_typeofForListi6416(i64 count);
For* Alloc_typeofFori6417(i64 count);
Branch* Alloc_typeofBranchi6418(i64 count);
If* Alloc_typeofIfi6419(i64 count);
Return* Alloc_typeofReturni6420(i64 count);
Identifier* Alloc_typeofIdentifieri6421(i64 count);
NumberConstant* Alloc_typeofNumberConstanti6422(i64 count);
StringConstant* Alloc_typeofStringConstanti6423(i64 count);
Call* Alloc_typeofCalli6424(i64 count);
ExpressionList* Alloc_typeofExpressionListi6425(i64 count);
void Reserve_ref_Array__ref_Expri648(Array__ref_Expr* array, i64 count);
Access* Alloc_typeofAccessi6426(i64 count);
Assign* Alloc_typeofAssigni6427(i64 count);
Str* _bracket__ref_Array_Stri6419(Array_Str* array, i64 size);
void Resize_ref_Table_StrStr2(Table_StrStr* table);
TableNode_StrStr* _bracket__ref_Array_TableNode_StrStri6420(Array_TableNode_StrStr* array, i64 size);
void Init_ref_Array_TableNode_StrStr7(Array_TableNode_StrStr* array);
void Resize_ref_Array_TableNode_StrStri643(Array_TableNode_StrStr* array, i64 size);
TypeAs* Alloc_typeofTypeAsi6428(i64 count);
void Reserve_ref_Array__ref_TypeNumberi649(Array__ref_TypeNumber* array, i64 count);
void Reserve_ref_Array_Functioni6410(Array_Function* array, i64 count);
void Reserve_ref_Array__ref_Blocki6411(Array__ref_Block* array, i64 count);
Block** _bracket__ref_Array__ref_Blocki6421(Array__ref_Block* array, i64 size);
void Reserve_ref_Array_i8i6412(Array_i8* array, i64 count);
void Resize_ref_Table_Str_ref_Expr3(Table_Str_ref_Expr* table);
TableNode_Str_ref_Expr* _bracket__ref_Array_TableNode_Str_ref_Expri6422(Array_TableNode_Str_ref_Expr* array, i64 size);
void Reserve_ref_Array__ref_Structurei6413(Array__ref_Structure* array, i64 count);
void Reserve_ref_Array__ref_TypeStructurei6414(Array__ref_TypeStructure* array, i64 count);
void Reserve_ref_Array__ref_Modulei6415(Array__ref_Module* array, i64 count);
TypeNumber* Alloc_typeofTypeNumberi6429(i64 count);
void Init_ref_Array_TableNode_Str_ref_Expr8(Array_TableNode_Str_ref_Expr* array);
void Resize_ref_Array_TableNode_Str_ref_Expri644(Array_TableNode_Str_ref_Expr* array, i64 size);
void Init_ref_Array_TableNode_Str_ref_TypeFunctions9(Array_TableNode_Str_ref_TypeFunctions* array);
void Resize_ref_Array_TableNode_Str_ref_TypeFunctionsi645(Array_TableNode_Str_ref_TypeFunctions* array, i64 size);
void Resize_ref_Table_Str_ref_TypeFunctions4(Table_Str_ref_TypeFunctions* table);
TableNode_Str_ref_TypeFunctions* _bracket__ref_Array_TableNode_Str_ref_TypeFunctionsi6423(Array_TableNode_Str_ref_TypeFunctions* array, i64 size);
void Reserve_ref_Array__ref_Functioni6416(Array__ref_Function* array, i64 count);
FunctionSpec* Alloc_typeofFunctionSpeci6430(i64 count);
void Reserve_ref_Array__ref_FunctionSpeci6417(Array__ref_FunctionSpec* array, i64 count);
void Reserve_ref_Array_TypeAnyResolvedi6418(Array_TypeAnyResolved* array, i64 count);
void Reserve_ref_Array__ref_Variablei6419(Array__ref_Variable* array, i64 count);
TypeStructure* Alloc_typeofTypeStructurei6431(i64 count);
void Reserve_ref_Array_Tokeni6420(Array_Token* array, i64 count);
Error* Realloc_ref_Errori642(Error* previous, i64 count);
void Memset_ref_Errori64i642(Error* start, i64 value, i64 count);
Str* Realloc_ref_Stri643(Str* previous, i64 count);
void Memset_ref_Stri64i643(Str* start, i64 value, i64 count);
Type** Realloc_ref__ref_Typei644(Type** previous, i64 count);
void Memset_ref__ref_Typei64i644(Type** start, i64 value, i64 count);
Expr** Realloc_ref__ref_Expri645(Expr** previous, i64 count);
void Memset_ref__ref_Expri64i645(Expr** start, i64 value, i64 count);
void Reserve_ref_Array_TableNode_StrStri6421(Array_TableNode_StrStr* array, i64 count);
TypeNumber** Realloc_ref__ref_TypeNumberi646(TypeNumber** previous, i64 count);
void Memset_ref__ref_TypeNumberi64i646(TypeNumber** start, i64 value, i64 count);
Function* Realloc_ref_Functioni647(Function* previous, i64 count);
void Memset_ref_Functioni64i647(Function* start, i64 value, i64 count);
Block** Realloc_ref__ref_Blocki648(Block** previous, i64 count);
void Memset_ref__ref_Blocki64i648(Block** start, i64 value, i64 count);
i8* Realloc_ref_i8i649(i8* previous, i64 count);
void Memset_ref_i8i64i649(i8* start, i64 value, i64 count);
Structure** Realloc_ref__ref_Structurei6410(Structure** previous, i64 count);
void Memset_ref__ref_Structurei64i6410(Structure** start, i64 value, i64 count);
TypeStructure** Realloc_ref__ref_TypeStructurei6411(TypeStructure** previous, i64 count);
void Memset_ref__ref_TypeStructurei64i6411(TypeStructure** start, i64 value, i64 count);
Module** Realloc_ref__ref_Modulei6412(Module** previous, i64 count);
void Memset_ref__ref_Modulei64i6412(Module** start, i64 value, i64 count);
void Reserve_ref_Array_TableNode_Str_ref_Expri6422(Array_TableNode_Str_ref_Expr* array, i64 count);
void Reserve_ref_Array_TableNode_Str_ref_TypeFunctionsi6423(Array_TableNode_Str_ref_TypeFunctions* array, i64 count);
Function** Realloc_ref__ref_Functioni6413(Function** previous, i64 count);
void Memset_ref__ref_Functioni64i6413(Function** start, i64 value, i64 count);
FunctionSpec** Realloc_ref__ref_FunctionSpeci6414(FunctionSpec** previous, i64 count);
void Memset_ref__ref_FunctionSpeci64i6414(FunctionSpec** start, i64 value, i64 count);
TypeAnyResolved* Realloc_ref_TypeAnyResolvedi6415(TypeAnyResolved* previous, i64 count);
void Memset_ref_TypeAnyResolvedi64i6415(TypeAnyResolved* start, i64 value, i64 count);
Variable** Realloc_ref__ref_Variablei6416(Variable** previous, i64 count);
void Memset_ref__ref_Variablei64i6416(Variable** start, i64 value, i64 count);
Token* Realloc_ref_Tokeni6417(Token* previous, i64 count);
void Memset_ref_Tokeni64i6417(Token* start, i64 value, i64 count);
TableNode_StrStr* Realloc_ref_TableNode_StrStri6418(TableNode_StrStr* previous, i64 count);
void Memset_ref_TableNode_StrStri64i6418(TableNode_StrStr* start, i64 value, i64 count);
TableNode_Str_ref_Expr* Realloc_ref_TableNode_Str_ref_Expri6419(TableNode_Str_ref_Expr* previous, i64 count);
void Memset_ref_TableNode_Str_ref_Expri64i6419(TableNode_Str_ref_Expr* start, i64 value, i64 count);
TableNode_Str_ref_TypeFunctions* Realloc_ref_TableNode_Str_ref_TypeFunctionsi6420(TableNode_Str_ref_TypeFunctions* previous, i64 count);
void Memset_ref_TableNode_Str_ref_TypeFunctionsi64i6420(TableNode_Str_ref_TypeFunctions* start, i64 value, i64 count);
