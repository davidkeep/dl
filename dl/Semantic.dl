
Error fn node ref Expr, message Str {
	PrintError(node.at, message)
	assert(0)
}
Error fn at Position, message Str {
	PrintError(at, message)
	assert(0)
}


Semantic struct {
	error i8
	intrinsic Intrinsics

	scopes Array(ref Block)
	structures Array(ref Structure)
}

DeclareFunction fn semantic ref Semantic, self ref Function {
	if self.state != Visited {
		functions.Push(self)
		self.state = Visited

		if self.block != Nil
		{
			self.block.parent = self
	        if self.block.outer == Nil {
	            self.block.outer = semantic.scopes.Last().dref
	            assert(cast(i64, &self.block) != cast(i64, self.block.outer))
	        }
			semantic.scopes.Push(self.block)
			for i64(0) .. self.params.list.length {
				variable ref Variable = self.params.list[it].As(Variable)

				if !variable.super.typ.Is(TypeType)
				{
					semantic.Declare(variable.super)
				}
				semantic.AnnotateGeneric(variable.super.typ, self)
			}
			if self.result != Nil {
				semantic.AnnotateGeneric(self.result, self)
			}
			semantic.scopes.Pop()
		}
		else {
			for i64(0) .. self.params.list.length {
				variable ref Variable = self.params.list[it].As(Variable)
				semantic.AnnotateGeneric(variable.super.typ, self)
			}
			if self.result != Nil {
				semantic.AnnotateGeneric(self.result, self)
			}
		}
	}
}
Init fn semantic ref Semantic, ast ref Block
{
	semantic.scopes.Push(ast)

    semantic.intrinsic.Init(semantic, ast)

	for i64(0) .. ast.expressions.length {
		expr ref Expr = ast.expressions[it]
		semantic.Declare(expr)
	}

	//@ TODO store structures variables, functions seperately 
	for i64(0) .. ast.expressions.length {
		expr ref Expr = ast.expressions[it]
		if expr.Is(Structure) {
			semantic.Visit(expr)
		}

		// @TODO this should probably happen at parsing to avoid doing this branch
		else expr.Is(Variable) {
			expr.As(Variable).global = true
		}
	}
    
    for i64(0) .. ast.expressions.length {
        expr ref Expr = ast.expressions[it]
        if expr.Is(Function) {
            self ref Function = expr.As(Function)
			semantic.DeclareFunction(self)
        }
    }

    for i64(0) .. ast.expressions.length {
		expr ref Expr = ast.expressions[it]
		if expr.Is(Variable) {
			semantic.Visit(expr)
		}
	}

    semantic.scopes.Pop()

	semantic.Visit(ast.super)
	semantic.scopes.Push(ast)

	Println('Finished semantic pass')
}

Implements fn semantic ref Semantic, trai ref Trait, typ ref Type => i8 {

	if trai.PtrEqual(semantic.intrinsic.enumTrait) {
		if typ.Resolved().Is(TypeEnum) {
			return true
		}
		return false
	}

	// Check if this type is contrained by this trait since then it would implicitly implement the required functionality
	if typ.Is(TypeAny) 
	{
		if typ.As(TypeAny).constraintIdent != Nil
		{
			if typ.As(TypeAny).constraintIdent.spec.PtrEqual(trai)
			{
			 	return true
			}
		}
	}
 	//trai.typeTrait.reference = typ

	implements i8 = true
	//assert(trai.required.length > 0)
	for i64(0) .. trai.required.length
	{
		function ref Function = trai.required[it]
		for i64(0) .. function.any.length 
		{
			any ref TypeAny = function.any[it].As(TypeAny)
			if any.constraintIdent != Nil && any.constraintIdent.spec.As(Trait).PtrEqual(trai) {
				any.reference = typ
			}
		}
		if semantic.FindMatch(trai.super, function.ident, function.params) == Nil {
			implements = false
		}
		for i64(0) .. function.any.length 
		{
			any ref TypeAny = function.any[it].As(TypeAny)
			if any.constraintIdent != Nil && any.constraintIdent.spec.As(Trait).PtrEqual(trai) {
				any.reference = cast(ref Type, 0)
			}
		}
	}
	//trai.typeTrait.reference = cast(ref Type, 0)
	return implements
}

FindMatches fn semantic ref Semantic, self ref Expr, ident Str, args ref ExpressionList => ref TypeFunctions 
{
	scope ref Block =  semantic.scopes.Last()
	for scope
	{
		expr ref TypeFunctions = scope.LookupFns(ident)
		if expr != Nil 
		{
			return expr
		}
		scope = scope.outer
	}
	self.Error('No known function named ' + ident)
	return cast(ref TypeFunctions, 0)
}

FindMatch fn semantic ref Semantic, self ref Expr, ident Str, args ref ExpressionList => ref Function 
{
	funcs ref TypeFunctions =  semantic.FindMatches(self, ident, args)

	found ref Function
	foundKnown Known

	for i64(0) .. funcs.functions.length {
		f ref Function = funcs.functions[it]
	
		if f.params.list.length == args.list.length && !f.traitFunction
		{
			matched i8 = 1
			known Known
			known.drefCount.Init(args.list.length)
			for i64(0) .. f.params.list.length 
			{
				if Apply(semantic, args.list[it].typ, f.params.list[it].typ, known, it) == 0
				{
					if Coerce(f.params.list[it], args.list[it], false) == 0 {
						matched = 0
					}
				}
			}
			if matched {
				found = f
				foundKnown = known
			}
		}	
	}
	return found
}

FindType fn semantic ref Semantic, ident Str, at Position => ref Expr {
	expr ref Expr = semantic.FindPrivate(ident)
	if expr == Nil {
		at.Error('No known type named ' + ident)
	}
	return expr
}
FindVariable fn semantic ref Semantic, ident Str, at Position => ref Expr {
	expr ref Expr = semantic.FindPrivate(ident)
	if expr == Nil {
		at.Error('No known variable named ' + ident)
	}
	return expr
}

FindPrivate fn semantic ref Semantic, ident Str => ref Expr {
	scope ref Block =  semantic.scopes.Last()
	for scope
	{
		expr ref Expr = scope.variables[ident]

		if expr != Nil
		{
			return expr
		}
		if expr == Nil {
				assert(scope.variables[ident].dref == Nil)	
		}
		scope = scope.outer
	}
	return cast(ref Expr, 0)
}

Declared i32 = 0
Visiting i32 = 1
Visited i32 = 2
structures Array(ref TypeStructure)
functions Array(ref Function)
enums Array(ref Enum)

Declare fn block ref Block, expr ref Expr {
	if expr.Is(Structure) {
		self ref Structure = expr.As(Structure)
		self.typeIdent.As(TypeIdentifier).ident = self.ident
		assert(self.ident.chars, 'failed in declare')
		block.Insert(self.ident, expr)
	}
	else expr.Is(Enum) {
		self ref Enum = expr.As(Enum)
		assert(self.ident.chars, 'failed in declare')
		block.Insert(self.ident, expr)
		enums.Push(self)
	}
	else expr.Is(Function) {
		self ref Function = expr.As(Function)
		assert(self.ident.chars, 'failed in declare')
		block.InsertFn(self.ident, self)
	}
	else expr.Is(Variable) {
		self ref Variable = expr.As(Variable)
		assert(self.ident.chars, 'failed in declare')
		block.Insert(self.ident, expr)
	}
    else expr.Is(Trait) {
        self ref Trait = expr.As(Trait)
        assert(self.ident.chars, 'failed in declare')
        block.Insert(self.ident, expr)
        for i64(0) .. self.required.length {
        	block.Add(&self.required[it].super)
        }
    }
    else expr.Is(TypeAs) {
        self ref TypeAs = expr.As(TypeAs)
        assert(self.ident.chars, 'failed in declare')
        block.Insert(self.ident, expr)
    }
	else {
 		assert(0, 'Expected Structure, Function, Trait, or Variable')
	}
}

Declare fn semantic ref Semantic, expr ref Expr {
	semantic.scopes.Last().Declare(expr)
}

DrefCount fn desired ref Type, from ref Type => i64 {
  	typeLeft ref Type = desired.Resolved()
    typeRight ref Type = from.Resolved()
    count i32

    if !Equal(typeRight, typeLeft, false) {
    	if typeLeft.Is(TypeRef) {
    		typeLeft = typeLeft.As(TypeRef).reference.Resolved()
    		count = count - 1
    	}
    }
    return count
}

CheckAssignment fn self ref Expr, desired ref Type, from ref Expr => i64 {

	if from == Nil
	{
		if desired != Nil {
	    	self.Error('Cannot return a value of () from a from a function that requires return of ' + String(desired))
	    }
	    return 0
	}
	if desired == Nil{
		self.Error('Cannot return a value from a from a function without a return value')
	}


    typeRight ref Type = from.typ.Resolved()
    typeLeft ref Type = desired.Resolved()
    count i32

    if !Equal(typeRight, typeLeft, false) {
    	if typeRight.Is(TypeRef) {
    		typeRight = typeRight.As(TypeRef).reference.Resolved()
    		count = count - 1
    	}
    }
    else {
        return 0
    }

    if !Equal(typeRight, typeLeft, false)
    {
		value i32 = Coerce(typeLeft, from, true)
		if value == 0 {
			Error(self, String(desired) + ' cannot be assigned a type of ' + String(from.typ))
		}
    }
    return count
}

VisitAccess fn semantic ref Semantic, self ref Access, allowImplicitCall i8 => i8 {
	semantic.Visit(self.operand)
	typ ref Type = self.operand.typ.Resolved()
	for typ.Is(TypeRef) {
		typ = typ.As(TypeRef).reference
	}
	spec ref TypeStructure = typ.ResolveSpec()

	if typ.Is(TypeIdentifier) && typ.As(TypeIdentifier).spec.Is(Structure)
	{
		structure ref Structure = typ.As(TypeIdentifier).spec.As(Structure)
		variable ref Variable = structure.Lookup(self.field)
		if variable != Nil
		{			
			self.super.typ = variable.super.typ.Clone()
		}
	}
	if typ.Is(TypeEnum)
	{
		t ref TypeEnum = typ.As(TypeEnum)
		if t.IsAnyValue {
			for i64(0) .. t.parent.fields.length {
				if t.parent.fields[it].ident == self.field {
					self.super.typ = &t.parent.fields[it].super
					return true
				}
			}
			Error(self.super, 'No field named ' + self.field + ' on enum ' + t.parent.ident)
		}
		else {
			Error(self.super, '. used on enum value')
		}
	}
	if spec != Nil{

		typeStructure ref TypeStructure = spec
		self.super.typ = typeStructure.Lookup(self.field)
	}
    if allowImplicitCall && self.super.typ == Nil {

    	ident ref Identifier = New(Identifier)
        ident.super.at = self.super.at
    	ident.ident = self.field

    	self.call = New(Call)
        self.call.super.at = self.super.at
    	self.call.operand = &ident.super
    	self.call.params.Add(self.operand)
    	semantic.Visit(self.call.super)
    	self.super.typ = self.call.super.typ
    	return true
    }
	return self.super.typ != Nil
}

Visit fn semantic ref Semantic, expr ref Expr
{
	if expr.Is(Block) {
		self ref Block = expr.As(Block)
		if semantic.scopes.length > 0 {
			if self.outer == Nil {
				self.outer = semantic.scopes.Last().dref
                assert(cast(i64, self) != cast(i64, self.outer))
			}
		}
		semantic.scopes.Push(self)

		for i64(0) .. self.expressions.length {
			expr ref Expr = self.expressions[it]
			semantic.Visit(expr)
		}
		semantic.scopes.Pop()
		return
	}
	if expr.Is(Structure) {
		self ref Structure = expr.As(Structure)
        
        if self.state == Visiting || self.state == Visited {
            return
        }
        
		isNew i32 = self.state
		self.state = Visiting 

		self.block.outer = semantic.scopes.Last().dref
        assert(cast(i64, &self.block) != cast(i64, self.block.outer))

		semantic.scopes.Push(&self.block)
		for i64(0) .. self.constraints.length {
			any ref TypeAny = self.constraints[it].As(TypeAny)
			as ref TypeAs = New(TypeAs)
			as.super.typ = &any.super
			as.ident = any.ident
			semantic.Declare(as.super)
		}	

		for i64(0) .. self.fields.length {
			self.typeStructure.fields.Push(self.fields[it].super.typ)
		}
		self.typeStructure.constraints = self.constraints
    	//Print(' Created: ' + self.ident + ' ' + String(self.constraints) + '->' + String(cast(i64, &self.typeStructure)) + '\n')

		for i64(0) .. self.fields.length {
			semantic.Visit(self.fields[it].super)
		}
 		semantic.scopes.Pop()
 		if isNew == Declared{
 			semantic.structures.Push(self)
 			if self.constraints.length == 0 {
 				structures.Push(&self.typeStructure)
 			}
 		}
 		self.state = Visited 
		return
	}
	if expr.Is(Function) {
		self ref Function = expr.As(Function)
		semantic.DeclareFunction(self)

		if self.block != Nil
		{
			self.block.parent = self
	        if self.block.outer == Nil {
	            self.block.outer = semantic.scopes.Last().dref
	            assert(cast(i64, &self.block) != cast(i64, self.block.outer))
	        }
			semantic.scopes.Push(self.block)
			for i64(0) .. self.params.list.length {
				variable ref Variable = self.params.list[it].As(Variable)
				semantic.Annotate(variable.super.typ)
			}
			if self.result != Nil {
				semantic.Annotate(self.result)
			}
			semantic.scopes.Pop()
			semantic.Visit(self.block.super)
		}
		else 
		{
			for i64(0) .. self.params.list.length {
				variable ref Variable = self.params.list[it].As(Variable)
				semantic.Annotate(variable.super.typ)
			}
			if self.result != Nil {
				semantic.Annotate(self.result)
			}
		}
		func ref TypeFunction = New(TypeFunction)
		for i64(0) .. self.params.list.length {
			func.params.Push(self.params.list[it].typ)
		}
		func.result = self.result
		self.super.typ = &func.super
		return
	}
	if expr.Is(Variable) {
		self ref Variable = expr.As(Variable)
		semantic.Declare(self.super)
		semantic.Annotate(self.super.typ)
        if self.assign != Nil {
            semantic.Visit(self.assign)
            self.drefCount = 0-CheckAssignment(self.super, self.super.typ, self.assign)
        }
		return
	}
	if expr.Is(Identifier) {
		self ref Identifier = expr.As(Identifier)
		if self.ident == '' {
			assert(self.super.typ)
			semantic.Annotate(self.super.typ)
			return
		}

		referenced ref Expr = semantic.FindVariable(self.ident, self.super.at)
		self.reference = referenced

		if referenced.Is(TypeAs) {
			t ref TypeType = New(TypeType)
			t.reference = referenced.typ
			self.super.typ = &t.super
		}
		else {
			self.super.typ = referenced.typ
		}
		assert(self.super.typ, 'Expect type to be non nil')
		return
	}
	if expr.Is(Access) {
		self ref Access = expr.As(Access)
		
		if !semantic.VisitAccess(self, true) {
			Error(expr, 'Could not find field named ' + self.field)
		}
		return
	}
	if expr.Is(Call) {
		self ref Call = expr.As(Call)
		if self.operand.Is(Access) {
			access ref Access = self.operand.As(Access)
			if semantic.VisitAccess(access, false) {
			}
	       	else {
	        	self.params.list.Insert(0, access.operand)
		        ident ref Identifier = New(Identifier)
		        ident.ident = access.field
		        self.operand = &ident.super
	        }
		}
		if self.operand.typ != Nil && self.operand.typ.Is(TypeFunction) {
			semantic.Visit(self.params.super)

			f ref TypeFunction = self.operand.typ.As(TypeFunction)
			for i64(0) .. f.params.length 
			{
				known Known
				if Apply(semantic, self.params.list[it].typ, f.params[it], known, it) == 0
				{
					if Coerce(f.params[it], self.params.list[it], false)  == 0{
						Error(self.operand, 'Variable cannot be called with these parameters')
					}
				}
			}
			self.func = self.operand
			self.super.typ = f.result
			return
		}
		if self.operand.Is(Identifier)
		{
			semantic.Visit(self.params.super)

			{
				func ref Expr = semantic.FindPrivate(self.operand.As(Identifier).ident)
				if func != Nil && func.Is(Variable) {
					if !func.typ.Is(TypeFunction) {
						Error(expr, 'Variable is not callable')
					}

					f ref TypeFunction = func.typ.As(TypeFunction)
					if func != Nil {
						for i64(0) .. f.params.length 
						{
							known Known
							if Apply(semantic, self.params.list[it].typ, f.params[it], known, it) == 0
							{
								if Coerce(f.params[it], self.params.list[it], false)  == 0{
									Error(func, 'Variable cannot be called with these parameters')
								}
							}
						}
					}
					self.func = func
					self.super.typ = func.typ.As(TypeFunction).result
					return
				}

			}

			funcs ref TypeFunctions = semantic.FindMatches(self.super, self.operand.As(Identifier).ident, self.params)
			found ref Function
			foundKnown Known
			foundCount i32

			for i64(0) .. funcs.functions.length {
				f ref Function = funcs.functions[it]
				parent ref Function = ParentFunction(semantic.scopes.Last())
				ignore i8 = f.traitFunction && !(cast(i64, found) == 0)

				if (f.params.list.length == self.params.list.length) && !ignore
				{
					matched i8 = 1
					known Known
					known.drefCount.Init(self.params.list.length)
					for i64(0) .. f.params.list.length 
					{
						if Apply(semantic, self.params.list[it].typ, f.params.list[it].typ, known, it) == 0
						{
							if Coerce(f.params.list[it], self.params.list[it], false)  == 0{
								matched = 0
							}
						}
					}
					if matched {
						if (!f.traitFunction) || (cast(i64, found) == 0) {
							found = f
							foundKnown = known
							foundCount = foundCount + 1
						}
					}
				}	
			}
			if found == Nil {
				Println('---------------------------------------------')
				Print(self.operand.As(Identifier).ident)
				Print(' fn ')
				for i64(0) .. self.params.list.length {
					Print(self.params.list[it].typ)
					if(it != self.params.list.length - 1) {
						Print(', ')
					}
				}
				Println(')')
				Println('-------------------matches-------------------')
				for i64(0) .. funcs.functions.length {
					Print(funcs.functions[it].super)
					Println('')
				}
				Println('---------------------------------------------')

				Error(self.super, 'No match for function: ' + self.operand.As(Identifier).ident)
			}

		
			for i64(0) .. found.params.list.length {
				Coerce(found.params.list[it], self.params.list[it], false)
			}
			self.drefCount = foundKnown.drefCount
			if foundKnown.known.length != 0
			{
				//Specialize also sets the typ of Call^ 
				//If not we would need to call Apply() to figure out the functions return type
				spec ref FunctionSpec = found.Specialize(semantic, self, semantic.scopes.Last().parent, foundKnown)


			//	assert(spec.any.length == foundKnown.known.length)
				assert(spec)
				self.func = &spec.super

				prev ref FunctionSpec = found.spec
				spec.Apply()
				if found.result != Nil {
					self.super.typ = found.result.Resolved().Clone()
					semantic.Annotate(self.super.typ)
				}
				if prev != Nil{
					prev.Apply()
				} 
				else {
					spec.Clear()
				}
				
				if !spec.incomplete {
					for i64(0) .. spec.known.length {
				        t TypeAnyResolved = spec.known[it]
				        assert(t.typ.ContainsUnknown() == false)
				    }
				}
			}
			else 
			{
				self.func = &found.super
				self.super.typ = found.result
				if found.result != Nil {
					self.super.typ = found.result.Resolved().Clone()
				}
			}
		}
		else
		{
			Error(expr, 'Call without identifier as operand')
		}
		return
	}

	if expr.Is(ExpressionList) {
		self ref ExpressionList = expr.As(ExpressionList)
		assert(self, 'nil')
		for i64(0) .. self.list.length {
			assert(self.list[it], 'nil item in list')

			semantic.Visit(self.list[it])
			assert(self.list[it].typ, 'Type should be non nil')
		}
		return
	}
    if expr.Is(Trait) {
        self ref Trait = expr.As(Trait)
        return
    }

    if expr.Is(NumberConstant) {
        self ref NumberConstant = expr.As(NumberConstant)
        for i64(0) .. self.value.length {
        	if PtrAdd(self.value.chars, it) == Char('.') {
        		self.decimal = true
        		self.super.typ = &f32Type.super // @TODO should be float
        		return 
        	}
        }
        num i64 = i64FromString(self.value)
        if num <= 127 && num >= 0-127{
        	self.super.typ = &i8Type.super
        }
        else num <= 32767 && num >= 0-32767 {
        	self.super.typ = &i16Type.super
        }
        else num <= 2147483647 && num >= 0-2147483647 {
        	self.super.typ = &i32Type.super
        }
        else {
        	self.super.typ = &i64Type.super
    	}
        assert(self.super.typ)
        return
    }
    if expr.Is(StringConstant) {
        self ref StringConstant = expr.As(StringConstant)
        t ref Type = semantic.FindType('Str', self.super.at).typ.As(TypeType).reference
        self.super.typ = t
        return
    }
 	if expr.Is(ForList) {
        self ref ForList = expr.As(ForList)
        semantic.Visit(self.list.super)
        if self.it == Nil {
	        variable ref Variable = New(Variable)
	        variable.ident = 'it'
	        variable.super.typ = self.list.list[0].typ
	        self.it = variable

	        self.block.expressions.Insert(0, &variable.super)
		}
        semantic.Visit(self.block.super)
        return
    }
    if expr.Is(For) {
        self ref For = expr.As(For)
        semantic.Visit(self.from)

        if self.to != Nil {

        	self.block.outer = semantic.scopes.Last().dref
			semantic.scopes.Push(self.block)
        	semantic.Visit(self.to)
        	
        	if self.from.typ.Is(TypeNumber) && self.to.typ.Is(TypeNumber){
        		if self.from.typ.As(TypeNumber).size < self.to.typ.As(TypeNumber).size {
        			self.from.typ = self.to.typ
        		}
        		else {
        			self.to.typ = self.from.typ
        		}
        	}

	        if self.it == Nil {
		        variable ref Variable = New(Variable)
		        variable.ident = 'it'
		        variable.super.typ = self.from.typ
		        self.it = variable
		        self.block.Declare(variable.super)
		        self.it.assign = self.from
		        //self.block.expressions.Insert(0, &variable.super)
			}


        	if self.test == Nil
        	{
        		it ref Identifier = New(Identifier)
				it.ident = 'it'


				self.test = New(Call)
				ident ref Identifier = New(Identifier)
				ident.ident = '<'
				self.test.operand =&ident.super
				self.test.params.list.Push(&it.super)
				self.test.params.list.Push(self.to)
			}
			if self.inc == Nil {
				ident ref Identifier = New(Identifier)
				ident.ident = 'it'

				constant ref NumberConstant = New(NumberConstant)
				constant.value = '1'

				add ref Identifier = New(Identifier)
				add.ident = '+'

				call ref Call = New(Call)
				call.operand = &add.super
				call.params.list.Push(&ident.super)
				call.params.list.Push(&constant.super)
				assign ref Assign = New(Assign)
				assign.super.at = self.super.at
				assign.left = &ident.super
				assign.right = &call.super

				self.inc = &assign.super
			}
			semantic.Visit(self.test.super)
			semantic.Visit(self.inc)
			semantic.scopes.Pop()
        }
        else !self.from.typ.PtrEqual(i8Type) {
        	self.block.outer = semantic.scopes.Last().dref
			semantic.scopes.Push(self.block)
        	
	        if self.it == Nil {
		        variable ref Variable = New(Variable)
		        variable.ident = 'it'
		        variable.super.typ = self.from.typ
		        self.it = variable
		        self.block.Declare(variable.super)
		        self.it.assign = self.from
			}


        	if self.test == Nil
        	{
        		it ref Identifier = New(Identifier)
				it.ident = 'it'
				self.test = New(Call)
				self.test.super.at = self.super.at
				ident ref Identifier = New(Identifier)
				ident.ident = 'Next'
				self.test.operand =&ident.super
				self.test.params.list.Push(&it.super)

			}
			semantic.Visit(self.test.super)
			if !Equal(self.test.super.typ, i8Type.super) {
				Error('Expected Next() to return a Bool', self.super.at)
			}
			semantic.scopes.Pop()
        }


        semantic.Visit(self.block.super)
        return
    }
    if expr.Is(Assign) {
        self ref Assign = expr.As(Assign)
        semantic.Visit(self.left)
        semantic.Visit(self.right)
        
        typeLeft ref Type = self.left.typ.Resolved()
        typeRight ref Type = self.right.typ.Resolved()
        count i32

        if !Equal(typeRight, typeLeft, false) {
        	if typeLeft.Is(TypeRef) {
        		typeLeft = typeLeft.As(TypeRef).reference.Resolved()
        		count = count - 1
        	}
        }
    
        self.drefCount = count

        if !Equal(typeRight, typeLeft, false)
        {
			value i32 = Coerce(typeLeft, self.right, false)
			if value == 0 {
				Error(self.super, String(self.left.typ) + ' cannot be assigned a type of ' + String(self.right.typ))
        		semantic.error = true
			}
        }

        return
    }
    if expr.Is(If) 
    {
    	self ref If = expr.As(If)
    	semantic.Visit(self.condition)
    	if !Equal(self.condition.typ, &i8Type.super) {
    		self.super.Error('Expected condition to be of type Bool, did you mean to use "=="')
    	}
    	semantic.Visit(self.trueBranch.super)
    	if self.falseBranch != Nil {
    		semantic.Visit(self.falseBranch.super)
    	}
    	if self.falseCondition != Nil {
			semantic.Visit(self.falseCondition.super)
		}

        return
    }
    if expr.Is(Branch) {
        return
    }

    if expr.Is(Return) {
    	self ref Return = expr.As(Return)
        result ref Type = ParentFunction(semantic.scopes.Last()).result
    	if self.expr != Nil {
    		semantic.Visit(self.expr)
    	}
       	self.drefCount = 0-CheckAssignment(self.super, result, self.expr)
        return
    }
 	if expr.Is(TypeAs) {
        return
    }
	Println('Unhandled visit ' + String(expr.kind))
}

ParentFunction fn block ref Block => ref Function {
    cursor ref Block = block
    for cursor.outer {
        if cursor.parent != Nil {
        	return cursor.parent
        }
        cursor = cursor.outer
    }
    return cursor.parent
}

AnnotateGeneric fn semantic ref Semantic, t ref Type, spec ref Function
{
	assert(t, 'AnnotateGeneric called with a nil type')
	typ ref Type = t.Resolved()

	if typ.Is(TypeAny) {
		spec.AddAny(typ)
		
		self ref TypeAny = typ.As(TypeAny)
		if self.constraintIdent != Nil 
		{
			semantic.AnnotateGeneric(self.constraintIdent.super, spec)
			if self.constraintIdent.spec == Nil {
				Error('No known type named ' + self.constraintIdent.ident, spec.super.at)
			}
			else !self.constraintIdent.spec.Is(Trait) {
				if self.constraintIdent.spec.Is(Structure) {
					Error('Expected a trait to constrain a $ type found structure'  spec.super.at)
				}
				else {
					Error('Expected a trait to constrain a $ type ' + String(self.constraintIdent.spec.kind),  spec.super.at)
				}
			} 
		}
		return
	}
	if typ.Is(TypeRef) {
		self ref TypeRef = typ.As(TypeRef)
		semantic.AnnotateGeneric(self.reference, spec)
		return
	}
	if typ.Is(TypeOption) {
		self ref TypeOption = typ.As(TypeOption)
		semantic.AnnotateGeneric(self.reference, spec)
		return
	}
	if typ.Is(TypeIdentifier) {
		self ref TypeIdentifier = typ.As(TypeIdentifier)
		assert(self.ident.chars, 'failed in declare')
		self.spec = semantic.FindType(self.ident, spec.super.at)
		if self.spec.Is(Structure) && self.spec.As(Structure).state != Visited {
			semantic.Visit(self.spec)
		}

		// Continue if we have resolved to something that is a differn't type (we must have hit a spec that is a type)
		// @TODO refactor how all these types are resolved. Spec should probably always be a type
		t ref Type = typ.Resolved()
		if !(t.PtrEqual(typ)) {
			semantic.AnnotateGeneric(t, spec)
		}
		return
	}
	if typ.Is(TypeGeneric) {
		self ref TypeGeneric = typ.As(TypeGeneric)
		semantic.AnnotateGeneric(self.ident.super, spec)
		for i64(0) .. self.constraints.length {
			semantic.AnnotateGeneric(self.constraints[it], spec)
		}
		structure ref Structure = self.ident.spec.As(Structure)
		self.referenced = semantic.SpecializeStructure(structure.typeStructure, self.constraints)
		return
	}
	if typ.Is(TypeType) {
		self ref TypeType = typ.As(TypeType)
		semantic.AnnotateGeneric(self.reference, spec)
		return
	}
	if typ.Is(TypeFunction) {
		self ref TypeFunction = typ.As(TypeFunction)
		for i64(0) .. self.params.length {
			semantic.AnnotateGeneric(self.params[it], spec)
		}
		if self.result != Nil {
			semantic.AnnotateGeneric(self.result, spec)
		}

		return
	}
	if typ.Is(TypeNumber) {
		return
	}
	if typ.Is(TypeEnum) {
		return
	}
	assert(0, 'No annotate generic for type ' + String(typ.kind))
}

Annotate fn semantic ref Semantic, t ref Type
{
	Annotate(semantic, t, false)
}
Annotate fn semantic ref Semantic, t ref Type, reference i8
{
	typ ref Type = t.Resolved()
	if typ.Is(TypeRef) {
		self ref TypeRef = typ.As(TypeRef)
		semantic.Annotate(self.reference, true)
		return
	}
	if typ.Is(TypeIdentifier) {
		self ref TypeIdentifier = typ.As(TypeIdentifier)
		assert(self.ident.chars, 'failed in declare')
        if self.spec == Nil {
        	a Position
            self.spec = semantic.FindType(self.ident, a)
			if !reference && self.spec.Is(Structure) && self.spec.As(Structure).state != Visited {
				semantic.Visit(self.spec)
			}
        }
        	// Continue if we have resolved to something that is a differn't type (we must have hit a spec that is a type)
		// @TODO refactor how all these types are resolved. Spec should probably always be a type
		t ref Type = typ.Resolved()
		if !(t.PtrEqual(typ)) {
			semantic.Annotate(t, reference)
		}
		return
	}
	if typ.Is(TypeGeneric) {
		self ref TypeGeneric = typ.As(TypeGeneric)
		semantic.Annotate(self.ident.super)
		for i64(0) .. self.constraints.length {
			semantic.Annotate(self.constraints[it], reference)
		}
		structure ref Structure = self.ident.spec.As(Structure)
		self.referenced = semantic.SpecializeStructure(structure.typeStructure, self.constraints)
		return
	}
	if typ.Is(TypeType) {
		self ref TypeType = typ.As(TypeType)
		semantic.Annotate(self.reference, reference)
		return
	}
	if typ.Is(TypeOption) {
		self ref TypeOption = typ.As(TypeOption)
		semantic.Annotate(self.reference, reference)
		return
	}
	if typ.Is(TypeNumber) {
		return
	}
	if typ.Is(TypeAny) {
		return
	}
	if typ.Is(TypeFunction) {
		self ref TypeFunction = typ.As(TypeFunction)
		for i64(0) .. self.params.length {
			semantic.Annotate(self.params[it], reference)
		}
		if self.result != Nil {
			semantic.Annotate(self.result, reference)
		}

		return
	}
    if typ.Is(TypeStructure) {
        return
    }
    if typ.Is(TypeEnum) {
		return
	}
	assert(0, 'No semantic annotate for type ' + String(typ.kind))
}

Clone fn t ref Type => ref Type
{
	any ref Type
	return CloneAny(t, any)
}


CloneAny fn t ref Type, any ref ref Type => ref Type
{
	expr ref Type = t.Resolved()

	if expr.Is(TypeRef) {
		self ref TypeRef = expr.As(TypeRef)

		out ref TypeRef = New(TypeRef)
		out.reference = self.reference.CloneAny(any)
		return &out.super
	}
	if expr.Is(TypeIdentifier) {
		self ref TypeIdentifier = expr.As(TypeIdentifier)
		assert(self.spec, 'No spec ' +  self.ident)
		if self.spec.Is(TypeAs) {
			assert(0)
			return self.spec.As(TypeAs).super.typ.CloneAny(any)
		}
        if self.spec.Is(Trait) {
        	assert(0)
            return self.spec.As(Trait).super.typ.CloneAny(any)
        }
		out ref TypeIdentifier = New(TypeIdentifier)
        out.ident = self.ident
		out.spec = self.spec


		return &out.super
	}
	if expr.Is(TypeAny) {
		//If this any type doesn't point to anything then leave it
		self ref TypeAny = expr.As(TypeAny)
		if self.reference == Nil {
			out ref TypeAny = New(TypeAny)
			out.parent = self.parent
			out.constraintIdent = self.constraintIdent
			out.ident = self.ident
			any = expr
			return &out.super
		}

		assert(0)
		return self.reference.CloneAny(any)
	}
	if expr.Is(TypeOption) {
		self ref TypeOption = expr.As(TypeOption)
		out ref TypeOption = New(TypeOption)
		out.reference = self.reference.CloneAny(any)
		return &out.super
	}
	if expr.Is(TypeType) {
		self ref TypeType = expr.As(TypeType)
		out ref TypeType = New(TypeType)
		out.reference = self.reference.CloneAny(any)
		return &out.super
	}
	if expr.Is(TypeGeneric) {
		self ref TypeGeneric = expr.As(TypeGeneric)

		out ref TypeGeneric = New(TypeGeneric)
		out.ident = self.ident

		for i64(0) .. self.constraints.length {
			out.constraints.Push(self.constraints[it].CloneAny(any))
		}
		out.referenced = self.referenced
        //if out.referenced.incomplete {
        //	any = expr
        //}
		return &out.super
	}
	if expr.Is(TypeFunction) 
	{
		self ref TypeFunction = expr.As(TypeFunction)
		out ref TypeFunction = New(TypeFunction)
		
		for 0.i64 .. self.params.length {
			out.params.Push(self.params[it].CloneAny(any))
		}
		if self.result != Nil {
			out.result = self.result.CloneAny(any)
		}
		return &out.super
	}
	if expr.Is(TypeNumber) {
		return expr
	}
    if expr.Is(TypeStructure) {
        return expr
    }
    if expr.Is(TypeEnum) {
        return expr
    }
	Println('Unhandled type visit')
	assert(0)
	return cast(ref Type, 0)
}

