PrintVisitor struct {
	indent i32
}
PrintIndent fn visitor ref PrintVisitor
{
	for i64(1) .. visitor.indent {
		Print('\t')
	}
}

PrintTabs fn count i32 {
    for i32(0) .. count {
        Print('\t')
    }
}

Print fn expr ref Expr {
	printer PrintVisitor
	expr.Visit(printer)
}

Print fn expr Type {
	printer PrintVisitor
	expr.Visit(printer)
}

Print fn expr ref Type {
	if expr == Nil {
		Print('()')
		return
	}

	printer PrintVisitor
	expr.Visit(printer)
}

Printable trait {
	Print fn t ref $T.Printable
}

Print fn array Array($T.Printable) {
	for 0.i64 .. array.length {
		Print(array[it])
		if it != array.length - 1 {
			Print(', ')
		}
	}
}

Visit fn expr ref Expr, visitor ref PrintVisitor
{
	if expr == Nil {
		return
	}

	if expr.Is(Block) {
		self ref Block = expr.As(Block)
		if visitor.indent != 0 {
			Println('{')
		}
		visitor.indent = visitor.indent + 1

		for i64(0) .. self.expressions.length
		{
			visitor.PrintIndent()
			self.expressions[it].Visit(visitor)
			Println('')
		}
		visitor.indent = visitor.indent - 1

		if visitor.indent != 0 {
			Println('}')
		}
		return
	}

	if expr.Is(Structure) {
		self ref Structure = expr.As(Structure)
		Print(self.ident)
		Print(' struct')
		if !self.incomplete {
			Println(' {')
			visitor.indent = visitor.indent + 1
			for i64(0) .. self.fields.length {
				visitor.PrintIndent()
				Print(self.fields[it].ident)
				Print(' ')
				self.fields[it].super.typ.Visit(visitor)
				Println('')
			}
			visitor.indent = visitor.indent - 1
			Println('}')
		}
		else
		{
			Println('')
		}
		return
	}

	if expr.Is(Function) {
		self ref Function = expr.As(Function)
		Print(self.ident)
		Print(' fn ')
		Print(self.params.super)
		Print(' ')
		Print(self.result)

		//if self.block { 
		// self.block.super.Visit(visitor)
		//}
		return
	}

	if expr.Is(Identifier) {
		self ref Identifier = expr.As(Identifier)
		Print(self.ident)
		return
	}

	if expr.Is(Call) {
		self ref Call = expr.As(Call)
		self.operand.Visit(visitor)
		self.params.super.Visit(visitor)
		return
	}
	if expr.Is(Access) {
		self ref Access = expr.As(Access)
		self.operand.Visit(visitor)
		Print('.')
		Print(self.field)
		return
	}

	if expr.Is(ExpressionList) {
		self ref ExpressionList = expr.As(ExpressionList)
		Print('(')
		for i64(0) .. self.list.length {
			self.list[it].Visit(visitor)
			if it != self.list.length - 1 {
				Print(', ')
			}
		}
		Print(')')
		return
	}


	if expr.Is(Variable) {
		self ref Variable = expr.As(Variable)
		Print(self.ident)
		Print(' ')
		expr.typ.Visit(visitor)
		return
	}

    if expr.Is(Trait) {
        self ref Trait = expr.As(Trait)
        Print(self.ident)
        Print(' trait')
        visitor.indent = visitor.indent + 1
        Println(' {')

        visitor.indent = visitor.indent - 1
        Println('}')
        return
    }
	Println('Unhandled print expr visit: ' + String(expr.kind))
}

Visit fn t ref Type, visitor ref PrintVisitor
{
	expr ref Type = &t
	Print(String(t))
}

PrettyPrint fn expr ref Type
{
	if expr == Nil {
		Print('()')
	}
	else {
		expr.PrettyPrint()
	}
}

PrettyPrint fn expr ref Expr
{
	if expr.Is(Structure) {
		self ref Structure = expr.As(Structure)
		Print(self.ident)
		return
	}

	if expr.Is(Function) {
		self ref Function = expr.As(Function)
		Print(self.ident)
		return
	}
	if expr.Is(TypeAs) {
		self ref TypeAs = expr.As(TypeAs)
		PrettyPrint(self.super.typ)
		return
	}
	if expr.Is(Trait) {
		self ref Trait = expr.As(Trait)
		Print('huh?')
		return
	}
	if expr.Is(Enum) {
		self ref Enum = expr.As(Enum)
		Print(self.ident + '.enum')
		return
	}

	Print('none ' + String(expr.kind))
}

PrettyPrint fn expr Type
{
	Print(String(expr))
}

String fn expr ref Expr => Str
{
	if expr == Nil {
		return '()'
	}

 	if expr.Is(Structure) {
		self ref Structure = expr.As(Structure)
		return self.ident
	}

	if expr.Is(Function) {
		self ref Function = expr.As(Function)
		return self.ident
	}
	if expr.Is(TypeAs) {
		self ref TypeAs = expr.As(TypeAs)

		return String(self.super.typ)
	}
 	if expr.Is(Trait) {
		self ref Trait = expr.As(Trait)
		return self.ident
	}
	if expr.Is(Enum) {
		self ref Enum = expr.As(Enum)
		return self.ident + '.enum'
	}
	return 'none ' + String(expr.kind)
}

String fn expr ref Type => Str
{
	if expr == Nil {
		return '()'
	}

	assert(&expr, 'nil value')
	if expr.Is(TypeRef) {
		self ref TypeRef = expr.As(TypeRef)		
		return 'ref ' + self.reference.String()
	}
	if expr.Is(TypeFunction) {
		self ref TypeFunction = expr.As(TypeFunction)		
		r Str = 'fn '
		for i64(0) .. self.params.length {
			r = r + String(self.params[it]) + ', '
		}

		return r
	}
	if expr.Is(TypeIdentifier) {
		self ref TypeIdentifier = expr.As(TypeIdentifier)
		if self.spec != Nil {
			return String(self.spec)
		}
		else
		{
			return 'untyped<' + self.ident + '>'	
		}
	}
	if expr.Is(TypeAny) {
		self ref TypeAny = expr.As(TypeAny)
		if self.parent != Nil {
			return '$' + self.ident + '->' + StringPtr(self.parent)
		}
		if self.constraintIdent != Nil {
			return '$' + self.ident + '.' + String(self.constraintIdent.super)
		}
		return '$' + self.ident
	}
	if expr.Is(TypeOption) {
		self ref TypeOption = expr.As(TypeOption)
		assert(self.reference, 'Require ref')

		value Str 
		if self.reference.Resolved().Is(TypeRef) {
			return 'ref? ' +self.reference.Resolved().As(TypeRef).reference.String()
		}
		else
		{
			return self.reference.String() + '?'
			
		}
	}
	if expr.Is(TypeType) {
		self ref TypeType = expr.As(TypeType)
		return 'typeof ' + String(self.reference)
	}
	if expr.Is(TypeEnum) {
		self ref TypeEnum = expr.As(TypeEnum)
		return self.parent.ident + '.' + self.ident
	}
	if expr.Is(TypeGeneric) {
		self ref TypeGeneric = expr.As(TypeGeneric)
		value Str = String(self.ident.super) +  '->' + StringPtr(self.referenced) + '('
		for i64(0) .. self.constraints.length {
			value = value + String(self.constraints[it])
			if it != self.constraints.length - 1 {
				value = value + ', '
			}
		}
		return value + ')'
	}
	if expr.Is(TypeNumber) {
		self ref TypeNumber = expr.As(TypeNumber)
		if self.kind == TypeNumberInteger {
			return 'i' + String(self.size * 8)
		}
		else self.kind == TypeNumberUnsigned  {
			return 'u' + String(self.size * 8)
		}
		else self.kind == TypeNumberFloat {
			return 'f' + String(self.size * 8)
		}
		else {
			assert(0)
		}
		return ''
	}
	Println('Unhandled type visit')
	return ''
}

