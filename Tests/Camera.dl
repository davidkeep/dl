//
//  Camera.dl
//  Created by David on 6/24/16.
//

@import {
    'Quaternion.dl',
    'Window.dl',
}

Camera struct
{
    projection Mat4
    view Mat4
    viewProjection Mat4

    viewportPosition Vec2
    viewportScale Vec2

    near f32
    far f32
    fieldOfView f32

    clearColor Vec4
    clear i8
}

Camera fn() Camera
{
	camera Camera
    camera.near = 1
    camera.far = 150
    camera.fieldOfView = 90
    camera.projection = Perspective(camera.fieldOfView, 2.0, camera.near, camera.far)
    camera.view = Translate(Vec3(0,0, -50))
    camera.viewportPosition = Vec2(0, 0)
    camera.viewportScale = Vec2(1, 1)

    camera.viewProjection = camera.projection * camera.view 
    return camera
}


// fn Recalculate(mut Camera camera, Transform !transform, Window window)
// {
//     camera.projection = Perspective(camera.fieldOfView, 1.0, camera.near, camera.far)
// }

Frustum fn(left f32, right f32, bottom f32, top f32, near f32, far f32) Mat4
{
    m Mat4
    zDelta f32 = (far-near)
    dir f32 = (right-left)
    height f32 = (top-bottom)
    zNear2 f32 = 2*near
    
    m11 f32 =  2.0*near/dir
    m22 f32 =  zNear2/height
    m33 f32 =  0-(far+near)/zDelta
    
    a f32 = (right+left)/dir
    b f32 = (top+bottom)/height
    d f32 = 0-zNear2*far/zDelta

    m[0][0] = m11
	m[0][4] = 0
    m[0][8] = a
   	m[0][12] = 0

    m[0][1] = 0
    m[0][5] = m22
    m[0][9] = b
   	m[0][13] = 0

    m[0][2] = 0
    m[0][6] = 0
    m[0][10] = m33
	m[0][14] = d

    m[0][3] = 0
    m[0][7] = 0
   	m[0][11] = -1
 	m[0][15] = 0

    return m
}

// Mat4 Mat4::Ortho(float left, float right, float top, float bottom, float far, float near)
// {
//     float m11 = 2/(right - left);
//     float m22 = 2/(top - bottom);
//     float m33 = -2/(far - near);
    
//     float m14 = -(right + left)/(right - left);
//     float m24 = -(top + bottom)/(top - bottom);
//     float m34 = -(far + near)/(far - near);
    
//     Mat4 m;
//     m.v.x[0] = m11;     m.v.x[4] = 0;    m.v.x[8] = 0;    m.v.x[12] = m14;
//     m.v.x[1] = 0;    m.v.x[5] = m22;     m.v.x[9] = 0;    m.v.x[13] = m24;
//     m.v.x[2] = 0;    m.v.x[6] = 0;    m.v.x[10] = m33;    m.v.x[14] = m34;
//     m.v.x[3] = 0;    m.v.x[7] = 0;    m.value[11] = 0;    m.value[15] = 1;
//     return m;
// }
Perspective fn(fovy f32, aspect f32, zNear f32, zFar f32) Mat4
{
    f f32 = 1/tanf(fovy * (PI / 180) / 2)
    m11 f32 = (f/aspect)
    m22 f32 = f
    m33 f32 = (zFar + zNear)/(zNear- zFar)
    m34 f32 = (2 * zFar * zNear)/(zNear - zFar)
    
    m Mat4
    m[0][0] = m11
    m[0][4] = 0
	m[0][8] = 0
	m[0][12] = 0

    m[0][1] = 0
    m[0][5] = m22
	m[0][9] = 0
	m[0][13] = 0

    m[0][2] = 0
	m[0][6] = 0
	m[0][10] = m33
	m[0][14] = m34

    m[0][3] = 0
	m[0][7] = 0
	m[0][11] = -1
	m[0][15] = 0

	return m
}

Translate fn(translate Vec3) Mat4
{
	m Mat4 = Mat4(1)
    m[0][12] = translate.x
    m[0][13] = translate.y
    m[0][14] = translate.z
    return m
}

Ray struct
{
    orgin Vec3
    direction Vec3
}

PointAt fn(self Ray, distance f32) Vec3
{
    return self.orgin + self.direction * distance
}

IntersectsSphere fn(self Ray, point Vec3, radius f32) i8
{
    m Vec3 = self.orgin - point
    b f32 = Dot(m, self.direction)
    c f32 = Dot(m, m) - radius * radius
    
    // Exit if râ€™s origin outside s (c > 0) and r pointing away from s (b > 0)
    if (c > 0 && b > 0) {
        return false
    }
    
    discr f32 = b*b - c
    // A negative discriminant corresponds to ray missing sphere
    if (discr < 0){ 
        return false
    }
    return true
}
    
IntersectsSphereDistance fn(self Ray, point Vec3, radius f32) f32
{
    m Vec3 = self.orgin - point
    b f32 = Dot(m, self.direction)
    c f32 = Dot(m, m) - radius * radius
    
    // Exit if râ€™s origin outside s (c > 0) and r pointing away from s (b > 0)
    if (c > 0 && b > 0) {
        return -1
    }
    discr f32 = b*b - c
    
    // A negative discriminant corresponds to ray missing sphere
    if (discr < 0){
        return -1
    }
    
    // Ray now found to intersect sphere, compute smallest t value of intersection
    t f32 = -b - sqrtf(discr)

    // If t is negative, ray started inside sphere so clamp t to zero
    if (t < 0) {
        t = 0
    }
    return t
}

ScreenToRay fn(self Camera, screen Vec2) Ray
{
    p Vec2
    p.x = screen.x / self.viewportScale.x - self.viewportPosition.x/self.viewportScale.x
    p.y = screen.y / self.viewportScale.y - self.viewportPosition.y/self.viewportScale.y

    iviewProj Mat4 =  Inverse(self.projection * self.view)
    iview Mat4 = Inverse(self.view)

    //Screen position in world coords on the near plane
    //Near plane is 1
    nearPlaneWorld Vec4 = (iviewProj) * Vec4(p.x, p.y, -1, 1)
    nearPlaneWorld = nearPlaneWorld/nearPlaneWorld.w

    ray Ray
    ray.orgin = Vec3(iview[3].x, iview[3].y, iview[3].z)
    ray.direction = Normalize(Vec3(nearPlaneWorld.x, nearPlaneWorld.y, nearPlaneWorld.z) - ray.orgin)
    return ray
}

mul fn(self Mat4, v Vec4) Vec4
{
    m Vec4
    m.x = v.x * self.x[0] + v.y * self.x[4] + v.z * self.x[8]  + v.w * self.x[12]
    m.y = v.x * self.x[1] + v.y * self.x[5] + v.z * self.x[9]  + v.w * self.x[13]
    m.z = v.x * self.x[2] + v.y * self.x[6] + v.z * self.x[10] + v.w * self.x[14]
    m.w = v.x * self.x[4] + v.y * self.x[7] + v.z * self.x[11] + v.w * self.x[15]
    return m
}

// Mat4 Mat4::Transpose() const
// {
//     Mat4 t
//     for (int i = 0; i < 4; i++)
//     {
//         for (int j = 0; j < 4; j++)
//         {
//             t.value[j*4+ i] = this->value[i*4+ j];
//         }
//     }
    
//     return t;
// }

Inverse fn(v Mat4) Mat4
{
    out Mat4
    det f32
    i i64
    
    out.x[0] = v.x[5]  * v.x[10] * v.x[15] -
    v.x[5]  * v.x[11] * v.x[14] -
    v.x[9]  * v.x[6]  * v.x[15] +
    v.x[9]  * v.x[7]  * v.x[14] +
    v.x[13] * v.x[6]  * v.x[11] -
    v.x[13] * v.x[7]  * v.x[10]
    
    out.x[4] = -v.x[4]  * v.x[10] * v.x[15] +
    v.x[4]  * v.x[11] * v.x[14] +
    v.x[8]  * v.x[6]  * v.x[15] -
    v.x[8]  * v.x[7]  * v.x[14] -
    v.x[12] * v.x[6]  * v.x[11] +
    v.x[12] * v.x[7]  * v.x[10]
    
    out.x[8] = v.x[4]  * v.x[9] * v.x[15] -
    v.x[4]  * v.x[11] * v.x[13] -
    v.x[8]  * v.x[5] * v.x[15] +
    v.x[8]  * v.x[7] * v.x[13] +
    v.x[12] * v.x[5] * v.x[11] -
    v.x[12] * v.x[7] * v.x[9]
    
    out.x[12] = -v.x[4]  * v.x[9] * v.x[14] +
    v.x[4]  * v.x[10] * v.x[13] +
    v.x[8]  * v.x[5] * v.x[14] -
    v.x[8]  * v.x[6] * v.x[13] -
    v.x[12] * v.x[5] * v.x[10] +
    v.x[12] * v.x[6] * v.x[9]
    
    out.x[1] = -v.x[1]  * v.x[10] * v.x[15] +
    v.x[1]  * v.x[11] * v.x[14] +
    v.x[9]  * v.x[2] * v.x[15] -
    v.x[9]  * v.x[3] * v.x[14] -
    v.x[13] * v.x[2] * v.x[11] +
    v.x[13] * v.x[3] * v.x[10]
    
    out.x[5] = v.x[0]  * v.x[10] * v.x[15] -
    v.x[0]  * v.x[11] * v.x[14] -
    v.x[8]  * v.x[2] * v.x[15] +
    v.x[8]  * v.x[3] * v.x[14] +
    v.x[12] * v.x[2] * v.x[11] -
    v.x[12] * v.x[3] * v.x[10]
    
    out.x[9] = -v.x[0]  * v.x[9] * v.x[15] +
    v.x[0]  * v.x[11] * v.x[13] +
    v.x[8]  * v.x[1] * v.x[15] -
    v.x[8]  * v.x[3] * v.x[13] -
    v.x[12] * v.x[1] * v.x[11] +
    v.x[12] * v.x[3] * v.x[9]
    
    out.x[13] = v.x[0]  * v.x[9] * v.x[14] -
    v.x[0]  * v.x[10] * v.x[13] -
    v.x[8]  * v.x[1] * v.x[14] +
    v.x[8]  * v.x[2] * v.x[13] +
    v.x[12] * v.x[1] * v.x[10] -
    v.x[12] * v.x[2] * v.x[9]
    
    out.x[2] = v.x[1]  * v.x[6] * v.x[15] -
    v.x[1]  * v.x[7] * v.x[14] -
    v.x[5]  * v.x[2] * v.x[15] +
    v.x[5]  * v.x[3] * v.x[14] +
    v.x[13] * v.x[2] * v.x[7] -
    v.x[13] * v.x[3] * v.x[6]
    
    out.x[6] = -v.x[0]  * v.x[6] * v.x[15] +
    v.x[0]  * v.x[7] * v.x[14] +
    v.x[4]  * v.x[2] * v.x[15] -
    v.x[4]  * v.x[3] * v.x[14] -
    v.x[12] * v.x[2] * v.x[7] +
    v.x[12] * v.x[3] * v.x[6]
    
    out.x[10] = v.x[0]  * v.x[5] * v.x[15] -
    v.x[0]  * v.x[7] * v.x[13] -
    v.x[4]  * v.x[1] * v.x[15] +
    v.x[4]  * v.x[3] * v.x[13] +
    v.x[12] * v.x[1] * v.x[7] -
    v.x[12] * v.x[3] * v.x[5]
    
    out.x[14] = -v.x[0]  * v.x[5] * v.x[14] +
    v.x[0]  * v.x[6] * v.x[13] +
    v.x[4]  * v.x[1] * v.x[14] -
    v.x[4]  * v.x[2] * v.x[13] -
    v.x[12] * v.x[1] * v.x[6] +
    v.x[12] * v.x[2] * v.x[5]
    
    out.x[3] = -v.x[1] * v.x[6] * v.x[11] +
    v.x[1] * v.x[7] * v.x[10] +
    v.x[5] * v.x[2] * v.x[11] -
    v.x[5] * v.x[3] * v.x[10] -
    v.x[9] * v.x[2] * v.x[7] +
    v.x[9] * v.x[3] * v.x[6]
    
    out.x[7] = v.x[0] * v.x[6] * v.x[11] -
    v.x[0] * v.x[7] * v.x[10] -
    v.x[4] * v.x[2] * v.x[11] +
    v.x[4] * v.x[3] * v.x[10] +
    v.x[8] * v.x[2] * v.x[7] -
    v.x[8] * v.x[3] * v.x[6]
    
    out.x[11] = -v.x[0] * v.x[5] * v.x[11] +
    v.x[0] * v.x[7] * v.x[9] +
    v.x[4] * v.x[1] * v.x[11] -
    v.x[4] * v.x[3] * v.x[9] -
    v.x[8] * v.x[1] * v.x[7] +
    v.x[8] * v.x[3] * v.x[5]
    
    out.x[15] = v.x[0] * v.x[5] * v.x[10] -
    v.x[0] * v.x[6] * v.x[9] -
    v.x[4] * v.x[1] * v.x[10] +
    v.x[4] * v.x[2] * v.x[9] +
    v.x[8] * v.x[1] * v.x[6] -
    v.x[8] * v.x[2] * v.x[5]
    
    det = v.x[0] * out.x[0] + v.x[1] * out.x[4] + v.x[2] * out.x[8] + v.x[3] * out.x[12]
    
    if det == 0 {
        Print('Error: Cannot inverse det = 0\n')
        return Mat4(0)
    }
    
    det = 1.0 / det
    
    for i < 16 {
        out.x[i] = out.x[i] * det
        i = i + 1
    }
    
    return out
}
