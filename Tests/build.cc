#include "build.h"
#define f0__ "/Users/Davie/Desktop/dl/Tests/Main.dl"
#define f1__ "/Users/Davie/Desktop/dl/Tests/dl/Array.dl"
#define f2__ "/Users/Davie/Desktop/dl/Tests/dl/String.dl"
#define f3__ "/Users/Davie/Desktop/dl/Tests/glfw.dl"
#define f4__ "/Users/Davie/Desktop/dl/Tests/gl.dl"
#define f5__ "/Users/Davie/Desktop/dl/Tests/Vec.dl"
#define f6__ "/Users/Davie/Desktop/dl/Tests/World.dl"
#define f7__ "/Users/Davie/Desktop/dl/Tests/Renderer.dl"
#define f8__ "/Users/Davie/Desktop/dl/Tests/Archive.dl"
#define f9__ "/Users/Davie/Desktop/dl/Tests/dl/Memory.dl"
#define f10__ "/Users/Davie/Desktop/dl/Tests/dl/Conversion.dl"
#define f11__ "/Users/Davie/Desktop/dl/Tests/dl/Math.dl"
#define f12__ "/Users/Davie/Desktop/dl/Tests/Sprite.dl"
#define f13__ "/Users/Davie/Desktop/dl/Tests/Transform.dl"
#define f14__ "/Users/Davie/Desktop/dl/Tests/Buffer.dl"
#define f15__ "/Users/Davie/Desktop/dl/Tests/Window.dl"
#define f16__ "/Users/Davie/Desktop/dl/Tests/Texture.dl"
#define f17__ "/Users/Davie/Desktop/dl/Tests/Camera.dl"
#define f18__ "/Users/Davie/Desktop/dl/Tests/Lexer.dl"
#define f19__ "/Users/Davie/Desktop/dl/Tests/Shader.dl"
#define f20__ "/Users/Davie/Desktop/dl/Tests/Quaternion.dl"
#define f21__ "/Users/Davie/Desktop/dl/Tests/dl/c.dl"
TypeInfo typeinfo0={sizeof(i64)};
TypeInfo typeinfo1={sizeof(i8)};
TypeInfo typeinfo2={sizeof(Archive)};
TypeInfo typeinfo3={sizeof(Entity)};
TypeInfo typeinfo4={sizeof(Transform)};
TypeInfo typeinfo5={sizeof(Sprite)};
TypeInfo typeinfo6={sizeof(PositionTextureColor)};
TypeInfo typeinfo7={sizeof(u16)};
TypeInfo typeinfo8={sizeof(TableNode2)};
TypeInfo typeinfo9={sizeof(f32)};
TypeInfo typeinfo10={sizeof(TableNode1)};
TypeInfo typeinfo11={sizeof(Texture)};
TypeInfo typeinfo12={sizeof(u32)};
TypeInfo typeinfo13={sizeof(ShadingPass)};
TypeInfo typeinfo14={sizeof(CameraBlock)};
TypeInfo typeinfo15={sizeof(TransformBlock)};
TypeInfo typeinfo16={sizeof(Transform)};
i64 ArchiveArray=1;
i64 ArchiveTable=2;
i64 ArchiveString=4;
i64 ArchiveNumber=3;
i64 ArchiveNone=0;
i32 LexerIdentifier=(-1);
i32 LexerNumber=(-2);
i32 LexerString=(-3);
i8 true=1;
i8 false=0;
World world={0};
u32 GL_TEXTURE_2D=3553;
u32 GL_RGBA=6408;
u32 GL_UNSIGNED_BYTE=5121;
u32 GL_TEXTURE_BASE_LEVEL=33084;
u32 GL_TEXTURE_MAX_LEVEL=33085;
u32 GL_TEXTURE_MAG_FILTER=10240;
u32 GL_LINEAR=9729;
u32 GL_TEXTURE_MIN_FILTER=10241;
u32 GL_DYNAMIC_DRAW=35048;
u32 GL_NO_ERROR=0;
u32 GL_INVALID_ENUM=1280;
u32 GL_INVALID_OPERATION=1282;
u32 GL_INVALID_VALUE=1281;
u32 GL_OUT_OF_MEMORY=1285;
u32 GL_ELEMENT_ARRAY_BUFFER=34963;
u32 GL_ARRAY_BUFFER=34962;
u32 GL_FLOAT=5126;
i8 GL_FALSE=0;
u32 GL_VERTEX_SHADER=35633;
u32 GL_COMPILE_STATUS=35713;
u32 GL_FRAGMENT_SHADER=35632;
u32 GL_LINK_STATUS=35714;
u32 GL_INVALID_INDEX=4294967295;
u32 GL_ACTIVE_UNIFORMS=35718;
u32 GL_SAMPLER_2D=35678;
i32 GLFW_CONTEXT_VERSION_MAJOR=139266;
i32 GLFW_CONTEXT_VERSION_MINOR=139267;
i32 GLFW_OPENGL_FORWARD_COMPAT=139270;
i32 GLFW_OPENGL_PROFILE=139272;
i32 GLFW_OPENGL_CORE_PROFILE=204801;
f32 PI=3.1415926535897;
u32 GL_FRAMEBUFFER=36160;
u32 GL_COLOR_ATTACHMENT0=36064;
u32 GL_FRAMEBUFFER_COMPLETE=36053;
u32 GL_ONE=1;
u32 GL_ONE_MINUS_SRC_ALPHA=771;
u32 GL_BLEND=3042;
u32 GL_COLOR_BUFFER_BIT=16384;
u32 GL_UNIFORM_BUFFER=35345;
u32 BufferInterface=GL_UNIFORM_BUFFER;
u32 GL_TEXTURE0=33984;
u32 GL_TRIANGLES=4;
u32 GL_UNSIGNED_SHORT=5123;
i32 GLFW_VERSION_MAJOR=3;
i32 GLFW_VERSION_MINOR=2;
i32 GLFW_VERSION_REVISION=0;
i32 GLFW_TRUE=1;
i32 GLFW_FALSE=0;
i32 GLFW_RELEASE=0;
i32 GLFW_PRESS=1;
i32 GLFW_REPEAT=2;
i32 GLFW_KEY_UNKNOWN=(-1);
i32 GLFW_KEY_SPACE=32;
i32 GLFW_KEY_APOSTROPHE=39;
i32 GLFW_KEY_COMMA=44;
i32 GLFW_KEY_MINUS=45;
i32 GLFW_KEY_PERIOD=46;
i32 GLFW_KEY_SLASH=47;
i32 GLFW_KEY_0=48;
i32 GLFW_KEY_1=49;
i32 GLFW_KEY_2=50;
i32 GLFW_KEY_3=51;
i32 GLFW_KEY_4=52;
i32 GLFW_KEY_5=53;
i32 GLFW_KEY_6=54;
i32 GLFW_KEY_7=55;
i32 GLFW_KEY_8=56;
i32 GLFW_KEY_9=57;
i32 GLFW_KEY_SEMICOLON=59;
i32 GLFW_KEY_EQUAL=61;
i32 GLFW_KEY_A=65;
i32 GLFW_KEY_B=66;
i32 GLFW_KEY_C=67;
i32 GLFW_KEY_D=68;
i32 GLFW_KEY_E=69;
i32 GLFW_KEY_F=70;
i32 GLFW_KEY_G=71;
i32 GLFW_KEY_H=72;
i32 GLFW_KEY_I=73;
i32 GLFW_KEY_J=74;
i32 GLFW_KEY_K=75;
i32 GLFW_KEY_L=76;
i32 GLFW_KEY_M=77;
i32 GLFW_KEY_N=78;
i32 GLFW_KEY_O=79;
i32 GLFW_KEY_P=80;
i32 GLFW_KEY_Q=81;
i32 GLFW_KEY_R=82;
i32 GLFW_KEY_S=83;
i32 GLFW_KEY_T=84;
i32 GLFW_KEY_U=85;
i32 GLFW_KEY_V=86;
i32 GLFW_KEY_W=87;
i32 GLFW_KEY_X=88;
i32 GLFW_KEY_Y=89;
i32 GLFW_KEY_Z=90;
i32 GLFW_KEY_LEFT_BRACKET=91;
i32 GLFW_KEY_BACKSLASH=92;
i32 GLFW_KEY_RIGHT_BRACKET=93;
i32 GLFW_KEY_GRAVE_ACCENT=96;
i32 GLFW_KEY_WORLD_1=161;
i32 GLFW_KEY_WORLD_2=162;
i32 GLFW_KEY_ESCAPE=256;
i32 GLFW_KEY_ENTER=257;
i32 GLFW_KEY_TAB=258;
i32 GLFW_KEY_BACKSPACE=259;
i32 GLFW_KEY_INSERT=260;
i32 GLFW_KEY_DELETE=261;
i32 GLFW_KEY_RIGHT=262;
i32 GLFW_KEY_LEFT=263;
i32 GLFW_KEY_DOWN=264;
i32 GLFW_KEY_UP=265;
i32 GLFW_KEY_PAGE_UP=266;
i32 GLFW_KEY_PAGE_DOWN=267;
i32 GLFW_KEY_HOME=268;
i32 GLFW_KEY_END=269;
i32 GLFW_KEY_CAPS_LOCK=280;
i32 GLFW_KEY_SCROLL_LOCK=281;
i32 GLFW_KEY_NUM_LOCK=282;
i32 GLFW_KEY_PRINT_SCREEN=283;
i32 GLFW_KEY_PAUSE=284;
i32 GLFW_KEY_F1=290;
i32 GLFW_KEY_F2=291;
i32 GLFW_KEY_F3=292;
i32 GLFW_KEY_F4=293;
i32 GLFW_KEY_F5=294;
i32 GLFW_KEY_F6=295;
i32 GLFW_KEY_F7=296;
i32 GLFW_KEY_F8=297;
i32 GLFW_KEY_F9=298;
i32 GLFW_KEY_F10=299;
i32 GLFW_KEY_F11=300;
i32 GLFW_KEY_F12=301;
i32 GLFW_KEY_F13=302;
i32 GLFW_KEY_F14=303;
i32 GLFW_KEY_F15=304;
i32 GLFW_KEY_F16=305;
i32 GLFW_KEY_F17=306;
i32 GLFW_KEY_F18=307;
i32 GLFW_KEY_F19=308;
i32 GLFW_KEY_F20=309;
i32 GLFW_KEY_F21=310;
i32 GLFW_KEY_F22=311;
i32 GLFW_KEY_F23=312;
i32 GLFW_KEY_F24=313;
i32 GLFW_KEY_F25=314;
i32 GLFW_KEY_KP_0=320;
i32 GLFW_KEY_KP_1=321;
i32 GLFW_KEY_KP_2=322;
i32 GLFW_KEY_KP_3=323;
i32 GLFW_KEY_KP_4=324;
i32 GLFW_KEY_KP_5=325;
i32 GLFW_KEY_KP_6=326;
i32 GLFW_KEY_KP_7=327;
i32 GLFW_KEY_KP_8=328;
i32 GLFW_KEY_KP_9=329;
i32 GLFW_KEY_KP_DECIMAL=330;
i32 GLFW_KEY_KP_DIVIDE=331;
i32 GLFW_KEY_KP_MULTIPLY=332;
i32 GLFW_KEY_KP_SUBTRACT=333;
i32 GLFW_KEY_KP_ADD=334;
i32 GLFW_KEY_KP_ENTER=335;
i32 GLFW_KEY_KP_EQUAL=336;
i32 GLFW_KEY_LEFT_SHIFT=340;
i32 GLFW_KEY_LEFT_CONTROL=341;
i32 GLFW_KEY_LEFT_ALT=342;
i32 GLFW_KEY_LEFT_SUPER=343;
i32 GLFW_KEY_RIGHT_SHIFT=344;
i32 GLFW_KEY_RIGHT_CONTROL=345;
i32 GLFW_KEY_RIGHT_ALT=346;
i32 GLFW_KEY_RIGHT_SUPER=347;
i32 GLFW_KEY_MENU=348;
i32 GLFW_KEY_LAST=GLFW_KEY_MENU;
i32 GLFW_MOD_SHIFT=1;
i32 GLFW_MOD_CONTROL=2;
i32 GLFW_MOD_ALT=4;
i32 GLFW_MOD_SUPER=8;
i32 GLFW_MOUSE_BUTTON_1=0;
i32 GLFW_MOUSE_BUTTON_2=1;
i32 GLFW_MOUSE_BUTTON_3=2;
i32 GLFW_MOUSE_BUTTON_4=3;
i32 GLFW_MOUSE_BUTTON_5=4;
i32 GLFW_MOUSE_BUTTON_6=5;
i32 GLFW_MOUSE_BUTTON_7=6;
i32 GLFW_MOUSE_BUTTON_8=7;
i32 GLFW_MOUSE_BUTTON_LAST=GLFW_MOUSE_BUTTON_8;
i32 GLFW_MOUSE_BUTTON_LEFT=GLFW_MOUSE_BUTTON_1;
i32 GLFW_MOUSE_BUTTON_RIGHT=GLFW_MOUSE_BUTTON_2;
i32 GLFW_MOUSE_BUTTON_MIDDLE=GLFW_MOUSE_BUTTON_3;
i32 GLFW_JOYSTICK_1=0;
i32 GLFW_JOYSTICK_2=1;
i32 GLFW_JOYSTICK_3=2;
i32 GLFW_JOYSTICK_4=3;
i32 GLFW_JOYSTICK_5=4;
i32 GLFW_JOYSTICK_6=5;
i32 GLFW_JOYSTICK_7=6;
i32 GLFW_JOYSTICK_8=7;
i32 GLFW_JOYSTICK_9=8;
i32 GLFW_JOYSTICK_10=9;
i32 GLFW_JOYSTICK_11=10;
i32 GLFW_JOYSTICK_12=11;
i32 GLFW_JOYSTICK_13=12;
i32 GLFW_JOYSTICK_14=13;
i32 GLFW_JOYSTICK_15=14;
i32 GLFW_JOYSTICK_16=15;
i32 GLFW_JOYSTICK_LAST=GLFW_JOYSTICK_16;
i32 GLFW_NOT_INITIALIZED=65537;
i32 GLFW_NO_CURRENT_CONTEXT=65538;
i32 GLFW_INVALID_ENUM=65539;
i32 GLFW_INVALID_VALUE=65540;
i32 GLFW_OUT_OF_MEMORY=65541;
i32 GLFW_API_UNAVAILABLE=65542;
i32 GLFW_VERSION_UNAVAILABLE=65543;
i32 GLFW_PLATFORM_ERROR=65544;
i32 GLFW_FORMAT_UNAVAILABLE=65545;
i32 GLFW_NO_WINDOW_CONTEXT=65546;
i32 GLFW_FOCUSED=131073;
i32 GLFW_ICONIFIED=131074;
i32 GLFW_RESIZABLE=131075;
i32 GLFW_VISIBLE=131076;
i32 GLFW_DECORATED=131077;
i32 GLFW_AUTO_ICONIFY=131078;
i32 GLFW_FLOATING=131079;
i32 GLFW_MAXIMIZED=131080;
i32 GLFW_RED_BITS=135169;
i32 GLFW_GREEN_BITS=135170;
i32 GLFW_BLUE_BITS=135171;
i32 GLFW_ALPHA_BITS=135172;
i32 GLFW_DEPTH_BITS=135173;
i32 GLFW_STENCIL_BITS=135174;
i32 GLFW_ACCUM_RED_BITS=135175;
i32 GLFW_ACCUM_GREEN_BITS=135176;
i32 GLFW_ACCUM_BLUE_BITS=135177;
i32 GLFW_ACCUM_ALPHA_BITS=135178;
i32 GLFW_AUX_BUFFERS=135179;
i32 GLFW_STEREO=135180;
i32 GLFW_SAMPLES=135181;
i32 GLFW_SRGB_CAPABLE=135182;
i32 GLFW_REFRESH_RATE=135183;
i32 GLFW_DOUBLEBUFFER=135184;
i32 GLFW_CLIENT_API=139265;
i32 GLFW_CONTEXT_REVISION=139268;
i32 GLFW_CONTEXT_ROBUSTNESS=139269;
i32 GLFW_OPENGL_DEBUG_CONTEXT=139271;
i32 GLFW_CONTEXT_RELEASE_BEHAVIOR=139273;
i32 GLFW_CONTEXT_NO_ERROR=139274;
i32 GLFW_CONTEXT_CREATION_API=139275;
i32 GLFW_NO_API=0;
i32 GLFW_OPENGL_API=196609;
i32 GLFW_OPENGL_ES_API=196610;
i32 GLFW_NO_ROBUSTNESS=0;
i32 GLFW_NO_RESET_NOTIFICATION=200705;
i32 GLFW_LOSE_CONTEXT_ON_RESET=200706;
i32 GLFW_OPENGL_ANY_PROFILE=0;
i32 GLFW_OPENGL_COMPAT_PROFILE=204802;
i32 GLFW_CURSOR=208897;
i32 GLFW_STICKY_KEYS=208898;
i32 GLFW_STICKY_MOUSE_BUTTONS=208899;
i32 GLFW_CURSOR_NORMAL=212993;
i32 GLFW_CURSOR_HIDDEN=212994;
i32 GLFW_CURSOR_DISABLED=212995;
i32 GLFW_ANY_RELEASE_BEHAVIOR=0;
i32 GLFW_RELEASE_BEHAVIOR_FLUSH=217089;
i32 GLFW_RELEASE_BEHAVIOR_NONE=217090;
i32 GLFW_NATIVE_CONTEXT_API=221185;
i32 GLFW_EGL_CONTEXT_API=221186;
i32 GLFW_ARROW_CURSOR=221185;
i32 GLFW_IBEAM_CURSOR=221186;
i32 GLFW_CROSSHAIR_CURSOR=221187;
i32 GLFW_HAND_CURSOR=221188;
i32 GLFW_HRESIZE_CURSOR=221189;
i32 GLFW_VRESIZE_CURSOR=221190;
i32 GLFW_CONNECTED=262145;
i32 GLFW_DISCONNECTED=262146;
i32 GLFW_DONT_CARE=(-1);
u32 GL_DEPTH_BUFFER_BIT=256;
u32 GL_STENCIL_BUFFER_BIT=1024;
i8 GL_TRUE=1;
u32 GL_POINTS=0;
u32 GL_LINES=1;
u32 GL_LINE_LOOP=2;
u32 GL_LINE_STRIP=3;
u32 GL_TRIANGLE_STRIP=5;
u32 GL_TRIANGLE_FAN=6;
u32 GL_NEVER=512;
u32 GL_LESS=513;
u32 GL_EQUAL=514;
u32 GL_LEQUAL=515;
u32 GL_GREATER=516;
u32 GL_NOTEQUAL=517;
u32 GL_GEQUAL=518;
u32 GL_ALWAYS=519;
u32 GL_ZERO=0;
u32 GL_SRC_COLOR=768;
u32 GL_ONE_MINUS_SRC_COLOR=769;
u32 GL_SRC_ALPHA=770;
u32 GL_DST_ALPHA=772;
u32 GL_ONE_MINUS_DST_ALPHA=773;
u32 GL_DST_COLOR=774;
u32 GL_ONE_MINUS_DST_COLOR=775;
u32 GL_SRC_ALPHA_SATURATE=776;
u32 GL_NONE=0;
u32 GL_FRONT_LEFT=1024;
u32 GL_FRONT_RIGHT=1025;
u32 GL_BACK_LEFT=1026;
u32 GL_BACK_RIGHT=1027;
u32 GL_FRONT=1028;
u32 GL_BACK=1029;
u32 GL_LEFT=1030;
u32 GL_RIGHT=1031;
u32 GL_FRONT_AND_BACK=1032;
u32 GL_CW=2304;
u32 GL_CCW=2305;
u32 GL_POINT_SIZE=2833;
u32 GL_POINT_SIZE_RANGE=2834;
u32 GL_POINT_SIZE_GRANULARITY=2835;
u32 GL_LINE_SMOOTH=2848;
u32 GL_LINE_WIDTH=2849;
u32 GL_LINE_WIDTH_RANGE=2850;
u32 GL_LINE_WIDTH_GRANULARITY=2851;
u32 GL_POLYGON_MODE=2880;
u32 GL_POLYGON_SMOOTH=2881;
u32 GL_CULL_FACE=2884;
u32 GL_CULL_FACE_MODE=2885;
u32 GL_FRONT_FACE=2886;
u32 GL_DEPTH_RANGE=2928;
u32 GL_DEPTH_TEST=2929;
u32 GL_DEPTH_WRITEMASK=2930;
u32 GL_DEPTH_CLEAR_VALUE=2931;
u32 GL_DEPTH_FN=2932;
u32 GL_STENCIL_TEST=2960;
u32 GL_STENCIL_CLEAR_VALUE=2961;
u32 GL_STENCIL_FN=2962;
u32 GL_STENCIL_VALUE_MASK=2963;
u32 GL_STENCIL_FAIL=2964;
u32 GL_STENCIL_PASS_DEPTH_FAIL=2965;
u32 GL_STENCIL_PASS_DEPTH_PASS=2966;
u32 GL_STENCIL_REF=2967;
u32 GL_STENCIL_WRITEMASK=2968;
u32 GL_VIEWPORT=2978;
u32 GL_DITHER=3024;
u32 GL_BLEND_DST=3040;
u32 GL_BLEND_SRC=3041;
u32 GL_LOGIC_OP_MODE=3056;
u32 GL_COLOR_LOGIC_OP=3058;
u32 GL_DRAW_BUFFER=3073;
u32 GL_READ_BUFFER=3074;
u32 GL_SCISSOR_BOX=3088;
u32 GL_SCISSOR_TEST=3089;
u32 GL_COLOR_CLEAR_VALUE=3106;
u32 GL_COLOR_WRITEMASK=3107;
u32 GL_DOUBLEBUFFER=3122;
u32 GL_STEREO=3123;
u32 GL_LINE_SMOOTH_HINT=3154;
u32 GL_POLYGON_SMOOTH_HINT=3155;
u32 GL_UNPACK_SWAP_BYTES=3312;
u32 GL_UNPACK_LSB_FIRST=3313;
u32 GL_UNPACK_ROW_LENGTH=3314;
u32 GL_UNPACK_SKIP_ROWS=3315;
u32 GL_UNPACK_SKIP_PIXELS=3316;
u32 GL_UNPACK_ALIGNMENT=3317;
u32 GL_PACK_SWAP_BYTES=3328;
u32 GL_PACK_LSB_FIRST=3329;
u32 GL_PACK_ROW_LENGTH=3330;
u32 GL_PACK_SKIP_ROWS=3331;
u32 GL_PACK_SKIP_PIXELS=3332;
u32 GL_PACK_ALIGNMENT=3333;
u32 GL_MAX_TEXTURE_SIZE=3379;
u32 GL_MAX_VIEWPORT_DIMS=3386;
u32 GL_SUBPIXEL_BITS=3408;
u32 GL_TEXTURE_1D=3552;
u32 GL_POLYGON_OFFSET_UNITS=10752;
u32 GL_POLYGON_OFFSET_POINT=10753;
u32 GL_POLYGON_OFFSET_LINE=10754;
u32 GL_POLYGON_OFFSET_FILL=32823;
u32 GL_POLYGON_OFFSET_FACTOR=32824;
u32 GL_TEXTURE_BINDING_1D=32872;
u32 GL_TEXTURE_BINDING_2D=32873;
u32 GL_TEXTURE_WIDTH=4096;
u32 GL_TEXTURE_HEIGHT=4097;
u32 GL_TEXTURE_INTERNAL_FORMAT=4099;
u32 GL_TEXTURE_BORDER_COLOR=4100;
u32 GL_TEXTURE_RED_SIZE=32860;
u32 GL_TEXTURE_GREEN_SIZE=32861;
u32 GL_TEXTURE_BLUE_SIZE=32862;
u32 GL_TEXTURE_ALPHA_SIZE=32863;
u32 GL_DONT_CARE=4352;
u32 GL_FASTEST=4353;
u32 GL_NICEST=4354;
u32 GL_BYTE=5120;
u32 GL_FLOAT16=5122;
u32 GL_INT=5124;
u32 GL_UNSIGNED_INT=5125;
u32 GL_DOUBLE=5130;
u32 GL_CLEAR=5376;
u32 GL_AND=5377;
u32 GL_AND_REVERSE=5378;
u32 GL_COPY=5379;
u32 GL_AND_INVERTED=5380;
u32 GL_NOOP=5381;
u32 GL_XOR=5382;
u32 GL_OR=5383;
u32 GL_NOR=5384;
u32 GL_EQUIV=5385;
u32 GL_INVERT=5386;
u32 GL_OR_REVERSE=5387;
u32 GL_COPY_INVERTED=5388;
u32 GL_OR_INVERTED=5389;
u32 GL_NAND=5390;
u32 GL_SET=5391;
u32 GL_TEXTURE=5890;
u32 GL_COLOR=6144;
u32 GL_DEPTH=6145;
u32 GL_STENCIL=6146;
u32 GL_STENCIL_INDEX=6401;
u32 GL_DEPTH_COMPONENT=6402;
u32 GL_RED=6403;
u32 GL_GREEN=6404;
u32 GL_BLUE=6405;
u32 GL_ALPHA=6406;
u32 GL_RGB=6407;
u32 GL_POINT=6912;
u32 GL_LINE=6913;
u32 GL_FILL=6914;
u32 GL_KEEP=7680;
u32 GL_REPLACE=7681;
u32 GL_INCR=7682;
u32 GL_DECR=7683;
u32 GL_VENDOR=7936;
u32 GL_RENDERER=7937;
u32 GL_VERSION=7938;
u32 GL_EXTENSIONS=7939;
u32 GL_NEAREST=9728;
u32 GL_NEAREST_MIPMAP_NEAREST=9984;
u32 GL_LINEAR_MIPMAP_NEAREST=9985;
u32 GL_NEAREST_MIPMAP_LINEAR=9986;
u32 GL_LINEAR_MIPMAP_LINEAR=9987;
u32 GL_TEXTURE_WRAP_S=10242;
u32 GL_TEXTURE_WRAP_T=10243;
u32 GL_PROXY_TEXTURE_1D=32867;
u32 GL_PROXY_TEXTURE_2D=32868;
u32 GL_REPEAT=10497;
u32 GL_R3_G3_B2=10768;
u32 GL_RGB4=32847;
u32 GL_RGB5=32848;
u32 GL_RGB8=32849;
u32 GL_RGB10=32850;
u32 GL_RGB12=32851;
u32 GL_RGB16=32852;
u32 GL_RGBA2=32853;
u32 GL_RGBA4=32854;
u32 GL_RGB5_A1=32855;
u32 GL_RGBA8=32856;
u32 GL_RGB10_A2=32857;
u32 GL_RGBA12=32858;
u32 GL_RGBA16=32859;
u32 GL_UNSIGNED_BYTE_3_3_2=32818;
u32 GL_UNSIGNED_i16_4_4_4_4=32819;
u32 GL_UNSIGNED_i16_5_5_5_1=32820;
u32 GL_UNSIGNED_INT_8_8_8_8=32821;
u32 GL_UNSIGNED_INT_10_10_10_2=32822;
u32 GL_TEXTURE_BINDING_3D=32874;
u32 GL_PACK_SKIP_IMAGES=32875;
u32 GL_PACK_IMAGE_HEIGHT=32876;
u32 GL_UNPACK_SKIP_IMAGES=32877;
u32 GL_UNPACK_IMAGE_HEIGHT=32878;
u32 GL_TEXTURE_3D=32879;
u32 GL_PROXY_TEXTURE_3D=32880;
u32 GL_TEXTURE_DEPTH=32881;
u32 GL_TEXTURE_WRAP_R=32882;
u32 GL_MAX_3D_TEXTURE_SIZE=32883;
u32 GL_UNSIGNED_BYTE_2_3_3_REV=33634;
u32 GL_UNSIGNED_i16_5_6_5=33635;
u32 GL_UNSIGNED_i16_5_6_5_REV=33636;
u32 GL_UNSIGNED_i16_4_4_4_4_REV=33637;
u32 GL_UNSIGNED_i16_1_5_5_5_REV=33638;
u32 GL_UNSIGNED_INT_8_8_8_8_REV=33639;
u32 GL_UNSIGNED_INT_2_10_10_10_REV=33640;
u32 GL_BGR=32992;
u32 GL_BGRA=32993;
u32 GL_MAX_ELEMENTS_VERTICES=33000;
u32 GL_MAX_ELEMENTS_INDICES=33001;
u32 GL_CLAMP_TO_EDGE=33071;
u32 GL_TEXTURE_MIN_LOD=33082;
u32 GL_TEXTURE_MAX_LOD=33083;
u32 GL_SMOOTH_POINT_SIZE_RANGE=2834;
u32 GL_SMOOTH_POINT_SIZE_GRANULARITY=2835;
u32 GL_SMOOTH_LINE_WIDTH_RANGE=2850;
u32 GL_SMOOTH_LINE_WIDTH_GRANULARITY=2851;
u32 GL_ALIASED_LINE_WIDTH_RANGE=33902;
u32 GL_CONSTANT_COLOR=32769;
u32 GL_ONE_MINUS_CONSTANT_COLOR=32770;
u32 GL_CONSTANT_ALPHA=32771;
u32 GL_ONE_MINUS_CONSTANT_ALPHA=32772;
u32 GL_BLEND_COLOR=32773;
u32 GL_FN_ADD=32774;
u32 GL_MIN=32775;
u32 GL_MAX=32776;
u32 GL_BLEND_EQUATION=32777;
u32 GL_FN_SUBTRACT=32778;
u32 GL_FN_REVERSE_SUBTRACT=32779;
u32 GL_TEXTURE1=33985;
u32 GL_TEXTURE2=33986;
u32 GL_TEXTURE3=33987;
u32 GL_TEXTURE4=33988;
u32 GL_TEXTURE5=33989;
u32 GL_TEXTURE6=33990;
u32 GL_TEXTURE7=33991;
u32 GL_TEXTURE8=33992;
u32 GL_TEXTURE9=33993;
u32 GL_TEXTURE10=33994;
u32 GL_TEXTURE11=33995;
u32 GL_TEXTURE12=33996;
u32 GL_TEXTURE13=33997;
u32 GL_TEXTURE14=33998;
u32 GL_TEXTURE15=33999;
u32 GL_TEXTURE16=34000;
u32 GL_TEXTURE17=34001;
u32 GL_TEXTURE18=34002;
u32 GL_TEXTURE19=34003;
u32 GL_TEXTURE20=34004;
u32 GL_TEXTURE21=34005;
u32 GL_TEXTURE22=34006;
u32 GL_TEXTURE23=34007;
u32 GL_TEXTURE24=34008;
u32 GL_TEXTURE25=34009;
u32 GL_TEXTURE26=34010;
u32 GL_TEXTURE27=34011;
u32 GL_TEXTURE28=34012;
u32 GL_TEXTURE29=34013;
u32 GL_TEXTURE30=34014;
u32 GL_TEXTURE31=34015;
u32 GL_ACTIVE_TEXTURE=34016;
u32 GL_MULTISAMPLE=32925;
u32 GL_SAMPLE_ALPHA_TO_COVERAGE=32926;
u32 GL_SAMPLE_ALPHA_TO_ONE=32927;
u32 GL_SAMPLE_COVERAGE=32928;
u32 GL_SAMPLE_BUFFERS=32936;
u32 GL_SAMPLES=32937;
u32 GL_SAMPLE_COVERAGE_VALUE=32938;
u32 GL_SAMPLE_COVERAGE_INVERT=32939;
u32 GL_TEXTURE_CUBE_MAP=34067;
u32 GL_TEXTURE_BINDING_CUBE_MAP=34068;
u32 GL_TEXTURE_CUBE_MAP_POSITIVE_X=34069;
u32 GL_TEXTURE_CUBE_MAP_NEGATIVE_X=34070;
u32 GL_TEXTURE_CUBE_MAP_POSITIVE_Y=34071;
u32 GL_TEXTURE_CUBE_MAP_NEGATIVE_Y=34072;
u32 GL_TEXTURE_CUBE_MAP_POSITIVE_Z=34073;
u32 GL_TEXTURE_CUBE_MAP_NEGATIVE_Z=34074;
u32 GL_PROXY_TEXTURE_CUBE_MAP=34075;
u32 GL_MAX_CUBE_MAP_TEXTURE_SIZE=34076;
u32 GL_COMPRESSED_RGB=34029;
u32 GL_COMPRESSED_RGBA=34030;
u32 GL_TEXTURE_COMPRESSION_HINT=34031;
u32 GL_TEXTURE_COMPRESSED_IMAGE_SIZE=34464;
u32 GL_TEXTURE_COMPRESSED=34465;
u32 GL_NUM_COMPRESSED_TEXTURE_FORMATS=34466;
u32 GL_COMPRESSED_TEXTURE_FORMATS=34467;
u32 GL_CLAMP_TO_BORDER=33069;
u32 GL_BLEND_DST_RGB=32968;
u32 GL_BLEND_SRC_RGB=32969;
u32 GL_BLEND_DST_ALPHA=32970;
u32 GL_BLEND_SRC_ALPHA=32971;
u32 GL_POINT_FADE_THRESHOLD_SIZE=33064;
u32 GL_DEPTH_COMPONENT16=33189;
u32 GL_DEPTH_COMPONENT24=33190;
u32 GL_DEPTH_COMPONENT32=33191;
u32 GL_MIRRORED_REPEAT=33648;
u32 GL_MAX_TEXTURE_LOD_BIAS=34045;
u32 GL_TEXTURE_LOD_BIAS=34049;
u32 GL_INCR_WRAP=34055;
u32 GL_DECR_WRAP=34056;
u32 GL_TEXTURE_DEPTH_SIZE=34890;
u32 GL_TEXTURE_COMPARE_MODE=34892;
u32 GL_TEXTURE_COMPARE_FUNC=34893;
u32 GL_BUFFER_SIZE=34660;
u32 GL_BUFFER_USAGE=34661;
u32 GL_QUERY_COUNTER_BITS=34916;
u32 GL_CURRENT_QUERY=34917;
u32 GL_QUERY_RESULT=34918;
u32 GL_QUERY_RESULT_AVAILABLE=34919;
u32 GL_ARRAY_BUFFER_BINDING=34964;
u32 GL_ELEMENT_ARRAY_BUFFER_BINDING=34965;
u32 GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING=34975;
u32 GL_READ_ONLY=35000;
u32 GL_WRITE_ONLY=35001;
u32 GL_READ_WRITE=35002;
u32 GL_BUFFER_ACCESS=35003;
u32 GL_BUFFER_MAPPED=35004;
u32 GL_BUFFER_MAP_POINTER=35005;
u32 GL_STREAM_DRAW=35040;
u32 GL_STREAM_READ=35041;
u32 GL_STREAM_COPY=35042;
u32 GL_STATIC_DRAW=35044;
u32 GL_STATIC_READ=35045;
u32 GL_STATIC_COPY=35046;
u32 GL_DYNAMIC_READ=35049;
u32 GL_DYNAMIC_COPY=35050;
u32 GL_SAMPLES_PASSED=35092;
u32 GL_BLEND_EQUATION_RGB=32777;
u32 GL_VERTEX_ATTRIB_ARRAY_ENABLED=34338;
u32 GL_VERTEX_ATTRIB_ARRAY_SIZE=34339;
u32 GL_VERTEX_ATTRIB_ARRAY_STRIDE=34340;
u32 GL_VERTEX_ATTRIB_ARRAY_TYPE=34341;
u32 GL_CURRENT_VERTEX_ATTRIB=34342;
u32 GL_VERTEX_PROGRAM_POINT_SIZE=34370;
u32 GL_VERTEX_ATTRIB_ARRAY_POINTER=34373;
u32 GL_STENCIL_BACK_FUNC=34816;
u32 GL_STENCIL_BACK_FAIL=34817;
u32 GL_STENCIL_BACK_PASS_DEPTH_FAIL=34818;
u32 GL_STENCIL_BACK_PASS_DEPTH_PASS=34819;
u32 GL_MAX_DRAW_BUFFERS=34852;
u32 GL_DRAW_BUFFER0=34853;
u32 GL_DRAW_BUFFER1=34854;
u32 GL_DRAW_BUFFER2=34855;
u32 GL_DRAW_BUFFER3=34856;
u32 GL_DRAW_BUFFER4=34857;
u32 GL_DRAW_BUFFER5=34858;
u32 GL_DRAW_BUFFER6=34859;
u32 GL_DRAW_BUFFER7=34860;
u32 GL_DRAW_BUFFER8=34861;
u32 GL_DRAW_BUFFER9=34862;
u32 GL_DRAW_BUFFER10=34863;
u32 GL_DRAW_BUFFER11=34864;
u32 GL_DRAW_BUFFER12=34865;
u32 GL_DRAW_BUFFER13=34866;
u32 GL_DRAW_BUFFER14=34867;
u32 GL_DRAW_BUFFER15=34868;
u32 GL_BLEND_EQUATION_ALPHA=34877;
u32 GL_MAX_VERTEX_ATTRIBS=34921;
u32 GL_VERTEX_ATTRIB_ARRAY_NORMALIZED=34922;
u32 GL_MAX_TEXTURE_IMAGE_UNITS=34930;
u32 GL_MAX_FRAGMENT_UNIFORM_COMPONENTS=35657;
u32 GL_MAX_VERTEX_UNIFORM_COMPONENTS=35658;
u32 GL_MAX_VARYING_FLOATS=35659;
u32 GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS=35660;
u32 GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS=35661;
u32 GL_SHADER_TYPE=35663;
u32 GL_FLOAT_VEC2=35664;
u32 GL_FLOAT_VEC3=35665;
u32 GL_FLOAT_VEC4=35666;
u32 GL_INT_VEC2=35667;
u32 GL_INT_VEC3=35668;
u32 GL_INT_VEC4=35669;
u32 GL_BOOL=35670;
u32 GL_BOOL_VEC2=35671;
u32 GL_BOOL_VEC3=35672;
u32 GL_BOOL_VEC4=35673;
u32 GL_FLOAT_MAT2=35674;
u32 GL_FLOAT_MAT3=35675;
u32 GL_FLOAT_MAT4=35676;
u32 GL_SAMPLER_1D=35677;
u32 GL_SAMPLER_3D=35679;
u32 GL_SAMPLER_CUBE=35680;
u32 GL_SAMPLER_1D_SHADOW=35681;
u32 GL_SAMPLER_2D_SHADOW=35682;
u32 GL_DELETE_STATUS=35712;
u32 GL_VALIDATE_STATUS=35715;
u32 GL_INFO_LOG_LENGTH=35716;
u32 GL_ATTACHED_SHADERS=35717;
u32 GL_ACTIVE_UNIFORM_MAX_LENGTH=35719;
u32 GL_SHADER_SOURCE_LENGTH=35720;
u32 GL_ACTIVE_ATTRIBUTES=35721;
u32 GL_ACTIVE_ATTRIBUTE_MAX_LENGTH=35722;
u32 GL_FRAGMENT_SHADER_DERIVATIVE_HINT=35723;
u32 GL_SHADING_LANGUAGE_VERSION=35724;
u32 GL_CURRENT_PROGRAM=35725;
u32 GL_POINT_SPRITE_COORD_ORIGIN=36000;
u32 GL_LOWER_LEFT=36001;
u32 GL_UPPER_LEFT=36002;
u32 GL_STENCIL_BACK_REF=36003;
u32 GL_STENCIL_BACK_VALUE_MASK=36004;
u32 GL_STENCIL_BACK_WRITEMASK=36005;
u32 GL_PIXEL_PACK_BUFFER=35051;
u32 GL_PIXEL_UNPACK_BUFFER=35052;
u32 GL_PIXEL_PACK_BUFFER_BINDING=35053;
u32 GL_PIXEL_UNPACK_BUFFER_BINDING=35055;
u32 GL_FLOAT_MAT2x3=35685;
u32 GL_FLOAT_MAT2x4=35686;
u32 GL_FLOAT_MAT3x2=35687;
u32 GL_FLOAT_MAT3x4=35688;
u32 GL_FLOAT_MAT4x2=35689;
u32 GL_FLOAT_MAT4x3=35690;
u32 GL_SRGB=35904;
u32 GL_SRGB8=35905;
u32 GL_SRGB_ALPHA=35906;
u32 GL_SRGB8_ALPHA8=35907;
u32 GL_COMPRESSED_SRGB=35912;
u32 GL_COMPRESSED_SRGB_ALPHA=35913;
u32 GL_COMPARE_REF_TO_TEXTURE=34894;
u32 GL_CLIP_DISTANCE0=12288;
u32 GL_CLIP_DISTANCE1=12289;
u32 GL_CLIP_DISTANCE2=12290;
u32 GL_CLIP_DISTANCE3=12291;
u32 GL_CLIP_DISTANCE4=12292;
u32 GL_CLIP_DISTANCE5=12293;
u32 GL_CLIP_DISTANCE6=12294;
u32 GL_CLIP_DISTANCE7=12295;
u32 GL_MAX_CLIP_DISTANCES=3378;
u32 GL_MAJOR_VERSION=33307;
u32 GL_MINOR_VERSION=33308;
u32 GL_NUM_EXTENSIONS=33309;
u32 GL_CONTEXT_FLAGS=33310;
u32 GL_COMPRESSED_RED=33317;
u32 GL_COMPRESSED_RG=33318;
u32 GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT=1;
u32 GL_RGBA32F=34836;
u32 GL_RGB32F=34837;
u32 GL_RGBA16F=34842;
u32 GL_RGB16F=34843;
u32 GL_VERTEX_ATTRIB_ARRAY_INTEGER=35069;
u32 GL_MAX_ARRAY_TEXTURE_LAYERS=35071;
u32 GL_MIN_PROGRAM_TEXEL_OFFSET=35076;
u32 GL_MAX_PROGRAM_TEXEL_OFFSET=35077;
u32 GL_CLAMP_READ_COLOR=35100;
u32 GL_FIXED_ONLY=35101;
u32 GL_MAX_VARYING_COMPONENTS=35659;
u32 GL_TEXTURE_1D_ARRAY=35864;
u32 GL_PROXY_TEXTURE_1D_ARRAY=35865;
u32 GL_TEXTURE_2D_ARRAY=35866;
u32 GL_PROXY_TEXTURE_2D_ARRAY=35867;
u32 GL_TEXTURE_BINDING_1D_ARRAY=35868;
u32 GL_TEXTURE_BINDING_2D_ARRAY=35869;
u32 GL_R11F_G11F_B10F=35898;
u32 GL_UNSIGNED_INT_10F_11F_11F_REV=35899;
u32 GL_RGB9_E5=35901;
u32 GL_UNSIGNED_INT_5_9_9_9_REV=35902;
u32 GL_TEXTURE_SHARED_SIZE=35903;
u32 GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH=35958;
u32 GL_TRANSFORM_FEEDBACK_BUFFER_MODE=35967;
u32 GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS=35968;
u32 GL_TRANSFORM_FEEDBACK_VARYINGS=35971;
u32 GL_TRANSFORM_FEEDBACK_BUFFER_START=35972;
u32 GL_TRANSFORM_FEEDBACK_BUFFER_SIZE=35973;
u32 GL_PRIMITIVES_GENERATED=35975;
u32 GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN=35976;
u32 GL_RASTERIZER_DISCARD=35977;
u32 GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS=35978;
u32 GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS=35979;
u32 GL_INTERLEAVED_ATTRIBS=35980;
u32 GL_SEPARATE_ATTRIBS=35981;
u32 GL_TRANSFORM_FEEDBACK_BUFFER=35982;
u32 GL_TRANSFORM_FEEDBACK_BUFFER_BINDING=35983;
u32 GL_RGBA32UI=36208;
u32 GL_RGB32UI=36209;
u32 GL_RGBA16UI=36214;
u32 GL_RGB16UI=36215;
u32 GL_RGBA8UI=36220;
u32 GL_RGB8UI=36221;
u32 GL_RGBA32I=36226;
u32 GL_RGB32I=36227;
u32 GL_RGBA16I=36232;
u32 GL_RGB16I=36233;
u32 GL_RGBA8I=36238;
u32 GL_RGB8I=36239;
u32 GL_RED_INTEGER=36244;
u32 GL_GREEN_INTEGER=36245;
u32 GL_BLUE_INTEGER=36246;
u32 GL_RGB_INTEGER=36248;
u32 GL_RGBA_INTEGER=36249;
u32 GL_BGR_INTEGER=36250;
u32 GL_BGRA_INTEGER=36251;
u32 GL_SAMPLER_1D_ARRAY=36288;
u32 GL_SAMPLER_2D_ARRAY=36289;
u32 GL_SAMPLER_1D_ARRAY_SHADOW=36291;
u32 GL_SAMPLER_2D_ARRAY_SHADOW=36292;
u32 GL_SAMPLER_CUBE_SHADOW=36293;
u32 GL_UNSIGNED_INT_VEC2=36294;
u32 GL_UNSIGNED_INT_VEC3=36295;
u32 GL_UNSIGNED_INT_VEC4=36296;
u32 GL_INT_SAMPLER_1D=36297;
u32 GL_INT_SAMPLER_2D=36298;
u32 GL_INT_SAMPLER_3D=36299;
u32 GL_INT_SAMPLER_CUBE=36300;
u32 GL_INT_SAMPLER_1D_ARRAY=36302;
u32 GL_INT_SAMPLER_2D_ARRAY=36303;
u32 GL_UNSIGNED_INT_SAMPLER_1D=36305;
u32 GL_UNSIGNED_INT_SAMPLER_2D=36306;
u32 GL_UNSIGNED_INT_SAMPLER_3D=36307;
u32 GL_UNSIGNED_INT_SAMPLER_CUBE=36308;
u32 GL_UNSIGNED_INT_SAMPLER_1D_ARRAY=36310;
u32 GL_UNSIGNED_INT_SAMPLER_2D_ARRAY=36311;
u32 GL_QUERY_WAIT=36371;
u32 GL_QUERY_NO_WAIT=36372;
u32 GL_QUERY_BY_REGION_WAIT=36373;
u32 GL_QUERY_BY_REGION_NO_WAIT=36374;
u32 GL_BUFFER_ACCESS_FLAGS=37151;
u32 GL_BUFFER_MAP_LENGTH=37152;
u32 GL_BUFFER_MAP_OFFSET=37153;
u32 GL_SAMPLER_2D_RECT=35683;
u32 GL_SAMPLER_2D_RECT_SHADOW=35684;
u32 GL_SAMPLER_BUFFER=36290;
u32 GL_INT_SAMPLER_2D_RECT=36301;
u32 GL_INT_SAMPLER_BUFFER=36304;
u32 GL_UNSIGNED_INT_SAMPLER_2D_RECT=36309;
u32 GL_UNSIGNED_INT_SAMPLER_BUFFER=36312;
u32 GL_TEXTURE_BUFFER=35882;
u32 GL_MAX_TEXTURE_BUFFER_SIZE=35883;
u32 GL_TEXTURE_BINDING_BUFFER=35884;
u32 GL_TEXTURE_BUFFER_DATA_STORE_BINDING=35885;
u32 GL_TEXTURE_RECTANGLE=34037;
u32 GL_TEXTURE_BINDING_RECTANGLE=34038;
u32 GL_PROXY_TEXTURE_RECTANGLE=34039;
u32 GL_MAX_RECTANGLE_TEXTURE_SIZE=34040;
u32 GL_R8_SNORM=36756;
u32 GL_RG8_SNORM=36757;
u32 GL_RGB8_SNORM=36758;
u32 GL_RGBA8_SNORM=36759;
u32 GL_R16_SNORM=36760;
u32 GL_RG16_SNORM=36761;
u32 GL_RGB16_SNORM=36762;
u32 GL_RGBA16_SNORM=36763;
u32 GL_SIGNED_NORMALIZED=36764;
u32 GL_PRIMITIVE_RESTART=36765;
u32 GL_PRIMITIVE_RESTART_INDEX=36766;
u32 GL_CONTEXT_CORE_PROFILE_BIT=1;
u32 GL_CONTEXT_COMPATIBILITY_PROFILE_BIT=2;
u32 GL_LINES_ADJACENCY=10;
u32 GL_LINE_STRIP_ADJACENCY=11;
u32 GL_TRIANGLES_ADJACENCY=12;
u32 GL_TRIANGLE_STRIP_ADJACENCY=13;
u32 GL_PROGRAM_POINT_SIZE=34370;
u32 GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS=35881;
u32 GL_FRAMEBUFFER_ATTACHMENT_LAYERED=36263;
u32 GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS=36264;
u32 GL_GEOMETRY_SHADER=36313;
u32 GL_GEOMETRY_VERTICES_OUT=35094;
u32 GL_GEOMETRY_INPUT_TYPE=35095;
u32 GL_GEOMETRY_OUTPUT_TYPE=35096;
u32 GL_MAX_GEOMETRY_UNIFORM_COMPONENTS=36319;
u32 GL_MAX_GEOMETRY_OUTPUT_VERTICES=36320;
u32 GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS=36321;
u32 GL_MAX_VERTEX_OUTPUT_COMPONENTS=37154;
u32 GL_MAX_GEOMETRY_INPUT_COMPONENTS=37155;
u32 GL_MAX_GEOMETRY_OUTPUT_COMPONENTS=37156;
u32 GL_MAX_FRAGMENT_INPUT_COMPONENTS=37157;
u32 GL_CONTEXT_PROFILE_MASK=37158;
u32 GL_VERTEX_ATTRIB_ARRAY_DIVISOR=35070;
u32 GL_SAMPLE_SHADING=35894;
u32 GL_MIN_SAMPLE_SHADING_VALUE=35895;
u32 GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET=36446;
u32 GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET=36447;
u32 GL_TEXTURE_CUBE_MAP_ARRAY=36873;
u32 GL_TEXTURE_BINDING_CUBE_MAP_ARRAY=36874;
u32 GL_PROXY_TEXTURE_CUBE_MAP_ARRAY=36875;
u32 GL_SAMPLER_CUBE_MAP_ARRAY=36876;
u32 GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW=36877;
u32 GL_INT_SAMPLER_CUBE_MAP_ARRAY=36878;
u32 GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY=36879;
u32 GL_DEPTH_COMPONENT32F=36012;
u32 GL_DEPTH32F_STENCIL8=36013;
u32 GL_FLOAT_32_UNSIGNED_INT_24_8_REV=36269;
u32 GL_INVALID_FRAMEBUFFER_OPERATION=1286;
u32 GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING=33296;
u32 GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE=33297;
u32 GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE=33298;
u32 GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE=33299;
u32 GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE=33300;
u32 GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE=33301;
u32 GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE=33302;
u32 GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE=33303;
u32 GL_FRAMEBUFFER_DEFAULT=33304;
u32 GL_FRAMEBUFFER_UNDEFINED=33305;
u32 GL_DEPTH_STENCIL_ATTACHMENT=33306;
u32 GL_MAX_RENDERBUFFER_SIZE=34024;
u32 GL_DEPTH_STENCIL=34041;
u32 GL_UNSIGNED_INT_24_8=34042;
u32 GL_DEPTH24_STENCIL8=35056;
u32 GL_TEXTURE_STENCIL_SIZE=35057;
u32 GL_TEXTURE_RED_TYPE=35856;
u32 GL_TEXTURE_GREEN_TYPE=35857;
u32 GL_TEXTURE_BLUE_TYPE=35858;
u32 GL_TEXTURE_ALPHA_TYPE=35859;
u32 GL_TEXTURE_DEPTH_TYPE=35862;
u32 GL_UNSIGNED_NORMALIZED=35863;
u32 GL_FRAMEBUFFER_BINDING=36006;
u32 GL_DRAW_FRAMEBUFFER_BINDING=36006;
u32 GL_RENDERBUFFER_BINDING=36007;
u32 GL_READ_FRAMEBUFFER=36008;
u32 GL_DRAW_FRAMEBUFFER=36009;
u32 GL_READ_FRAMEBUFFER_BINDING=36010;
u32 GL_RENDERBUFFER_SAMPLES=36011;
u32 GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE=36048;
u32 GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME=36049;
u32 GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL=36050;
u32 GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE=36051;
u32 GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER=36052;
u32 GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT=36054;
u32 GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT=36055;
u32 GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER=36059;
u32 GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER=36060;
u32 GL_FRAMEBUFFER_UNSUPPORTED=36061;
u32 GL_MAX_COLOR_ATTACHMENTS=36063;
u32 GL_COLOR_ATTACHMENT1=36065;
u32 GL_COLOR_ATTACHMENT2=36066;
u32 GL_COLOR_ATTACHMENT3=36067;
u32 GL_COLOR_ATTACHMENT4=36068;
u32 GL_COLOR_ATTACHMENT5=36069;
u32 GL_COLOR_ATTACHMENT6=36070;
u32 GL_COLOR_ATTACHMENT7=36071;
u32 GL_COLOR_ATTACHMENT8=36072;
u32 GL_COLOR_ATTACHMENT9=36073;
u32 GL_COLOR_ATTACHMENT10=36074;
u32 GL_COLOR_ATTACHMENT11=36075;
u32 GL_COLOR_ATTACHMENT12=36076;
u32 GL_COLOR_ATTACHMENT13=36077;
u32 GL_COLOR_ATTACHMENT14=36078;
u32 GL_COLOR_ATTACHMENT15=36079;
u32 GL_DEPTH_ATTACHMENT=36096;
u32 GL_STENCIL_ATTACHMENT=36128;
u32 GL_RENDERBUFFER=36161;
u32 GL_RENDERBUFFER_WIDTH=36162;
u32 GL_RENDERBUFFER_HEIGHT=36163;
u32 GL_RENDERBUFFER_INTERNAL_FORMAT=36164;
u32 GL_STENCIL_INDEX1=36166;
u32 GL_STENCIL_INDEX4=36167;
u32 GL_STENCIL_INDEX8=36168;
u32 GL_STENCIL_INDEX16=36169;
u32 GL_RENDERBUFFER_RED_SIZE=36176;
u32 GL_RENDERBUFFER_GREEN_SIZE=36177;
u32 GL_RENDERBUFFER_BLUE_SIZE=36178;
u32 GL_RENDERBUFFER_ALPHA_SIZE=36179;
u32 GL_RENDERBUFFER_DEPTH_SIZE=36180;
u32 GL_RENDERBUFFER_STENCIL_SIZE=36181;
u32 GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE=36182;
u32 GL_MAX_SAMPLES=36183;
u32 GL_FRAMEBUFFER_SRGB=36281;
u32 GL_HALF_F32=5131;
u32 GL_MAP_READ_BIT=1;
u32 GL_MAP_WRITE_BIT=2;
u32 GL_MAP_INVALIDATE_RANGE_BIT=4;
u32 GL_MAP_INVALIDATE_BUFFER_BIT=8;
u32 GL_MAP_FLUSH_EXPLICIT_BIT=16;
u32 GL_MAP_UNSYNCHRONIZED_BIT=32;
u32 GL_COMPRESSED_RED_RGTC1=36283;
u32 GL_COMPRESSED_SIGNED_RED_RGTC1=36284;
u32 GL_COMPRESSED_RG_RGTC2=36285;
u32 GL_COMPRESSED_SIGNED_RG_RGTC2=36286;
u32 GL_RG=33319;
u32 GL_RG_INTEGER=33320;
u32 GL_R8=33321;
u32 GL_R16=33322;
u32 GL_RG8=33323;
u32 GL_RG16=33324;
u32 GL_R16F=33325;
u32 GL_R32F=33326;
u32 GL_RG16F=33327;
u32 GL_RG32F=33328;
u32 GL_R8I=33329;
u32 GL_R8UI=33330;
u32 GL_R16I=33331;
u32 GL_R16UI=33332;
u32 GL_R32I=33333;
u32 GL_R32UI=33334;
u32 GL_RG8I=33335;
u32 GL_RG8UI=33336;
u32 GL_RG16I=33337;
u32 GL_RG16UI=33338;
u32 GL_RG32I=33339;
u32 GL_RG32UI=33340;
u32 GL_VERTEX_ARRAY_BINDING=34229;
u32 GL_UNIFORM_BUFFER_BINDING=35368;
u32 GL_UNIFORM_BUFFER_START=35369;
u32 GL_UNIFORM_BUFFER_SIZE=35370;
u32 GL_MAX_VERTEX_UNIFORM_BLOCKS=35371;
u32 GL_MAX_GEOMETRY_UNIFORM_BLOCKS=35372;
u32 GL_MAX_FRAGMENT_UNIFORM_BLOCKS=35373;
u32 GL_MAX_COMBINED_UNIFORM_BLOCKS=35374;
u32 GL_MAX_UNIFORM_BUFFER_BINDINGS=35375;
u32 GL_MAX_UNIFORM_BLOCK_SIZE=35376;
u32 GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS=35377;
u32 GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS=35378;
u32 GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS=35379;
u32 GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT=35380;
u32 GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH=35381;
u32 GL_ACTIVE_UNIFORM_BLOCKS=35382;
u32 GL_UNIFORM_TYPE=35383;
u32 GL_UNIFORM_SIZE=35384;
u32 GL_UNIFORM_NAME_LENGTH=35385;
u32 GL_UNIFORM_BLOCK_INDEX=35386;
u32 GL_UNIFORM_OFFSET=35387;
u32 GL_UNIFORM_ARRAY_STRIDE=35388;
u32 GL_UNIFORM_MATRIX_STRIDE=35389;
u32 GL_UNIFORM_IS_ROW_MAJOR=35390;
u32 GL_UNIFORM_BLOCK_BINDING=35391;
u32 GL_UNIFORM_BLOCK_DATA_SIZE=35392;
u32 GL_UNIFORM_BLOCK_NAME_LENGTH=35393;
u32 GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS=35394;
u32 GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES=35395;
u32 GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER=35396;
u32 GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER=35397;
u32 GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER=35398;
u32 GL_COPY_READ_BUFFER=36662;
u32 GL_COPY_WRITE_BUFFER=36663;
u32 GL_DEPTH_CLAMP=34383;
u32 GL_FIRST_VERTEX_CONVENTION=36429;
u32 GL_LAST_VERTEX_CONVENTION=36430;
u32 GL_PROVOKING_VERTEX=36431;
u32 GL_TEXTURE_CUBE_MAP_SEAMLESS=34895;
u32 GL_MAX_SERVER_WAIT_TIMEOUT=37137;
u32 GL_OBJECT_TYPE=37138;
u32 GL_SYNC_CONDITION=37139;
u32 GL_SYNC_STATUS=37140;
u32 GL_SYNC_FLAGS=37141;
u32 GL_SYNC_FENCE=37142;
u32 GL_SYNC_GPU_COMMANDS_COMPLETE=37143;
u32 GL_UNSIGNALED=37144;
u32 GL_SIGNALED=37145;
u32 GL_ALREADY_SIGNALED=37146;
u32 GL_TIMEOUT_EXPIRED=37147;
u32 GL_CONDITION_SATISFIED=37148;
u32 GL_WAIT_FAILED=37149;
u32 GL_SYNC_FLUSH_COMMANDS_BIT=1;
u32 GL_SAMPLE_POSITION=36432;
u32 GL_SAMPLE_MASK=36433;
u32 GL_SAMPLE_MASK_VALUE=36434;
u32 GL_MAX_SAMPLE_MASK_WORDS=36441;
u32 GL_TEXTURE_2D_MULTISAMPLE=37120;
u32 GL_PROXY_TEXTURE_2D_MULTISAMPLE=37121;
u32 GL_TEXTURE_2D_MULTISAMPLE_ARRAY=37122;
u32 GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY=37123;
u32 GL_TEXTURE_BINDING_2D_MULTISAMPLE=37124;
u32 GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY=37125;
u32 GL_TEXTURE_SAMPLES=37126;
u32 GL_TEXTURE_FIXED_SAMPLE_LOCATIONS=37127;
u32 GL_SAMPLER_2D_MULTISAMPLE=37128;
u32 GL_INT_SAMPLER_2D_MULTISAMPLE=37129;
u32 GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE=37130;
u32 GL_SAMPLER_2D_MULTISAMPLE_ARRAY=37131;
u32 GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY=37132;
u32 GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY=37133;
u32 GL_MAX_COLOR_TEXTURE_SAMPLES=37134;
u32 GL_MAX_DEPTH_TEXTURE_SAMPLES=37135;
u32 GL_MAX_INTEGER_SAMPLES=37136;
u32 GL_SRC1_COLOR=35065;
u32 GL_SRC1_ALPHA=34185;
u32 GL_ONE_MINUS_SRC1_COLOR=35066;
u32 GL_ONE_MINUS_SRC1_ALPHA=35067;
u32 GL_MAX_DUAL_SOURCE_DRAW_BUFFERS=35068;
u32 GL_ANY_SAMPLES_PASSED=35887;
u32 GL_SAMPLER_BINDING=35097;
u32 GL_RGB10_A2UI=36975;
u32 GL_TEXTURE_SWIZZLE_R=36418;
u32 GL_TEXTURE_SWIZZLE_G=36419;
u32 GL_TEXTURE_SWIZZLE_B=36420;
u32 GL_TEXTURE_SWIZZLE_A=36421;
u32 GL_TEXTURE_SWIZZLE_RGBA=36422;
u32 GL_TIME_ELAPSED=35007;
u32 GL_TIMESTAMP=36392;
u32 GL_INT_2_10_10_10_REV=36255;
u32 GL_DRAW_INDIRECT_BUFFER=36671;
u32 GL_DRAW_INDIRECT_BUFFER_BINDING=36675;
u32 GL_GEOMETRY_SHADER_INVOCATIONS=34943;
u32 GL_MAX_GEOMETRY_SHADER_INVOCATIONS=36442;
u32 GL_MIN_FRAGMENT_INTERPOLATION_OFFSET=36443;
u32 GL_MAX_FRAGMENT_INTERPOLATION_OFFSET=36444;
u32 GL_FRAGMENT_INTERPOLATION_OFFSET_BITS=36445;
u32 GL_DOUBLE_VEC2=36860;
u32 GL_DOUBLE_VEC3=36861;
u32 GL_DOUBLE_VEC4=36862;
u32 GL_DOUBLE_MAT2=36678;
u32 GL_DOUBLE_MAT3=36679;
u32 GL_DOUBLE_MAT4=36680;
u32 GL_DOUBLE_MAT2x3=36681;
u32 GL_DOUBLE_MAT2x4=36682;
u32 GL_DOUBLE_MAT3x2=36683;
u32 GL_DOUBLE_MAT3x4=36684;
u32 GL_DOUBLE_MAT4x2=36685;
u32 GL_DOUBLE_MAT4x3=36686;
u32 GL_ACTIVE_SUBROUTINES=36325;
u32 GL_ACTIVE_SUBROUTINE_UNIFORMS=36326;
u32 GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS=36423;
u32 GL_ACTIVE_SUBROUTINE_MAX_LENGTH=36424;
u32 GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH=36425;
u32 GL_MAX_SUBROUTINES=36327;
u32 GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS=36328;
u32 GL_NUM_COMPATIBLE_SUBROUTINES=36426;
u32 GL_COMPATIBLE_SUBROUTINES=36427;
u32 GL_PATCHES=14;
u32 GL_PATCH_VERTICES=36466;
u32 GL_PATCH_DEFAULT_INNER_LEVEL=36467;
u32 GL_PATCH_DEFAULT_OUTER_LEVEL=36468;
u32 GL_TESS_CONTROL_OUTPUT_VERTICES=36469;
u32 GL_TESS_GEN_MODE=36470;
u32 GL_TESS_GEN_SPACING=36471;
u32 GL_TESS_GEN_VERTEX_ORDER=36472;
u32 GL_TESS_GEN_POINT_MODE=36473;
u32 GL_QUADS=7;
u32 GL_ISOLINES=36474;
u32 GL_FRACTIONAL_ODD=36475;
u32 GL_FRACTIONAL_EVEN=36476;
u32 GL_MAX_PATCH_VERTICES=36477;
u32 GL_MAX_TESS_GEN_LEVEL=36478;
u32 GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS=36479;
u32 GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS=36480;
u32 GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS=36481;
u32 GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS=36482;
u32 GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS=36483;
u32 GL_MAX_TESS_PATCH_COMPONENTS=36484;
u32 GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS=36485;
u32 GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS=36486;
u32 GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS=36489;
u32 GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS=36490;
u32 GL_MAX_TESS_CONTROL_INPUT_COMPONENTS=34924;
u32 GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS=34925;
u32 GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS=36382;
u32 GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS=36383;
u32 GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER=34032;
u32 GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER=34033;
u32 GL_TESS_EVALUATION_SHADER=36487;
u32 GL_TESS_CONTROL_SHADER=36488;
u32 GL_TRANSFORM_FEEDBACK=36386;
u32 GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED=36387;
u32 GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE=36388;
u32 GL_TRANSFORM_FEEDBACK_BINDING=36389;
u32 GL_MAX_TRANSFORM_FEEDBACK_BUFFERS=36464;
u32 GL_MAX_VERTEX_STREAMS=36465;
u32 GL_FIXED=5132;
u32 GL_IMPLEMENTATION_COLOR_READ_TYPE=35738;
u32 GL_IMPLEMENTATION_COLOR_READ_FORMAT=35739;
u32 GL_LOW_F32=36336;
u32 GL_MEDIUM_F32=36337;
u32 GL_HIGH_F32=36338;
u32 GL_LOW_INT=36339;
u32 GL_MEDIUM_INT=36340;
u32 GL_HIGH_INT=36341;
u32 GL_SHADER_COMPILER=36346;
u32 GL_SHADER_BINARY_FORMATS=36344;
u32 GL_NUM_SHADER_BINARY_FORMATS=36345;
u32 GL_MAX_VERTEX_UNIFORM_VECTORS=36347;
u32 GL_MAX_VARYING_VECTORS=36348;
u32 GL_MAX_FRAGMENT_UNIFORM_VECTORS=36349;
u32 GL_RGB565=36194;
u32 GL_PROGRAM_BINARY_RETRIEVABLE_HINT=33367;
u32 GL_PROGRAM_BINARY_LENGTH=34625;
u32 GL_NUM_PROGRAM_BINARY_FORMATS=34814;
u32 GL_PROGRAM_BINARY_FORMATS=34815;
u32 GL_VERTEX_SHADER_BIT=1;
u32 GL_FRAGMENT_SHADER_BIT=2;
u32 GL_GEOMETRY_SHADER_BIT=4;
u32 GL_TESS_CONTROL_SHADER_BIT=8;
u32 GL_TESS_EVALUATION_SHADER_BIT=16;
u32 GL_ALL_SHADER_BITS=4294967295;
u32 GL_PROGRAM_SEPARABLE=33368;
u32 GL_ACTIVE_PROGRAM=33369;
u32 GL_PROGRAM_PIPELINE_BINDING=33370;
u32 GL_MAX_VIEWPORTS=33371;
u32 GL_VIEWPORT_SUBPIXEL_BITS=33372;
u32 GL_VIEWPORT_BOUNDS_RANGE=33373;
u32 GL_LAYER_PROVOKING_VERTEX=33374;
u32 GL_VIEWPORT_INDEX_PROVOKING_VERTEX=33375;
u32 GL_UNDEFINED_VERTEX=33376;
u32 GL_VERSION_1_0=1;
u32 GL_VERSION_1_1=1;
u32 GL_VERSION_1_2=1;
u32 GL_VERSION_1_3=1;
u32 GL_VERSION_1_4=1;
u32 GL_VERSION_1_5=1;
u32 GL_VERSION_2_0=1;
u32 GL_VERSION_2_1=1;
u32 GL_VERSION_3_0=1;
u32 GL_VERSION_3_1=1;
u32 GL_VERSION_3_2=1;
u32 GL_VERSION_3_3=1;
u32 GL_VERSION_4_0=1;
u32 GL_VERSION_4_1=1;
u32 BufferVertex=GL_ARRAY_BUFFER;
u32 BufferIndex=GL_ELEMENT_ARRAY_BUFFER;
i8 CharA=65;
i8 CharB=66;
i8 CharC=67;
i8 CharD=68;
i8 CharE=69;
i8 CharF=70;
i8 CharG=71;
i8 CharH=72;
i8 CharI=73;
i8 CharJ=74;
i8 CharK=75;
i8 CharL=76;
i8 CharM=77;
i8 CharN=78;
i8 CharO=79;
i8 CharP=80;
i8 CharQ=81;
i8 CharR=82;
i8 CharS=83;
i8 CharT=84;
i8 CharU=85;
i8 CharV=86;
i8 CharW=87;
i8 CharX=88;
i8 CharY=89;
i8 CharZ=90;
i8 Chara=97;
i8 Charb=98;
i8 Charc=99;
i8 Chard=100;
i8 Chare=101;
i8 Charf=102;
i8 Charg=103;
i8 Charh=104;
i8 Chari=105;
i8 Charj=106;
i8 Chark=107;
i8 Charl=108;
i8 Charm=109;
i8 Charn=110;
i8 Charo=111;
i8 Charp=112;
i8 Charq=113;
i8 Charr=114;
i8 Chars=115;
i8 Chart=116;
i8 Charu=117;
i8 Charv=118;
i8 Charw=119;
i8 Charx=120;
i8 Chary=121;
i8 Charz=122;
i8 Char0=48;
i8 Char1=49;
i8 Char2=50;
i8 Char3=51;
i8 Char4=52;
i8 Char5=53;
i8 Char6=54;
i8 Char7=55;
i8 Char8=56;
i8 Char9=57;
		void Load97(str file,Scene& scene){
		Archive archive=Unarchive288(file);
		#line 34 f0__ //Call
		Println121(add123(str{5,(i8*)"Size:"},String125(archive.array.length)));
		for(i64 it = i64300(0); it<archive.array.length;it++){
			Entity entity=CreateEntity243();
			#line 41 f0__ //Call
			Println121(add123(str{7,(i8*)"Entity "},String125(entity.id)));
			#line 43 f0__ //If
			if(true){
				Archive arch=OpArray279(OpArray7513(archive.array,it),str{6,(i8*)"Sprite"});
				#line 45 f0__ //If
				if((arch.Type!=ArchiveNone)){
					Sprite* s=Sprite379(entity,(*scene.renderer),OpArray279(arch,str{7,(i8*)"Texture"}).string);
					#line 47 f0__ //BinaryOp
					s->material.shader = Shader255((*scene.renderer),OpArray279(arch,str{6,(i8*)"Vertex"}).string,OpArray279(arch,str{8,(i8*)"Fragment"}).string);
					#line 48 f0__ //Call
					Load269(OpArray279(arch,str{5,(i8*)"Color"}),s->color);
					#line 49 f0__ //Call
					Color381((*s),s->color);
					#line 50 f0__ //Call
					Println121(str{6,(i8*)"Sprite"});
					#line 51 f0__ //Call
					Println121(String191(s->color));
					#line 52 f0__ //Call
					Println121(s->material.shader.vs);
					#line 53 f0__ //Call
					Println121(s->material.shader.fs);
					#line 54 f0__ //Call
					Println121(s->material.texture.file);
				};
			};
			#line 57 f0__ //If
			if(true){
				Archive arch=OpArray279(OpArray66617(archive.array,it),str{9,(i8*)"Transform"});
				#line 59 f0__ //If
				if((arch.Type!=ArchiveNone)){
					Transform* t=Transform383(entity);
					#line 61 f0__ //Call
					Load270(OpArray279(arch,str{8,(i8*)"Position"}),t->position);
					#line 62 f0__ //Call
					Load270(OpArray279(arch,str{5,(i8*)"Scale"}),t->scale);
					#line 63 f0__ //Call
					Println121(str{9,(i8*)"Transform"});
					#line 64 f0__ //Call
					Println121(String192(t->position));
					#line 65 f0__ //Call
					Println121(String192(t->scale));
					#line 66 f0__ //Call
					Recalculate389((*t));
				};
			};
		};
}
		i32 main(){
		#line 81 f0__ //Call
		glfwInit();
		#line 82 f0__ //Call
		glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR,3);
		#line 83 f0__ //Call
		glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR,3);
		#line 84 f0__ //Call
		glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT,1);
		#line 85 f0__ //Call
		glfwWindowHint(GLFW_OPENGL_PROFILE,GLFW_OPENGL_CORE_PROFILE);
		GLFWwindow* glfwwindow=glfwCreateWindow(800,400,str{3,(i8*)"Min"}.chars,(GLFWmonitor*)0,(GLFWwindow*)0);
		#line 88 f0__ //Call
		glfwMakeContextCurrent(glfwwindow);
		#line 90 f0__ //If
		if((chdir(str{30,(i8*)"/Users/Davie/Desktop/Resources"}.chars)!=0)){
			#line 91 f0__ //Call
			Error122(str{24,(i8*)"Couldnt change directory"});
		};
		#line 94 f0__ //Call
		Init234(world);
		Window window={0};
		#line 97 f0__ //BinaryOp
		window.size = Vec2207(800,400);
		Renderer renderer=Renderer257();
		Camera camera=Camera405();
		Scene theScene={0};
		#line 103 f0__ //BinaryOp
		theScene.window = (&window);
		#line 104 f0__ //BinaryOp
		theScene.renderer = (&renderer);
		#line 105 f0__ //BinaryOp
		theScene.camera = (&camera);
		Texture scene=Texture403(mul221(window.size,2.0));
		Texture occlusion=Texture403(mul221(window.size,2.0));
		ShadingPass pass=ShadingPass251();
		#line 111 f0__ //BinaryOp
		pass.clear = 1;
		#line 112 f0__ //Call
		Push6635(pass.out,(&scene));
		#line 113 f0__ //Call
		Push7638(pass.out,(&occlusion));
		#line 114 f0__ //Call
		Refresh253(pass);
		#line 115 f0__ //Call
		Push8647(renderer.passes,pass);
		#line 117 f0__ //If
		if(true){
			Shader post=Shader255(renderer,str{14,(i8*)"PostProcess.vs"},str{6,(i8*)"Red.fs"});
			Sprite sprite=Sprite380(renderer,str{21,(i8*)"images/GrassSmall.png"});
			#line 121 f0__ //BinaryOp
			sprite.material.texture = scene;
			#line 122 f0__ //BinaryOp
			sprite.material.shader = post;
			ShadingPass pass=PostProcess252(sprite);
			#line 125 f0__ //BinaryOp
			pass.clear = 1;
			#line 126 f0__ //Call
			Refresh253(pass);
			#line 127 f0__ //Call
			Push9650(renderer.passes,pass);
		};
		#line 129 f0__ //If
		if(true){
			Shader post=Shader255(renderer,str{14,(i8*)"PostProcess.vs"},str{11,(i8*)"Lighting.fs"});
			Sprite sprite=Sprite380(renderer,str{21,(i8*)"images/GrassSmall.png"});
			#line 132 f0__ //BinaryOp
			sprite.material.texture = occlusion;
			#line 133 f0__ //BinaryOp
			sprite.material.shader = post;
			ShadingPass pass=PostProcess252(sprite);
			#line 135 f0__ //Call
			Push10653(pass.in,(&scene));
			#line 136 f0__ //Call
			Push11656(pass.in,(&occlusion));
			#line 137 f0__ //Call
			Refresh253(pass);
			#line 138 f0__ //Call
			Push12659(renderer.passes,pass);
		};
		#line 141 f0__ //Call
		Load97(str{4,(i8*)"data"},theScene);
		#line 144 f0__ //If
		if(true){
			Entity entity=CreateEntity243();
			Sprite* sprite=Sprite379(entity,renderer,str{21,(i8*)"images/GrassSmall.png"});
			#line 148 f0__ //BinaryOp
			sprite->material.shader = Shader255(renderer,str{11,(i8*)"Position.vs"},str{9,(i8*)"Shader.fs"});
			Transform* t=Transform383(entity);
			#line 151 f0__ //Call
			Scale385((*t),Vec3204(50.0));
			#line 152 f0__ //Call
			Position387((*t),Vec3203(1,40.0,0));
		};
		#line 155 f0__ //Call
		glBlendFunc(GL_ONE,GL_ONE_MINUS_SRC_ALPHA);
		#line 156 f0__ //Call
		glBlendFuncSeparatei(1,GL_ONE,GL_ONE,GL_ONE,GL_ONE_MINUS_SRC_ALPHA);
		#line 157 f0__ //Call
		glEnable(GL_BLEND);
		while((!glfwWindowShouldClose(glfwwindow))){
			#line 161 f0__ //Call
			glClear(GL_COLOR_BUFFER_BIT);
			#line 162 f0__ //Call
			glClearColor(0,0,0,0);
			#line 164 f0__ //BinaryOp
			theScene.camera->projection = Perspective407(theScene.camera->fieldOfView,(theScene.window->size.x/theScene.window->size.y),theScene.camera->near,theScene.camera->far);
			#line 165 f0__ //BinaryOp
			theScene.camera->viewProjection = mul199(theScene.camera->projection,theScene.camera->view);
			#line 166 f0__ //Call
			Render266(renderer,world,camera,window);
			#line 168 f0__ //Call
			glfwSwapBuffers(glfwwindow);
			#line 169 f0__ //Call
			glfwPollEvents();
		};
		#line 171 f0__ //Return
		return 5;
}
				void Init0474(Array5& array,i64 length){
		#line 18 f1__ //BinaryOp
		array.elements = Alloc1475(length);
		#line 19 f1__ //BinaryOp
		array.length = length;
}
void Init0467(Array1& array,i64 length){
		#line 18 f1__ //BinaryOp
		array.elements = Alloc0468(length);
		#line 19 f1__ //BinaryOp
		array.length = length;
}
void Init2487(Array2& array,i64 length){
		#line 18 f1__ //BinaryOp
		array.elements = Alloc3488(length);
		#line 19 f1__ //BinaryOp
		array.length = length;
}
void Init3489(Array3& array,i64 length){
		#line 18 f1__ //BinaryOp
		array.elements = Alloc4490(length);
		#line 19 f1__ //BinaryOp
		array.length = length;
}
void Init4491(Array4& array,i64 length){
		#line 18 f1__ //BinaryOp
		array.elements = Alloc5492(length);
		#line 19 f1__ //BinaryOp
		array.length = length;
}
void Init5574(Array5& array,i64 length){
		#line 18 f1__ //BinaryOp
		array.elements = Alloc11575(length);
		#line 19 f1__ //BinaryOp
		array.length = length;
}
void Init6642(Array8& array,i64 length){
		#line 18 f1__ //BinaryOp
		array.elements = Alloc12643(length);
		#line 19 f1__ //BinaryOp
		array.length = length;
}
	i8& OpArray0476(Array5& array,i64 index){
		if((index>=array.length)){
			#line 24 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
i8& OpArray1480(Array5& array,i64 index){
		if((index>=array.length)){
			#line 24 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
i64& OpArray2512(Array1& array,i64 index){
		if((index>=array.length)){
			#line 24 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
i64& OpArray3515(Array1& array,i64 index){
		if((index>=array.length)){
			#line 24 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
i64& OpArray4516(Array1& array,i64 index){
		if((index>=array.length)){
			#line 24 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
Sprite& OpArray5517(Array4& array,i64 index){
		if((index>=array.length)){
			#line 24 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
u8& OpArray6521(Array6& array,i64 index){
		if((index>=array.length)){
			#line 24 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
u8& OpArray7522(Array6& array,i64 index){
		if((index>=array.length)){
			#line 24 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
u8& OpArray8523(Array6& array,i64 index){
		if((index>=array.length)){
			#line 24 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
u8& OpArray9524(Array6& array,i64 index){
		if((index>=array.length)){
			#line 24 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
u8& OpArray10525(Array6& array,i64 index){
		if((index>=array.length)){
			#line 24 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
u8& OpArray11526(Array6& array,i64 index){
		if((index>=array.length)){
			#line 24 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
u8& OpArray12527(Array6& array,i64 index){
		if((index>=array.length)){
			#line 24 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
u16& OpArray13565(Array7& array,i64 index){
		if((index>=array.length)){
			#line 24 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
u16& OpArray14566(Array7& array,i64 index){
		if((index>=array.length)){
			#line 24 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
u16& OpArray15567(Array7& array,i64 index){
		if((index>=array.length)){
			#line 24 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
u16& OpArray16568(Array7& array,i64 index){
		if((index>=array.length)){
			#line 24 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
u16& OpArray17569(Array7& array,i64 index){
		if((index>=array.length)){
			#line 24 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
u16& OpArray18570(Array7& array,i64 index){
		if((index>=array.length)){
			#line 24 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
i8& OpArray19576(Array5& array,i64 index){
		if((index>=array.length)){
			#line 24 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
i64& OpArray20619(Array1& array,i64 index){
		if((index>=array.length)){
			#line 24 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
i64& OpArray21620(Array1& array,i64 index){
		if((index>=array.length)){
			#line 24 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
Transform& OpArray22621(Array3& array,i64 index){
		if((index>=array.length)){
			#line 24 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
u32& OpArray23646(Array8& array,i64 index){
		if((index>=array.length)){
			#line 24 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
i64& OpArray24672(Array1& array,i64 index){
		if((index>=array.length)){
			#line 24 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
Transform& OpArray25673(Array3& array,i64 index){
		if((index>=array.length)){
			#line 24 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
Sprite& OpArray26674(Array4& array,i64 index){
		if((index>=array.length)){
			#line 24 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
	Archive& OpArray0477(DynamicArray7& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
Archive& OpArray1478(DynamicArray7& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
Archive& OpArray2479(DynamicArray7& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
Archive& OpArray0469(DynamicArray7& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
Archive& OpArray4481(DynamicArray7& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
Archive& OpArray5485(DynamicArray7& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
Archive& OpArray6486(DynamicArray7& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
Archive& OpArray7513(DynamicArray7& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode2& OpArray8531(DynamicArray5& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode2& OpArray9532(DynamicArray5& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode2& OpArray10533(DynamicArray5& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode2& OpArray11534(DynamicArray5& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode2& OpArray12535(DynamicArray5& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode2& OpArray13536(DynamicArray5& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode2& OpArray14537(DynamicArray5& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode2& OpArray15538(DynamicArray5& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode2& OpArray16539(DynamicArray5& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode2& OpArray17543(DynamicArray5& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode2& OpArray18544(DynamicArray5& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode2& OpArray19545(DynamicArray5& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode2& OpArray20546(DynamicArray5& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode2& OpArray21547(DynamicArray5& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode2& OpArray22548(DynamicArray5& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode2& OpArray23549(DynamicArray5& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode2& OpArray24550(DynamicArray5& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode2& OpArray25551(DynamicArray5& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode2& OpArray26555(DynamicArray5& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode2& OpArray27556(DynamicArray5& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode2& OpArray28557(DynamicArray5& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode2& OpArray29558(DynamicArray5& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode2& OpArray30559(DynamicArray5& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode2& OpArray31560(DynamicArray5& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode2& OpArray32561(DynamicArray5& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode2& OpArray33562(DynamicArray5& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode2& OpArray34563(DynamicArray5& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode1& OpArray35580(DynamicArray4& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode1& OpArray36581(DynamicArray4& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode1& OpArray37582(DynamicArray4& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode1& OpArray38583(DynamicArray4& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode1& OpArray39584(DynamicArray4& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode1& OpArray40585(DynamicArray4& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode1& OpArray41586(DynamicArray4& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode1& OpArray42587(DynamicArray4& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode1& OpArray43588(DynamicArray4& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode1& OpArray44592(DynamicArray4& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode1& OpArray45593(DynamicArray4& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode1& OpArray46594(DynamicArray4& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode1& OpArray47595(DynamicArray4& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode1& OpArray48596(DynamicArray4& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode1& OpArray49597(DynamicArray4& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode1& OpArray50598(DynamicArray4& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode1& OpArray51599(DynamicArray4& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode1& OpArray52600(DynamicArray4& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode1& OpArray53604(DynamicArray4& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode1& OpArray54605(DynamicArray4& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode1& OpArray55606(DynamicArray4& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode1& OpArray56607(DynamicArray4& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode1& OpArray57608(DynamicArray4& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode1& OpArray58609(DynamicArray4& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode1& OpArray59610(DynamicArray4& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode1& OpArray60611(DynamicArray4& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
TableNode1& OpArray61612(DynamicArray4& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
Archive& OpArray62613(DynamicArray7& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
Archive& OpArray63614(DynamicArray7& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
Archive& OpArray64615(DynamicArray7& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
Archive& OpArray65616(DynamicArray7& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
Archive& OpArray66617(DynamicArray7& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
Archive& OpArray67622(DynamicArray7& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
Archive& OpArray68623(DynamicArray7& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
Archive& OpArray69624(DynamicArray7& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
Transform*& OpArray70625(DynamicArray8& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
Texture*& OpArray71644(DynamicArray2& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
Texture*& OpArray72645(DynamicArray2& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
ShadingPass& OpArray73664(DynamicArray3& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
ShadingPass& OpArray74665(DynamicArray3& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
ShadingPass& OpArray75666(DynamicArray3& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
Texture*& OpArray76667(DynamicArray2& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
ShadingPass& OpArray77668(DynamicArray3& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
ShadingPass& OpArray78669(DynamicArray3& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
ShadingPass& OpArray79676(DynamicArray3& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
ShadingPass& OpArray80677(DynamicArray3& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
Archive& OpArray81679(DynamicArray7& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
Archive& OpArray82680(DynamicArray7& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
Archive& OpArray83681(DynamicArray7& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
Archive& OpArray84682(DynamicArray7& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
Archive& OpArray85684(DynamicArray7& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
Archive& OpArray86685(DynamicArray7& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
Archive& OpArray87686(DynamicArray7& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
Archive& OpArray88688(DynamicArray7& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
Archive& OpArray89689(DynamicArray7& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
Archive& OpArray90690(DynamicArray7& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
Archive& OpArray91691(DynamicArray7& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
Archive& OpArray92692(DynamicArray7& array,i64 index){
		if((index>=array.length)){
			#line 32 f1__ //Call
			Assert295(0,add123(add123(add123(add123(str{28,(i8*)"Array access out of bounds ["},String125(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String125(array.length)));
		};
		return (*(array.elements+index));
}
	void Init0493(DynamicArray7& array){
		#line 39 f1__ //BinaryOp
		array.capacity = 0;
		#line 40 f1__ //BinaryOp
		array.length = 0;
		#line 41 f1__ //BinaryOp
		array.elements = (Archive*)0;
}
void Init1495(DynamicArray9& array){
		#line 39 f1__ //BinaryOp
		array.capacity = 0;
		#line 40 f1__ //BinaryOp
		array.length = 0;
		#line 41 f1__ //BinaryOp
		array.elements = (i8*)0;
}
void Init2502(DynamicArray9& array){
		#line 39 f1__ //BinaryOp
		array.capacity = 0;
		#line 40 f1__ //BinaryOp
		array.length = 0;
		#line 41 f1__ //BinaryOp
		array.elements = (i8*)0;
}
void Init3626(DynamicArray3& array){
		#line 39 f1__ //BinaryOp
		array.capacity = 0;
		#line 40 f1__ //BinaryOp
		array.length = 0;
		#line 41 f1__ //BinaryOp
		array.elements = (ShadingPass*)0;
}
void Init4628(DynamicArray4& array){
		#line 39 f1__ //BinaryOp
		array.capacity = 0;
		#line 40 f1__ //BinaryOp
		array.length = 0;
		#line 41 f1__ //BinaryOp
		array.elements = (TableNode1*)0;
}
void Init5631(DynamicArray5& array){
		#line 39 f1__ //BinaryOp
		array.capacity = 0;
		#line 40 f1__ //BinaryOp
		array.length = 0;
		#line 41 f1__ //BinaryOp
		array.elements = (TableNode2*)0;
}
void Init6633(DynamicArray2& array){
		#line 39 f1__ //BinaryOp
		array.capacity = 0;
		#line 40 f1__ //BinaryOp
		array.length = 0;
		#line 41 f1__ //BinaryOp
		array.elements = (Texture**)0;
}
void Init7634(DynamicArray2& array){
		#line 39 f1__ //BinaryOp
		array.capacity = 0;
		#line 40 f1__ //BinaryOp
		array.length = 0;
		#line 41 f1__ //BinaryOp
		array.elements = (Texture**)0;
}
	void Push0482(DynamicArray7& array,Archive value){
		if((array.capacity<(array.length+1))){
			i64 capacity=(array.capacity*2);
			if((capacity<10)){
				#line 50 f1__ //Call
				Reserve0483(array,10);
			}else{
				#line 53 f1__ //Call
				Reserve1484(array,capacity);
			};
		};
		#line 56 f1__ //BinaryOp
		(*(array.elements+array.length)) = value;
		#line 57 f1__ //BinaryOp
		array.length = (array.length+1);
}
void Push1496(DynamicArray9& array,i8 value){
		if((array.capacity<(array.length+1))){
			i64 capacity=(array.capacity*2);
			if((capacity<10)){
				#line 50 f1__ //Call
				Reserve2497(array,10);
			}else{
				#line 53 f1__ //Call
				Reserve3498(array,capacity);
			};
		};
		#line 56 f1__ //BinaryOp
		(*(array.elements+array.length)) = value;
		#line 57 f1__ //BinaryOp
		array.length = (array.length+1);
}
void Push2499(DynamicArray9& array,i8 value){
		if((array.capacity<(array.length+1))){
			i64 capacity=(array.capacity*2);
			if((capacity<10)){
				#line 50 f1__ //Call
				Reserve4500(array,10);
			}else{
				#line 53 f1__ //Call
				Reserve5501(array,capacity);
			};
		};
		#line 56 f1__ //BinaryOp
		(*(array.elements+array.length)) = value;
		#line 57 f1__ //BinaryOp
		array.length = (array.length+1);
}
void Push3503(DynamicArray9& array,i8 value){
		if((array.capacity<(array.length+1))){
			i64 capacity=(array.capacity*2);
			if((capacity<10)){
				#line 50 f1__ //Call
				Reserve6504(array,10);
			}else{
				#line 53 f1__ //Call
				Reserve7505(array,capacity);
			};
		};
		#line 56 f1__ //BinaryOp
		(*(array.elements+array.length)) = value;
		#line 57 f1__ //BinaryOp
		array.length = (array.length+1);
}
void Push4506(DynamicArray9& array,i8 value){
		if((array.capacity<(array.length+1))){
			i64 capacity=(array.capacity*2);
			if((capacity<10)){
				#line 50 f1__ //Call
				Reserve8507(array,10);
			}else{
				#line 53 f1__ //Call
				Reserve9508(array,capacity);
			};
		};
		#line 56 f1__ //BinaryOp
		(*(array.elements+array.length)) = value;
		#line 57 f1__ //BinaryOp
		array.length = (array.length+1);
}
void Push5509(DynamicArray7& array,Archive value){
		if((array.capacity<(array.length+1))){
			i64 capacity=(array.capacity*2);
			if((capacity<10)){
				#line 50 f1__ //Call
				Reserve10510(array,10);
			}else{
				#line 53 f1__ //Call
				Reserve11511(array,capacity);
			};
		};
		#line 56 f1__ //BinaryOp
		(*(array.elements+array.length)) = value;
		#line 57 f1__ //BinaryOp
		array.length = (array.length+1);
}
void Push6635(DynamicArray2& array,Texture* value){
		if((array.capacity<(array.length+1))){
			i64 capacity=(array.capacity*2);
			if((capacity<10)){
				#line 50 f1__ //Call
				Reserve12636(array,10);
			}else{
				#line 53 f1__ //Call
				Reserve13637(array,capacity);
			};
		};
		#line 56 f1__ //BinaryOp
		(*(array.elements+array.length)) = value;
		#line 57 f1__ //BinaryOp
		array.length = (array.length+1);
}
void Push7638(DynamicArray2& array,Texture* value){
		if((array.capacity<(array.length+1))){
			i64 capacity=(array.capacity*2);
			if((capacity<10)){
				#line 50 f1__ //Call
				Reserve14639(array,10);
			}else{
				#line 53 f1__ //Call
				Reserve15640(array,capacity);
			};
		};
		#line 56 f1__ //BinaryOp
		(*(array.elements+array.length)) = value;
		#line 57 f1__ //BinaryOp
		array.length = (array.length+1);
}
void Push8647(DynamicArray3& array,ShadingPass value){
		if((array.capacity<(array.length+1))){
			i64 capacity=(array.capacity*2);
			if((capacity<10)){
				#line 50 f1__ //Call
				Reserve16648(array,10);
			}else{
				#line 53 f1__ //Call
				Reserve17649(array,capacity);
			};
		};
		#line 56 f1__ //BinaryOp
		(*(array.elements+array.length)) = value;
		#line 57 f1__ //BinaryOp
		array.length = (array.length+1);
}
void Push9650(DynamicArray3& array,ShadingPass value){
		if((array.capacity<(array.length+1))){
			i64 capacity=(array.capacity*2);
			if((capacity<10)){
				#line 50 f1__ //Call
				Reserve18651(array,10);
			}else{
				#line 53 f1__ //Call
				Reserve19652(array,capacity);
			};
		};
		#line 56 f1__ //BinaryOp
		(*(array.elements+array.length)) = value;
		#line 57 f1__ //BinaryOp
		array.length = (array.length+1);
}
void Push10653(DynamicArray2& array,Texture* value){
		if((array.capacity<(array.length+1))){
			i64 capacity=(array.capacity*2);
			if((capacity<10)){
				#line 50 f1__ //Call
				Reserve20654(array,10);
			}else{
				#line 53 f1__ //Call
				Reserve21655(array,capacity);
			};
		};
		#line 56 f1__ //BinaryOp
		(*(array.elements+array.length)) = value;
		#line 57 f1__ //BinaryOp
		array.length = (array.length+1);
}
void Push11656(DynamicArray2& array,Texture* value){
		if((array.capacity<(array.length+1))){
			i64 capacity=(array.capacity*2);
			if((capacity<10)){
				#line 50 f1__ //Call
				Reserve22657(array,10);
			}else{
				#line 53 f1__ //Call
				Reserve23658(array,capacity);
			};
		};
		#line 56 f1__ //BinaryOp
		(*(array.elements+array.length)) = value;
		#line 57 f1__ //BinaryOp
		array.length = (array.length+1);
}
void Push12659(DynamicArray3& array,ShadingPass value){
		if((array.capacity<(array.length+1))){
			i64 capacity=(array.capacity*2);
			if((capacity<10)){
				#line 50 f1__ //Call
				Reserve24660(array,10);
			}else{
				#line 53 f1__ //Call
				Reserve25661(array,capacity);
			};
		};
		#line 56 f1__ //BinaryOp
		(*(array.elements+array.length)) = value;
		#line 57 f1__ //BinaryOp
		array.length = (array.length+1);
}
void Push13693(DynamicArray8& array,Transform* value){
		if((array.capacity<(array.length+1))){
			i64 capacity=(array.capacity*2);
			if((capacity<10)){
				#line 50 f1__ //Call
				Reserve26694(array,10);
			}else{
				#line 53 f1__ //Call
				Reserve27695(array,capacity);
			};
		};
		#line 56 f1__ //BinaryOp
		(*(array.elements+array.length)) = value;
		#line 57 f1__ //BinaryOp
		array.length = (array.length+1);
}
	void Reserve0483(DynamicArray7& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64301(typeinfo2.size)*size);
			#line 65 f1__ //BinaryOp
			array.elements = (Archive*)realloc((voidptr)array.elements,u64345(bytes));
			#line 66 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64345((i64301(typeinfo2.size)*(size-array.capacity))));
			#line 67 f1__ //BinaryOp
			array.capacity = size;
		};
}
void Reserve1484(DynamicArray7& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64301(typeinfo2.size)*size);
			#line 65 f1__ //BinaryOp
			array.elements = (Archive*)realloc((voidptr)array.elements,u64345(bytes));
			#line 66 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64345((i64301(typeinfo2.size)*(size-array.capacity))));
			#line 67 f1__ //BinaryOp
			array.capacity = size;
		};
}
void Reserve2497(DynamicArray9& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64301(typeinfo1.size)*size);
			#line 65 f1__ //BinaryOp
			array.elements = (i8*)realloc((voidptr)array.elements,u64345(bytes));
			#line 66 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64345((i64301(typeinfo1.size)*(size-array.capacity))));
			#line 67 f1__ //BinaryOp
			array.capacity = size;
		};
}
void Reserve3498(DynamicArray9& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64301(typeinfo1.size)*size);
			#line 65 f1__ //BinaryOp
			array.elements = (i8*)realloc((voidptr)array.elements,u64345(bytes));
			#line 66 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64345((i64301(typeinfo1.size)*(size-array.capacity))));
			#line 67 f1__ //BinaryOp
			array.capacity = size;
		};
}
void Reserve4500(DynamicArray9& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64301(typeinfo1.size)*size);
			#line 65 f1__ //BinaryOp
			array.elements = (i8*)realloc((voidptr)array.elements,u64345(bytes));
			#line 66 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64345((i64301(typeinfo1.size)*(size-array.capacity))));
			#line 67 f1__ //BinaryOp
			array.capacity = size;
		};
}
void Reserve5501(DynamicArray9& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64301(typeinfo1.size)*size);
			#line 65 f1__ //BinaryOp
			array.elements = (i8*)realloc((voidptr)array.elements,u64345(bytes));
			#line 66 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64345((i64301(typeinfo1.size)*(size-array.capacity))));
			#line 67 f1__ //BinaryOp
			array.capacity = size;
		};
}
void Reserve6504(DynamicArray9& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64301(typeinfo1.size)*size);
			#line 65 f1__ //BinaryOp
			array.elements = (i8*)realloc((voidptr)array.elements,u64345(bytes));
			#line 66 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64345((i64301(typeinfo1.size)*(size-array.capacity))));
			#line 67 f1__ //BinaryOp
			array.capacity = size;
		};
}
void Reserve7505(DynamicArray9& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64301(typeinfo1.size)*size);
			#line 65 f1__ //BinaryOp
			array.elements = (i8*)realloc((voidptr)array.elements,u64345(bytes));
			#line 66 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64345((i64301(typeinfo1.size)*(size-array.capacity))));
			#line 67 f1__ //BinaryOp
			array.capacity = size;
		};
}
void Reserve8507(DynamicArray9& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64301(typeinfo1.size)*size);
			#line 65 f1__ //BinaryOp
			array.elements = (i8*)realloc((voidptr)array.elements,u64345(bytes));
			#line 66 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64345((i64301(typeinfo1.size)*(size-array.capacity))));
			#line 67 f1__ //BinaryOp
			array.capacity = size;
		};
}
void Reserve9508(DynamicArray9& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64301(typeinfo1.size)*size);
			#line 65 f1__ //BinaryOp
			array.elements = (i8*)realloc((voidptr)array.elements,u64345(bytes));
			#line 66 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64345((i64301(typeinfo1.size)*(size-array.capacity))));
			#line 67 f1__ //BinaryOp
			array.capacity = size;
		};
}
void Reserve10510(DynamicArray7& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64301(typeinfo2.size)*size);
			#line 65 f1__ //BinaryOp
			array.elements = (Archive*)realloc((voidptr)array.elements,u64345(bytes));
			#line 66 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64345((i64301(typeinfo2.size)*(size-array.capacity))));
			#line 67 f1__ //BinaryOp
			array.capacity = size;
		};
}
void Reserve11511(DynamicArray7& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64301(typeinfo2.size)*size);
			#line 65 f1__ //BinaryOp
			array.elements = (Archive*)realloc((voidptr)array.elements,u64345(bytes));
			#line 66 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64345((i64301(typeinfo2.size)*(size-array.capacity))));
			#line 67 f1__ //BinaryOp
			array.capacity = size;
		};
}
void Reserve12636(DynamicArray2& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64301(typeinfo11.size)*size);
			#line 65 f1__ //BinaryOp
			array.elements = (Texture**)realloc((voidptr)array.elements,u64345(bytes));
			#line 66 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64345((i64301(typeinfo11.size)*(size-array.capacity))));
			#line 67 f1__ //BinaryOp
			array.capacity = size;
		};
}
void Reserve13637(DynamicArray2& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64301(typeinfo11.size)*size);
			#line 65 f1__ //BinaryOp
			array.elements = (Texture**)realloc((voidptr)array.elements,u64345(bytes));
			#line 66 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64345((i64301(typeinfo11.size)*(size-array.capacity))));
			#line 67 f1__ //BinaryOp
			array.capacity = size;
		};
}
void Reserve14639(DynamicArray2& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64301(typeinfo11.size)*size);
			#line 65 f1__ //BinaryOp
			array.elements = (Texture**)realloc((voidptr)array.elements,u64345(bytes));
			#line 66 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64345((i64301(typeinfo11.size)*(size-array.capacity))));
			#line 67 f1__ //BinaryOp
			array.capacity = size;
		};
}
void Reserve15640(DynamicArray2& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64301(typeinfo11.size)*size);
			#line 65 f1__ //BinaryOp
			array.elements = (Texture**)realloc((voidptr)array.elements,u64345(bytes));
			#line 66 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64345((i64301(typeinfo11.size)*(size-array.capacity))));
			#line 67 f1__ //BinaryOp
			array.capacity = size;
		};
}
void Reserve16648(DynamicArray3& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64301(typeinfo13.size)*size);
			#line 65 f1__ //BinaryOp
			array.elements = (ShadingPass*)realloc((voidptr)array.elements,u64345(bytes));
			#line 66 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64345((i64301(typeinfo13.size)*(size-array.capacity))));
			#line 67 f1__ //BinaryOp
			array.capacity = size;
		};
}
void Reserve17649(DynamicArray3& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64301(typeinfo13.size)*size);
			#line 65 f1__ //BinaryOp
			array.elements = (ShadingPass*)realloc((voidptr)array.elements,u64345(bytes));
			#line 66 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64345((i64301(typeinfo13.size)*(size-array.capacity))));
			#line 67 f1__ //BinaryOp
			array.capacity = size;
		};
}
void Reserve18651(DynamicArray3& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64301(typeinfo13.size)*size);
			#line 65 f1__ //BinaryOp
			array.elements = (ShadingPass*)realloc((voidptr)array.elements,u64345(bytes));
			#line 66 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64345((i64301(typeinfo13.size)*(size-array.capacity))));
			#line 67 f1__ //BinaryOp
			array.capacity = size;
		};
}
void Reserve19652(DynamicArray3& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64301(typeinfo13.size)*size);
			#line 65 f1__ //BinaryOp
			array.elements = (ShadingPass*)realloc((voidptr)array.elements,u64345(bytes));
			#line 66 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64345((i64301(typeinfo13.size)*(size-array.capacity))));
			#line 67 f1__ //BinaryOp
			array.capacity = size;
		};
}
void Reserve20654(DynamicArray2& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64301(typeinfo11.size)*size);
			#line 65 f1__ //BinaryOp
			array.elements = (Texture**)realloc((voidptr)array.elements,u64345(bytes));
			#line 66 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64345((i64301(typeinfo11.size)*(size-array.capacity))));
			#line 67 f1__ //BinaryOp
			array.capacity = size;
		};
}
void Reserve21655(DynamicArray2& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64301(typeinfo11.size)*size);
			#line 65 f1__ //BinaryOp
			array.elements = (Texture**)realloc((voidptr)array.elements,u64345(bytes));
			#line 66 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64345((i64301(typeinfo11.size)*(size-array.capacity))));
			#line 67 f1__ //BinaryOp
			array.capacity = size;
		};
}
void Reserve22657(DynamicArray2& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64301(typeinfo11.size)*size);
			#line 65 f1__ //BinaryOp
			array.elements = (Texture**)realloc((voidptr)array.elements,u64345(bytes));
			#line 66 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64345((i64301(typeinfo11.size)*(size-array.capacity))));
			#line 67 f1__ //BinaryOp
			array.capacity = size;
		};
}
void Reserve23658(DynamicArray2& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64301(typeinfo11.size)*size);
			#line 65 f1__ //BinaryOp
			array.elements = (Texture**)realloc((voidptr)array.elements,u64345(bytes));
			#line 66 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64345((i64301(typeinfo11.size)*(size-array.capacity))));
			#line 67 f1__ //BinaryOp
			array.capacity = size;
		};
}
void Reserve24660(DynamicArray3& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64301(typeinfo13.size)*size);
			#line 65 f1__ //BinaryOp
			array.elements = (ShadingPass*)realloc((voidptr)array.elements,u64345(bytes));
			#line 66 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64345((i64301(typeinfo13.size)*(size-array.capacity))));
			#line 67 f1__ //BinaryOp
			array.capacity = size;
		};
}
void Reserve25661(DynamicArray3& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64301(typeinfo13.size)*size);
			#line 65 f1__ //BinaryOp
			array.elements = (ShadingPass*)realloc((voidptr)array.elements,u64345(bytes));
			#line 66 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64345((i64301(typeinfo13.size)*(size-array.capacity))));
			#line 67 f1__ //BinaryOp
			array.capacity = size;
		};
}
void Reserve26694(DynamicArray8& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64301(typeinfo16.size)*size);
			#line 65 f1__ //BinaryOp
			array.elements = (Transform**)realloc((voidptr)array.elements,u64345(bytes));
			#line 66 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64345((i64301(typeinfo16.size)*(size-array.capacity))));
			#line 67 f1__ //BinaryOp
			array.capacity = size;
		};
}
void Reserve27695(DynamicArray8& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64301(typeinfo16.size)*size);
			#line 65 f1__ //BinaryOp
			array.elements = (Transform**)realloc((voidptr)array.elements,u64345(bytes));
			#line 66 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64345((i64301(typeinfo16.size)*(size-array.capacity))));
			#line 67 f1__ //BinaryOp
			array.capacity = size;
		};
}
	void Resize0530(DynamicArray5& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64301(typeinfo8.size)*size);
			#line 76 f1__ //BinaryOp
			array.elements = (TableNode2*)realloc((voidptr)array.elements,u64345(bytes));
			#line 77 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64345((i64301(typeinfo8.size)*(size-array.capacity))));
			#line 78 f1__ //BinaryOp
			array.capacity = size;
		};
		#line 80 f1__ //BinaryOp
		array.length = size;
}
void Resize1542(DynamicArray5& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64301(typeinfo8.size)*size);
			#line 76 f1__ //BinaryOp
			array.elements = (TableNode2*)realloc((voidptr)array.elements,u64345(bytes));
			#line 77 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64345((i64301(typeinfo8.size)*(size-array.capacity))));
			#line 78 f1__ //BinaryOp
			array.capacity = size;
		};
		#line 80 f1__ //BinaryOp
		array.length = size;
}
void Resize2554(DynamicArray5& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64301(typeinfo8.size)*size);
			#line 76 f1__ //BinaryOp
			array.elements = (TableNode2*)realloc((voidptr)array.elements,u64345(bytes));
			#line 77 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64345((i64301(typeinfo8.size)*(size-array.capacity))));
			#line 78 f1__ //BinaryOp
			array.capacity = size;
		};
		#line 80 f1__ //BinaryOp
		array.length = size;
}
void Resize3579(DynamicArray4& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64301(typeinfo10.size)*size);
			#line 76 f1__ //BinaryOp
			array.elements = (TableNode1*)realloc((voidptr)array.elements,u64345(bytes));
			#line 77 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64345((i64301(typeinfo10.size)*(size-array.capacity))));
			#line 78 f1__ //BinaryOp
			array.capacity = size;
		};
		#line 80 f1__ //BinaryOp
		array.length = size;
}
void Resize4591(DynamicArray4& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64301(typeinfo10.size)*size);
			#line 76 f1__ //BinaryOp
			array.elements = (TableNode1*)realloc((voidptr)array.elements,u64345(bytes));
			#line 77 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64345((i64301(typeinfo10.size)*(size-array.capacity))));
			#line 78 f1__ //BinaryOp
			array.capacity = size;
		};
		#line 80 f1__ //BinaryOp
		array.length = size;
}
void Resize5603(DynamicArray4& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64301(typeinfo10.size)*size);
			#line 76 f1__ //BinaryOp
			array.elements = (TableNode1*)realloc((voidptr)array.elements,u64345(bytes));
			#line 77 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64345((i64301(typeinfo10.size)*(size-array.capacity))));
			#line 78 f1__ //BinaryOp
			array.capacity = size;
		};
		#line 80 f1__ //BinaryOp
		array.length = size;
}
void Resize6629(DynamicArray4& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64301(typeinfo10.size)*size);
			#line 76 f1__ //BinaryOp
			array.elements = (TableNode1*)realloc((voidptr)array.elements,u64345(bytes));
			#line 77 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64345((i64301(typeinfo10.size)*(size-array.capacity))));
			#line 78 f1__ //BinaryOp
			array.capacity = size;
		};
		#line 80 f1__ //BinaryOp
		array.length = size;
}
void Resize7632(DynamicArray5& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64301(typeinfo8.size)*size);
			#line 76 f1__ //BinaryOp
			array.elements = (TableNode2*)realloc((voidptr)array.elements,u64345(bytes));
			#line 77 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64345((i64301(typeinfo8.size)*(size-array.capacity))));
			#line 78 f1__ //BinaryOp
			array.capacity = size;
		};
		#line 80 f1__ //BinaryOp
		array.length = size;
}
void Resize8678(DynamicArray7& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64301(typeinfo2.size)*size);
			#line 76 f1__ //BinaryOp
			array.elements = (Archive*)realloc((voidptr)array.elements,u64345(bytes));
			#line 77 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64345((i64301(typeinfo2.size)*(size-array.capacity))));
			#line 78 f1__ //BinaryOp
			array.capacity = size;
		};
		#line 80 f1__ //BinaryOp
		array.length = size;
}
void Resize9683(DynamicArray7& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64301(typeinfo2.size)*size);
			#line 76 f1__ //BinaryOp
			array.elements = (Archive*)realloc((voidptr)array.elements,u64345(bytes));
			#line 77 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64345((i64301(typeinfo2.size)*(size-array.capacity))));
			#line 78 f1__ //BinaryOp
			array.capacity = size;
		};
		#line 80 f1__ //BinaryOp
		array.length = size;
}
void Resize10687(DynamicArray7& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64301(typeinfo2.size)*size);
			#line 76 f1__ //BinaryOp
			array.elements = (Archive*)realloc((voidptr)array.elements,u64345(bytes));
			#line 77 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64345((i64301(typeinfo2.size)*(size-array.capacity))));
			#line 78 f1__ //BinaryOp
			array.capacity = size;
		};
		#line 80 f1__ //BinaryOp
		array.length = size;
}
					void Init0627(Table1& table){
		#line 120 f1__ //BinaryOp
		table.length = 0;
		#line 121 f1__ //BinaryOp
		table.capacity = 16;
		#line 123 f1__ //Call
		Init4628(table.data);
		#line 124 f1__ //Call
		Resize6629(table.data,16);
}
void Init1630(Table2& table){
		#line 120 f1__ //BinaryOp
		table.length = 0;
		#line 121 f1__ //BinaryOp
		table.capacity = 16;
		#line 123 f1__ //Call
		Init5631(table.data);
		#line 124 f1__ //Call
		Resize7632(table.data,16);
}
	void Resize0529(Table2& table){
		DynamicArray5 data={0};
		#line 130 f1__ //Call
		Resize0530(data,(table.capacity*2));
		for(i64 it = i64300(0); it<table.data.length;it++){
			i64 index=(OpArray8531(table.data,it).hash%data.length);
			#line 135 f1__ //BinaryOp
			OpArray9532(data,index) = OpArray10533(table.data,it);
		};
		#line 138 f1__ //BinaryOp
		table.data = data;
}
void Resize1541(Table2& table){
		DynamicArray5 data={0};
		#line 130 f1__ //Call
		Resize1542(data,(table.capacity*2));
		for(i64 it = i64300(0); it<table.data.length;it++){
			i64 index=(OpArray17543(table.data,it).hash%data.length);
			#line 135 f1__ //BinaryOp
			OpArray18544(data,index) = OpArray19545(table.data,it);
		};
		#line 138 f1__ //BinaryOp
		table.data = data;
}
void Resize2553(Table2& table){
		DynamicArray5 data={0};
		#line 130 f1__ //Call
		Resize2554(data,(table.capacity*2));
		for(i64 it = i64300(0); it<table.data.length;it++){
			i64 index=(OpArray26555(table.data,it).hash%data.length);
			#line 135 f1__ //BinaryOp
			OpArray27556(data,index) = OpArray28557(table.data,it);
		};
		#line 138 f1__ //BinaryOp
		table.data = data;
}
void Resize3578(Table1& table){
		DynamicArray4 data={0};
		#line 130 f1__ //Call
		Resize3579(data,(table.capacity*2));
		for(i64 it = i64300(0); it<table.data.length;it++){
			i64 index=(OpArray35580(table.data,it).hash%data.length);
			#line 135 f1__ //BinaryOp
			OpArray36581(data,index) = OpArray37582(table.data,it);
		};
		#line 138 f1__ //BinaryOp
		table.data = data;
}
void Resize4590(Table1& table){
		DynamicArray4 data={0};
		#line 130 f1__ //Call
		Resize4591(data,(table.capacity*2));
		for(i64 it = i64300(0); it<table.data.length;it++){
			i64 index=(OpArray44592(table.data,it).hash%data.length);
			#line 135 f1__ //BinaryOp
			OpArray45593(data,index) = OpArray46594(table.data,it);
		};
		#line 138 f1__ //BinaryOp
		table.data = data;
}
void Resize5602(Table1& table){
		DynamicArray4 data={0};
		#line 130 f1__ //Call
		Resize5603(data,(table.capacity*2));
		for(i64 it = i64300(0); it<table.data.length;it++){
			i64 index=(OpArray53604(table.data,it).hash%data.length);
			#line 135 f1__ //BinaryOp
			OpArray54605(data,index) = OpArray55606(table.data,it);
		};
		#line 138 f1__ //BinaryOp
		table.data = data;
}
	Texture& OpArray0528(Table2& table,str key){
		if(((table.length+(table.length/2))>table.capacity)){
			#line 146 f1__ //Call
			Resize0529(table);
		};
		i64 length=table.capacity;
		i64 hash=Hash128(key);
		i64 at=((hash%(length-1))+1);
		while(1){
			if((OpArray11534(table.data,at).hash==0)){
				#line 155 f1__ //BinaryOp
				OpArray12535(table.data,at).key = key;
				#line 156 f1__ //BinaryOp
				OpArray13536(table.data,at).hash = 1;
				return OpArray14537(table.data,at).value;
			}else{
				if(Equal127(key,OpArray15538(table.data,at).key)){
					return OpArray16539(table.data,at).value;
				};
				#line 164 f1__ //BinaryOp
				at = (at+1);
			};
		};
}
Texture& OpArray1540(Table2& table,str key){
		if(((table.length+(table.length/2))>table.capacity)){
			#line 146 f1__ //Call
			Resize1541(table);
		};
		i64 length=table.capacity;
		i64 hash=Hash128(key);
		i64 at=((hash%(length-1))+1);
		while(1){
			if((OpArray20546(table.data,at).hash==0)){
				#line 155 f1__ //BinaryOp
				OpArray21547(table.data,at).key = key;
				#line 156 f1__ //BinaryOp
				OpArray22548(table.data,at).hash = 1;
				return OpArray23549(table.data,at).value;
			}else{
				if(Equal127(key,OpArray24550(table.data,at).key)){
					return OpArray25551(table.data,at).value;
				};
				#line 164 f1__ //BinaryOp
				at = (at+1);
			};
		};
}
Texture& OpArray2552(Table2& table,str key){
		if(((table.length+(table.length/2))>table.capacity)){
			#line 146 f1__ //Call
			Resize2553(table);
		};
		i64 length=table.capacity;
		i64 hash=Hash128(key);
		i64 at=((hash%(length-1))+1);
		while(1){
			if((OpArray29558(table.data,at).hash==0)){
				#line 155 f1__ //BinaryOp
				OpArray30559(table.data,at).key = key;
				#line 156 f1__ //BinaryOp
				OpArray31560(table.data,at).hash = 1;
				return OpArray32561(table.data,at).value;
			}else{
				if(Equal127(key,OpArray33562(table.data,at).key)){
					return OpArray34563(table.data,at).value;
				};
				#line 164 f1__ //BinaryOp
				at = (at+1);
			};
		};
}
Shader& OpArray3577(Table1& table,str key){
		if(((table.length+(table.length/2))>table.capacity)){
			#line 146 f1__ //Call
			Resize3578(table);
		};
		i64 length=table.capacity;
		i64 hash=Hash128(key);
		i64 at=((hash%(length-1))+1);
		while(1){
			if((OpArray38583(table.data,at).hash==0)){
				#line 155 f1__ //BinaryOp
				OpArray39584(table.data,at).key = key;
				#line 156 f1__ //BinaryOp
				OpArray40585(table.data,at).hash = 1;
				return OpArray41586(table.data,at).value;
			}else{
				if(Equal127(key,OpArray42587(table.data,at).key)){
					return OpArray43588(table.data,at).value;
				};
				#line 164 f1__ //BinaryOp
				at = (at+1);
			};
		};
}
Shader& OpArray4589(Table1& table,str key){
		if(((table.length+(table.length/2))>table.capacity)){
			#line 146 f1__ //Call
			Resize4590(table);
		};
		i64 length=table.capacity;
		i64 hash=Hash128(key);
		i64 at=((hash%(length-1))+1);
		while(1){
			if((OpArray47595(table.data,at).hash==0)){
				#line 155 f1__ //BinaryOp
				OpArray48596(table.data,at).key = key;
				#line 156 f1__ //BinaryOp
				OpArray49597(table.data,at).hash = 1;
				return OpArray50598(table.data,at).value;
			}else{
				if(Equal127(key,OpArray51599(table.data,at).key)){
					return OpArray52600(table.data,at).value;
				};
				#line 164 f1__ //BinaryOp
				at = (at+1);
			};
		};
}
Shader& OpArray5601(Table1& table,str key){
		if(((table.length+(table.length/2))>table.capacity)){
			#line 146 f1__ //Call
			Resize5602(table);
		};
		i64 length=table.capacity;
		i64 hash=Hash128(key);
		i64 at=((hash%(length-1))+1);
		while(1){
			if((OpArray56607(table.data,at).hash==0)){
				#line 155 f1__ //BinaryOp
				OpArray57608(table.data,at).key = key;
				#line 156 f1__ //BinaryOp
				OpArray58609(table.data,at).hash = 1;
				return OpArray59610(table.data,at).value;
			}else{
				if(Equal127(key,OpArray60611(table.data,at).key)){
					return OpArray61612(table.data,at).value;
				};
				#line 164 f1__ //BinaryOp
				at = (at+1);
			};
		};
}
			;
	;
		void Print120(str string){
		for(i64 it = (i64)0; it<string.length;it++){
			#line 27 f2__ //Call
			putchar((i32)(*(string.chars+it)));
		};
}
	void Println121(str string){
		#line 32 f2__ //Call
		Print120(add123(string,str{1,(i8*)"\n"}));
}
	void Error122(str string){
		#line 37 f2__ //Call
		Print120(add123(add123(str{6,(i8*)"\33[31m"},string),str{1,(i8*)"\n"}));
		#line 38 f2__ //Call
		Print120(str{5,(i8*)"\33[0m"});
}
	str add123(str a,str b){
		str v={0};
		#line 45 f2__ //BinaryOp
		v.chars = Alloc0470(((a.length+b.length)+1));
		#line 46 f2__ //Call
		CopyPtr0471(a.chars,v.chars,a.length);
		#line 47 f2__ //Call
		CopyPtr1472(b.chars,(v.chars+a.length),b.length);
		#line 49 f2__ //BinaryOp
		v.length = (a.length+b.length);
		#line 50 f2__ //BinaryOp
		(*(v.chars+v.length)) = 0;
		#line 51 f2__ //Return
		return v;
}
	str String124(i8* chars,i64 length){
		str string={0};
		#line 57 f2__ //BinaryOp
		string.chars = chars;
		#line 58 f2__ //BinaryOp
		string.length = length;
		#line 59 f2__ //Return
		return string;
}
	str String125(i64 number){
		#line 64 f2__ //If
		if((number==0)){
			#line 65 f2__ //Return
			return str{1,(i8*)"0"};
		};
		i8 negative=0;
		#line 69 f2__ //If
		if((number<0)){
			#line 70 f2__ //BinaryOp
			negative = 1;
			#line 71 f2__ //BinaryOp
			number = (0-number);
		};
		i64 n=number;
		i64 count=0;
		while(n){
			#line 77 f2__ //BinaryOp
			n = (n/10);
			#line 78 f2__ //BinaryOp
			count = (count+1);
		};
		Array5 characters={0};
		#line 82 f2__ //Call
		Init0474(characters,(count+1));
		i64 i={0};
		while(number){
			#line 86 f2__ //BinaryOp
			OpArray0476(characters,((count-i)-1)) = i8321(((number%10)+48));
			#line 87 f2__ //BinaryOp
			number = (number/10);
			#line 88 f2__ //BinaryOp
			i = (i+1);
		};
		#line 91 f2__ //BinaryOp
		OpArray1480(characters,count) = 0;
		str r={0};
		#line 93 f2__ //BinaryOp
		r.length = count;
		#line 94 f2__ //BinaryOp
		r.chars = characters.elements;
		#line 96 f2__ //If
		if(negative){
			#line 97 f2__ //Return
			return add123(str{1,(i8*)"-"},r);
		};
		#line 99 f2__ //Return
		return r;
}
	str String126(f32 number){
		i64 top=i64306(number);
		f32 fnumber=number;
		#line 106 f2__ //If
		if((top<0)){
			#line 107 f2__ //BinaryOp
			fnumber = (0.0-fnumber);
		};
		i64 bottom=i64306(((fnumber-f32353(i64306(fnumber)))*1000));
		str r=String125(top);
		#line 112 f2__ //If
		if(bottom){
			#line 113 f2__ //BinaryOp
			r = add123(add123(r,str{1,(i8*)"."}),String125(bottom));
		};
		#line 115 f2__ //Return
		return r;
}
	i64 Equal127(str l,str r){
		#line 120 f2__ //If
		if((l.length!=r.length)){
			#line 122 f2__ //Return
			return 0;
		};
		for(i64 it = i64300(0); it<l.length;it++){
			i8 ll=(*(l.chars+it));
			i8 rr=(*(r.chars+it));
			#line 129 f2__ //If
			if((i64303(ll)!=i64303(rr))){
				#line 131 f2__ //Return
				return 0;
			};
		};
		#line 134 f2__ //Return
		return 1;
}
	i64 Hash128(str string){
		i64 hash=5381;
		for(i64 it = i64300(0); it<string.length;it++){
			#line 142 f2__ //BinaryOp
			hash = (((hash+5)+hash)+i64303((*(string.chars+it))));
		};
		#line 144 f2__ //Return
		return hash;
}
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
														;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
																																																		str String191(Vec4 v){
		#line 30 f5__ //Return
		return add123(add123(add123(add123(add123(add123(add123(add123(str{1,(i8*)"("},String126(v.x)),str{1,(i8*)","}),String126(v.y)),str{1,(i8*)","}),String126(v.z)),str{1,(i8*)","}),String126(v.w)),str{1,(i8*)")"});
}
	str String192(Vec3 v){
		#line 34 f5__ //Return
		return add123(add123(add123(add123(add123(add123(str{1,(i8*)"("},String126(v.x)),str{1,(i8*)","}),String126(v.y)),str{1,(i8*)","}),String126(v.z)),str{1,(i8*)")"});
}
	str String193(Vec2 v){
		#line 38 f5__ //Return
		return add123(add123(add123(add123(str{1,(i8*)"("},String126(v.x)),str{1,(i8*)","}),String126(v.y)),str{1,(i8*)")"});
}
	Vec4& OpArray194(Mat4& matrix,i64 index){
		#line 42 f5__ //Return
		return (*((Vec4*)(&matrix)+index));
}
	f32& OpArray195(Vec4& v,i64 index){
		#line 46 f5__ //Return
		return (*((f32*)(&v)+index));
}
	Mat4 Mat4196(f32 v){
		Mat4 r={0};
		#line 51 f5__ //BinaryOp
		r.x = Vec4200(v,0,0,0);
		#line 52 f5__ //BinaryOp
		r.y = Vec4200(0,v,0,0);
		#line 53 f5__ //BinaryOp
		r.z = Vec4200(0,0,v,0);
		#line 54 f5__ //BinaryOp
		r.w = Vec4200(0,0,0,1);
		#line 55 f5__ //Return
		return r;
}
	Mat4 Mat4Scale197(Vec3 scale){
		Mat4 r={0};
		#line 60 f5__ //BinaryOp
		r.x = Vec4200(scale.x,0,0,0);
		#line 61 f5__ //BinaryOp
		r.y = Vec4200(0,scale.y,0,0);
		#line 62 f5__ //BinaryOp
		r.z = Vec4200(0,0,scale.z,0);
		#line 63 f5__ //BinaryOp
		r.w = Vec4200(0,0,0,1);
		#line 64 f5__ //Return
		return r;
}
	Mat4 Mat4Transform198(Vec3 v){
		Mat4 r={0};
		#line 69 f5__ //BinaryOp
		r.x = Vec4200(1,0,0,0);
		#line 70 f5__ //BinaryOp
		r.y = Vec4200(0,1,0,0);
		#line 71 f5__ //BinaryOp
		r.z = Vec4200(0,0,1,0);
		#line 72 f5__ //BinaryOp
		r.w = Vec4200(v.x,v.y,v.z,1);
		#line 73 f5__ //Return
		return r;
}
	Mat4 mul199(Mat4 lhs,Mat4 rhs){
		Mat4 v={0};
		i64 r={0};
		while((r<4)){
			i64 c={0};
			while((c<4)){
				i64 k={0};
				#line 85 f5__ //BinaryOp
				OpArray195(OpArray194(v,c),r) = 0;
				while((k<4)){
					#line 88 f5__ //BinaryOp
					OpArray195(OpArray194(v,c),r) = (OpArray195(OpArray194(v,c),r)+(OpArray195(OpArray194(lhs,k),r)*OpArray195(OpArray194(rhs,c),k)));
					#line 89 f5__ //BinaryOp
					k = (k+1);
				};
				#line 91 f5__ //BinaryOp
				c = (c+1);
			};
			#line 93 f5__ //BinaryOp
			r = (r+1);
		};
		#line 95 f5__ //Return
		return v;
}
	Vec4 Vec4200(f32 x,f32 y,f32 z,f32 w){
		Vec4 v={0};
		#line 100 f5__ //BinaryOp
		v.x = x;
		#line 101 f5__ //BinaryOp
		v.y = y;
		#line 102 f5__ //BinaryOp
		v.z = z;
		#line 103 f5__ //BinaryOp
		v.w = w;
		#line 104 f5__ //Return
		return v;
}
	Vec4 Vec4201(Vec3 v,f32 w){
		Vec4 r={0};
		#line 108 f5__ //BinaryOp
		r.x = v.x;
		#line 109 f5__ //BinaryOp
		r.y = v.y;
		#line 110 f5__ //BinaryOp
		r.z = v.z;
		#line 111 f5__ //BinaryOp
		r.w = w;
		#line 112 f5__ //Return
		return r;
}
	Vec4 Vec4202(f32 v){
		#line 115 f5__ //Return
		return Vec4200(v,v,v,v);
}
	Vec3 Vec3203(f32 x,f32 y,f32 z){
		Vec3 v={0};
		#line 119 f5__ //BinaryOp
		v.x = x;
		#line 120 f5__ //BinaryOp
		v.y = y;
		#line 121 f5__ //BinaryOp
		v.z = z;
		#line 122 f5__ //Return
		return v;
}
	Vec3 Vec3204(f32 value){
		Vec3 v={0};
		#line 127 f5__ //BinaryOp
		v.x = value;
		#line 128 f5__ //BinaryOp
		v.y = value;
		#line 129 f5__ //BinaryOp
		v.z = value;
		#line 130 f5__ //Return
		return v;
}
	Vec3 Vec3205(Vec2 v){
		Vec3 r={0};
		#line 135 f5__ //BinaryOp
		r.x = v.x;
		#line 136 f5__ //BinaryOp
		r.y = v.y;
		#line 137 f5__ //BinaryOp
		r.z = 0;
		#line 138 f5__ //Return
		return r;
}
	Vec2 Vec2206(Vec3 v){
		Vec2 r={0};
		#line 143 f5__ //BinaryOp
		r.x = v.x;
		#line 144 f5__ //BinaryOp
		r.y = v.y;
		#line 145 f5__ //Return
		return r;
}
	Vec2 Vec2207(f32 x,f32 y){
		Vec2 v={0};
		#line 149 f5__ //BinaryOp
		v.x = x;
		#line 150 f5__ //BinaryOp
		v.y = y;
		#line 151 f5__ //Return
		return v;
}
	Vec2 Vec2208(f32 v){
		#line 156 f5__ //Return
		return Vec2207(v,v);
}
	Vec3 sub209(Vec3 lhs,Vec3 rhs){
		Vec3 v={0};
		#line 160 f5__ //BinaryOp
		v.x = (lhs.x-rhs.x);
		#line 161 f5__ //BinaryOp
		v.y = (lhs.y-rhs.y);
		#line 162 f5__ //BinaryOp
		v.z = (lhs.z-rhs.z);
		#line 163 f5__ //Return
		return v;
}
	Vec3 sub210(Vec3 lhs,Vec2 rhs){
		Vec3 v={0};
		#line 167 f5__ //BinaryOp
		v.x = (lhs.x-rhs.x);
		#line 168 f5__ //BinaryOp
		v.y = (lhs.y-rhs.y);
		#line 169 f5__ //BinaryOp
		v.z = lhs.z;
		#line 170 f5__ //Return
		return v;
}
	Vec2 sub211(Vec2 lhs,Vec2 rhs){
		Vec2 v={0};
		#line 174 f5__ //BinaryOp
		v.x = (lhs.x-rhs.x);
		#line 175 f5__ //BinaryOp
		v.y = (lhs.y-rhs.y);
		#line 176 f5__ //Return
		return v;
}
	Vec3 add212(Vec3 lhs,Vec3 rhs){
		Vec3 v={0};
		#line 180 f5__ //BinaryOp
		v.x = (lhs.x+rhs.x);
		#line 181 f5__ //BinaryOp
		v.y = (lhs.y+rhs.y);
		#line 182 f5__ //BinaryOp
		v.z = (lhs.z+rhs.z);
		#line 183 f5__ //Return
		return v;
}
	Vec3 add213(Vec3 lhs,Vec2 rhs){
		Vec3 v={0};
		#line 187 f5__ //BinaryOp
		v.x = (lhs.x+rhs.x);
		#line 188 f5__ //BinaryOp
		v.y = (lhs.y+rhs.y);
		#line 189 f5__ //BinaryOp
		v.z = lhs.z;
		#line 190 f5__ //Return
		return v;
}
	Vec2 add214(Vec2 lhs,Vec2 rhs){
		Vec2 v={0};
		#line 194 f5__ //BinaryOp
		v.x = (lhs.x+rhs.x);
		#line 195 f5__ //BinaryOp
		v.y = (lhs.y+rhs.y);
		#line 196 f5__ //Return
		return v;
}
	Vec3 mul215(Vec3 lhs,Vec3 rhs){
		Vec3 v={0};
		#line 200 f5__ //BinaryOp
		v.x = (lhs.x*rhs.x);
		#line 201 f5__ //BinaryOp
		v.y = (lhs.y*rhs.y);
		#line 202 f5__ //BinaryOp
		v.z = (lhs.z*rhs.z);
		#line 203 f5__ //Return
		return v;
}
	Vec4 mul216(f32 l,Vec4 r){
		#line 206 f5__ //Return
		return mul217(r,l);
}
	Vec4 mul217(Vec4 l,f32 r){
		Vec4 v={0};
		#line 209 f5__ //BinaryOp
		v.x = (l.x*r);
		#line 210 f5__ //BinaryOp
		v.y = (l.y*r);
		#line 211 f5__ //BinaryOp
		v.z = (l.z*r);
		#line 212 f5__ //BinaryOp
		v.w = (l.w*r);
		#line 213 f5__ //Return
		return v;
}
	Vec3 mul218(f32 l,Vec3 r){
		#line 215 f5__ //Return
		return mul219(r,l);
}
	Vec3 mul219(Vec3 l,f32 r){
		Vec3 v={0};
		#line 218 f5__ //BinaryOp
		v.x = (l.x*r);
		#line 219 f5__ //BinaryOp
		v.y = (l.y*r);
		#line 220 f5__ //BinaryOp
		v.z = (l.z*r);
		#line 221 f5__ //Return
		return v;
}
	Vec2 mul220(f32 l,Vec2 r){
		#line 224 f5__ //Return
		return mul221(r,l);
}
	Vec2 mul221(Vec2 l,f32 r){
		Vec2 v={0};
		#line 227 f5__ //BinaryOp
		v.x = (l.x*r);
		#line 228 f5__ //BinaryOp
		v.y = (l.y*r);
		#line 229 f5__ //Return
		return v;
}
	Vec2 div222(Vec2 l,f32 r){
		#line 233 f5__ //Return
		return mul221(l,(1.0/r));
}
	Vec3 div223(Vec3 l,f32 r){
		#line 236 f5__ //Return
		return mul219(l,(1.0/r));
}
	Vec4 div224(Vec4 l,f32 r){
		#line 239 f5__ //Return
		return mul217(l,(1.0/r));
}
	f32 Dot225(Vec3 l,Vec3 r){
		#line 244 f5__ //Return
		return (((l.x*r.x)+(l.y*r.y))+(l.z*r.z));
}
	f32 Dot226(Vec2 l,Vec2 r){
		#line 248 f5__ //Return
		return ((l.x*r.x)+(l.y*r.y));
}
	Vec3 Cross227(Vec3 l,Vec3 r){
		#line 252 f5__ //Return
		return Vec3203(((l.y*r.z)-(l.z*r.y)),((l.z*r.x)-(l.x*r.z)),((l.x*r.y)-(l.y*r.x)));
}
	f32 Length228(Vec3 v){
		#line 257 f5__ //Return
		return sqrt369((((v.x*v.x)+(v.y*v.y))+(v.z*v.z)));
}
	f32 Length229(Vec2 v){
		#line 261 f5__ //Return
		return sqrt369(((v.x*v.x)+(v.y*v.y)));
}
	Vec3 Normalize230(Vec3 v){
		#line 266 f5__ //Return
		return div223(mul219(v,1.0),Length228(v));
}
	Vec2 Normalize231(Vec2 v){
		#line 270 f5__ //Return
		return div222(mul221(v,1.0),Length229(v));
}
			;
	void Init234(World& world){
		i64 size=1000;
		#line 27 f6__ //Call
		Init0467(world.components,size);
		#line 28 f6__ //Call
		Init2487(world.entities,size);
		#line 29 f6__ //Call
		Init3489(world.transforms,size);
		#line 30 f6__ //Call
		Init4491(world.sprites,size);
		#line 31 f6__ //BinaryOp
		world.count = 1;
}
	i64 Bits235(){
		#line 35 f6__ //Return
		return (1<<0);
}
	i64 Bits236(){
		#line 39 f6__ //Return
		return (1<<1);
}
	Array3& Components237(){
		#line 44 f6__ //Return
		return world.transforms;
}
	Array4& Components238(){
		#line 47 f6__ //Return
		return world.sprites;
}
		i8 Retrieve0671(i64 i,Transform*& a,Sprite*& b){
		if(((Bits235()|Bits236())&OpArray24672(world.components,i))){
			#line 64 f6__ //BinaryOp
			a = (&OpArray25673(Components237(),i));
			#line 65 f6__ //BinaryOp
			b = (&OpArray26674(Components238(),i));
			return true;
		};
		return false;
}
		Sprite& AddComponent0514(Entity entity){
		#line 82 f6__ //BinaryOp
		OpArray3515(world.components,entity.id) = (OpArray4516(world.components,entity.id)|Bits236());
		return OpArray5517(Components238(),entity.id);
}
Transform& AddComponent1618(Entity entity){
		#line 82 f6__ //BinaryOp
		OpArray20619(world.components,entity.id) = (OpArray21620(world.components,entity.id)|Bits235());
		return OpArray22621(Components237(),entity.id);
}
	Entity CreateEntity243(){
		Entity entity={0};
		#line 89 f6__ //BinaryOp
		entity.id = world.count;
		#line 90 f6__ //BinaryOp
		OpArray2512(world.components,entity.id) = 0;
		#line 91 f6__ //BinaryOp
		world.count = (world.count+1);
		#line 92 f6__ //Return
		return entity;
}
			RenderTarget RenderTarget246(){
		RenderTarget target={0};
		#line 30 f7__ //BinaryOp
		target.position = Vec2207(0,0);
		#line 31 f7__ //BinaryOp
		target.size = Vec2207(1,1);
		#line 32 f7__ //BinaryOp
		target.framebuffer = 0;
		#line 33 f7__ //Return
		return target;
}
	void GenerateFrameBuffer247(RenderTarget& target,DynamicArray2& textures){
		#line 37 f7__ //If
		if((textures.length!=0)){
			#line 39 f7__ //Call
			Println121(String125(textures.length));
			#line 40 f7__ //Call
			Print120(str{26,(i8*)"Frame buffer with textures"});
			#line 41 f7__ //Call
			glGenFramebuffers(1,(&target.framebuffer));
			#line 42 f7__ //Call
			glBindFramebuffer(GL_FRAMEBUFFER,target.framebuffer);
			Array8 drawBuffers={0};
			#line 45 f7__ //Call
			Init6642(drawBuffers,textures.length);
			#line 46 f7__ //BinaryOp
			target.size = OpArray71644(textures,0)->size;
			for(i64 it = i64300(0); it<textures.length;it++){
				#line 51 f7__ //Call
				glFramebufferTexture2D(GL_FRAMEBUFFER,(u32337(it)+GL_COLOR_ATTACHMENT0),GL_TEXTURE_2D,OpArray72645(textures,it)->id,0);
				#line 52 f7__ //BinaryOp
				OpArray23646(drawBuffers,it) = (GL_COLOR_ATTACHMENT0+u32337(it));
			};
			#line 54 f7__ //Call
			glDrawBuffers(i32313(drawBuffers.length),drawBuffers.elements);
			u32 status=glCheckFramebufferStatus(GL_FRAMEBUFFER);
			#line 57 f7__ //If
			if((status!=GL_FRAMEBUFFER_COMPLETE)){
				#line 58 f7__ //Call
				Error122(str{24,(i8*)"Error: Framebuffer error"});
			};
		};
}
	void Bind248(RenderTarget target,Window window){
		#line 65 f7__ //If
		if(target.framebuffer){
			#line 66 f7__ //Call
			glViewport(0,0,i32314(target.size.x),i32314(target.size.y));
		}else{
			#line 69 f7__ //Call
			glViewport(0,0,i32314(window.size.x),i32314(window.size.y));
		};
		#line 71 f7__ //Call
		glBindFramebuffer(GL_FRAMEBUFFER,target.framebuffer);
}
	void BindScreen249(){
		#line 75 f7__ //Call
		glBindFramebuffer(GL_FRAMEBUFFER,0);
}
		ShadingPass ShadingPass251(){
		ShadingPass pass={0};
		#line 91 f7__ //BinaryOp
		pass.render = 1;
		#line 92 f7__ //BinaryOp
		pass.target = RenderTarget246();
		#line 93 f7__ //BinaryOp
		pass.clear = 0;
		#line 94 f7__ //Call
		Init6633(pass.in);
		#line 95 f7__ //Call
		Init7634(pass.out);
		#line 96 f7__ //Return
		return pass;
}
	ShadingPass PostProcess252(Sprite& sprite){
		ShadingPass pass=ShadingPass251();
		#line 102 f7__ //BinaryOp
		pass.render = 0;
		#line 103 f7__ //BinaryOp
		pass.sprite = sprite;
		#line 104 f7__ //Return
		return pass;
}
	void Refresh253(ShadingPass& pass){
		#line 109 f7__ //Call
		GenerateFrameBuffer247(pass.target,pass.out);
}
		Shader Shader255(Renderer& renderer,str vs,str fs){
		#line 121 f7__ //If
		if((!OpArray3577(renderer.shaders,add123(vs,fs)).id)){
			#line 123 f7__ //BinaryOp
			OpArray4589(renderer.shaders,add123(vs,fs)) = Shader429(vs,fs);
		};
		#line 125 f7__ //Return
		return OpArray5601(renderer.shaders,add123(vs,fs));
}
	Texture Texture256(Renderer& renderer,str file){
		#line 130 f7__ //If
		if((!OpArray0528(renderer.textures,file).id)){
			#line 132 f7__ //BinaryOp
			OpArray1540(renderer.textures,file) = Texture402(file);
		};
		#line 134 f7__ //Return
		return OpArray2552(renderer.textures,file);
}
	Renderer Renderer257(){
		Renderer renderer={0};
		#line 140 f7__ //Call
		Init3626(renderer.passes);
		#line 141 f7__ //Call
		Init0627(renderer.shaders);
		#line 142 f7__ //Call
		Init1630(renderer.textures);
		#line 143 f7__ //Return
		return renderer;
}
	void Draw258(Sprite& sprite,Transform& transform){
		#line 148 f7__ //Call
		Bind378(sprite.material);
		#line 149 f7__ //Call
		GLError430(str{13,(i8*)"1 Bind Error\n"});
		i32 loc=glGetUniformLocation(sprite.material.shader.id,str{8,(i8*)"texture0"}.chars);
		#line 152 f7__ //Call
		glProgramUniform1i(sprite.material.shader.id,loc,0);
		#line 154 f7__ //Call
		glBindVertexArray(sprite.vao);
		#line 155 f7__ //Call
		glDrawElements(GL_TRIANGLES,6,GL_UNSIGNED_SHORT,(voidptr)0);
		#line 156 f7__ //Call
		GLError430(str{10,(i8*)"Draw Error"});
}
			u32 InterfaceBinding261(){
		#line 184 f7__ //Return
		return 0;
}
	u32 InterfaceBinding262(){
		#line 188 f7__ //Return
		return 1;
}
	Buffer CreateInterfaceBlock0662(CameraBlock block,i64 count){
		return Buffer392(BufferInterface,(i64301(typeinfo14.size)*count));
}
Buffer CreateInterfaceBlock1670(TransformBlock block,i64 count){
		return Buffer392(BufferInterface,(i64301(typeinfo15.size)*count));
}
	void LoadInterfaceBlock0663(Buffer buffer,CameraBlock block){
		#line 198 f7__ //Call
		glBindBufferBase(GL_UNIFORM_BUFFER,InterfaceBinding261(),buffer.id);
		#line 199 f7__ //Call
		glBufferData(buffer.buffertype,i64301(typeinfo14.size),(voidptr)(&block),GL_DYNAMIC_DRAW);
}
void LoadInterfaceBlock1675(Buffer buffer,TransformBlock block){
		#line 198 f7__ //Call
		glBindBufferBase(GL_UNIFORM_BUFFER,InterfaceBinding262(),buffer.id);
		#line 199 f7__ //Call
		glBufferData(buffer.buffertype,i64301(typeinfo15.size),(voidptr)(&block),GL_DYNAMIC_DRAW);
}
	void Draw265(Renderer& renderer,World& world){
		TransformBlock transformBlock={0};
		Buffer blockBuffer=CreateInterfaceBlock1670(transformBlock,1);
		for(i64 it = i64300(0); it<world.count;it++){
			Transform* transform={0};
			Sprite* sprite={0};
			#line 212 f7__ //If
			if(Retrieve0671(it,transform,sprite)){
				#line 213 f7__ //BinaryOp
				transformBlock.matrix = transform->matrix;
				#line 214 f7__ //Call
				LoadInterfaceBlock1675(blockBuffer,transformBlock);
				#line 215 f7__ //Call
				Draw258((*sprite),(*transform));
			};
		};
}
	void Render266(Renderer& renderer,World& world,Camera camera,Window window){
		CameraBlock cameraBlock={0};
		Buffer cameraBuffer=CreateInterfaceBlock0662(cameraBlock,1);
		#line 225 f7__ //BinaryOp
		cameraBlock.viewProjection = camera.viewProjection;
		#line 226 f7__ //BinaryOp
		cameraBlock.windowSize = Vec2207(window.size.x,window.size.y);
		#line 227 f7__ //BinaryOp
		cameraBlock.pixelSize = Vec2207((1.0/window.size.x),(1.0/window.size.y));
		#line 228 f7__ //BinaryOp
		cameraBlock.time = window.time;
		#line 229 f7__ //Call
		LoadInterfaceBlock0663(cameraBuffer,cameraBlock);
		for(i64 it = i64300(0); it<renderer.passes.length;it++){
			#line 233 f7__ //Call
			Bind248(OpArray73664(renderer.passes,it).target,window);
			u32 j={0};
			while((i64301(j)<OpArray74665(renderer.passes,it).in.length)){
				#line 237 f7__ //Call
				glActiveTexture(((GL_TEXTURE0+10)+j));
				#line 238 f7__ //Call
				glBindTexture(GL_TEXTURE_2D,OpArray76667(OpArray75666(renderer.passes,it).in,i64301(j))->id);
				#line 239 f7__ //BinaryOp
				j = (j+1);
			};
			#line 242 f7__ //Call
			glActiveTexture(GL_TEXTURE0);
			#line 244 f7__ //If
			if(OpArray77668(renderer.passes,it).clear){
				#line 245 f7__ //Call
				glClear(GL_COLOR_BUFFER_BIT);
			};
			#line 247 f7__ //If
			if(OpArray78669(renderer.passes,it).render){
				#line 248 f7__ //Call
				Draw265(renderer,world);
			}else{
				#line 252 f7__ //Call
				Bind378(OpArray79676(renderer.passes,it).sprite.material);
				#line 254 f7__ //Call
				glBindVertexArray(OpArray80677(renderer.passes,it).sprite.vao);
				#line 255 f7__ //Call
				glDrawElements(GL_TRIANGLES,6,GL_UNSIGNED_SHORT,(voidptr)0);
				#line 256 f7__ //Call
				GLError430(str{10,(i8*)"Pass error"});
			};
		};
}
	;
	;
	;
	;
	;
		Archive Archive268(){
		Archive self={0};
		#line 28 f8__ //Call
		Init0493(self.array);
		#line 29 f8__ //BinaryOp
		self.Type = ArchiveNone;
		#line 30 f8__ //BinaryOp
		self.id = str{0,(i8*)""};
		#line 31 f8__ //BinaryOp
		self.string = str{0,(i8*)""};
		#line 32 f8__ //Return
		return self;
}
	void Load269(Archive self,Vec4& v){
		#line 36 f8__ //BinaryOp
		v.x = f32355(OpArray62613(self.array,0).number);
		#line 37 f8__ //BinaryOp
		v.y = f32355(OpArray63614(self.array,1).number);
		#line 38 f8__ //BinaryOp
		v.z = f32355(OpArray64615(self.array,2).number);
		#line 39 f8__ //BinaryOp
		v.w = f32355(OpArray65616(self.array,3).number);
}
	void Load270(Archive self,Vec3& v){
		#line 42 f8__ //BinaryOp
		v.x = f32355(OpArray67622(self.array,0).number);
		#line 43 f8__ //BinaryOp
		v.y = f32355(OpArray68623(self.array,1).number);
		#line 44 f8__ //BinaryOp
		v.z = f32355(OpArray69624(self.array,2).number);
}
	void Save271(Archive& self,u64 v){
		#line 47 f8__ //BinaryOp
		self.Type = ArchiveNumber;
		#line 48 f8__ //BinaryOp
		self.number = f64358(v);
}
	void Save272(Archive& self,i64 v){
		#line 51 f8__ //BinaryOp
		self.Type = ArchiveNumber;
		#line 52 f8__ //BinaryOp
		self.number = f64361(v);
}
	void Save273(Archive& self,f64 v){
		#line 55 f8__ //BinaryOp
		self.Type = ArchiveNumber;
		#line 56 f8__ //BinaryOp
		self.number = v;
}
	void Save274(Archive& self,f32 v){
		#line 59 f8__ //BinaryOp
		self.Type = ArchiveNumber;
		#line 60 f8__ //BinaryOp
		self.number = f64362(v);
}
	void Save275(Archive& self,str string){
		#line 63 f8__ //BinaryOp
		self.Type = ArchiveString;
		#line 64 f8__ //BinaryOp
		self.string = string;
}
	void Save276(Archive& self,Vec4 v){
		#line 68 f8__ //BinaryOp
		self.Type = ArchiveArray;
		#line 69 f8__ //Call
		Resize8678(self.array,4);
		#line 70 f8__ //Call
		Save274(OpArray81679(self.array,0),v.x);
		#line 71 f8__ //Call
		Save274(OpArray82680(self.array,1),v.y);
		#line 72 f8__ //Call
		Save274(OpArray83681(self.array,2),v.z);
		#line 73 f8__ //Call
		Save274(OpArray84682(self.array,3),v.w);
}
	void Save277(Archive& self,Vec3 v){
		#line 77 f8__ //BinaryOp
		self.Type = ArchiveArray;
		#line 78 f8__ //Call
		Resize9683(self.array,3);
		#line 79 f8__ //Call
		Save274(OpArray85684(self.array,0),v.x);
		#line 80 f8__ //Call
		Save274(OpArray86685(self.array,1),v.y);
		#line 81 f8__ //Call
		Save274(OpArray87686(self.array,2),v.z);
}
	void Save278(Archive& self,Vec2 v){
		#line 85 f8__ //BinaryOp
		self.Type = ArchiveArray;
		#line 86 f8__ //Call
		Resize10687(self.array,2);
		#line 87 f8__ //Call
		Save274(OpArray88688(self.array,0),v.x);
		#line 88 f8__ //Call
		Save274(OpArray89689(self.array,1),v.y);
}
	Archive& OpArray279(Archive& self,str field){
		for(i64 it = i64300(0); it<self.array.length;it++){
			#line 94 f8__ //If
			if(Equal127(OpArray0469(self.array,it).id,field)){
				#line 95 f8__ //Return
				return OpArray4481(self.array,it);
			};
		};
		#line 98 f8__ //Call
		Push0482(self.array,Archive268());
		#line 99 f8__ //BinaryOp
		OpArray5485(self.array,(self.array.length-1)).id = field;
		#line 100 f8__ //Return
		return OpArray6486(self.array,(self.array.length-1));
}
	void Save280(Archive& self,Transform transform){
		#line 105 f8__ //BinaryOp
		self.Type = ArchiveTable;
		#line 106 f8__ //Call
		Save277(OpArray279(self,str{8,(i8*)"Position"}),Position386(transform));
		#line 107 f8__ //Call
		Save277(OpArray279(self,str{5,(i8*)"Scale"}),Scale384(transform));
}
	void Save281(Archive& self,Sprite sprite){
		#line 112 f8__ //BinaryOp
		self.Type = ArchiveTable;
		#line 113 f8__ //Call
		Save275(OpArray279(self,str{7,(i8*)"Texture"}),sprite.material.texture.file);
		#line 114 f8__ //Call
		Save275(OpArray279(self,str{6,(i8*)"Vertex"}),sprite.material.shader.vs);
		#line 115 f8__ //Call
		Save275(OpArray279(self,str{8,(i8*)"Fragment"}),sprite.material.shader.fs);
		#line 116 f8__ //Call
		Save276(OpArray279(self,str{5,(i8*)"Color"}),sprite.color);
}
	void PrintDepth282(i64 depth){
		for(i64 it = i64300(0); it<depth;it++){
			#line 123 f8__ //Call
			Print120(str{1,(i8*)"\t"});
		};
}
	void WriteDepth283(File* file,i64 depth){
		for(i64 it = i64300(0); it<depth;it++){
			#line 131 f8__ //Call
			Write285(file,str{1,(i8*)"\t"});
		};
}
	void Print284(Archive& self,i64& depth){
		#line 137 f8__ //If
		if((self.Type==ArchiveArray)){
			for(i64 it = i64300(0); it<self.array.length;it++){
				#line 141 f8__ //Call
				Print284(OpArray0477(self.array,it),depth);
				#line 142 f8__ //Call
				Print120(str{1,(i8*)" "});
			};
		};
		#line 145 f8__ //If
		if((self.Type==ArchiveTable)){
			#line 147 f8__ //BinaryOp
			depth = (depth+1);
			for(i64 it = i64300(0); it<self.array.length;it++){
				#line 151 f8__ //Call
				PrintDepth282(depth);
				#line 152 f8__ //Call
				Print120(OpArray1478(self.array,it).id);
				#line 153 f8__ //Call
				Print120(str{1,(i8*)" "});
				#line 154 f8__ //Call
				Print284(OpArray2479(self.array,it),depth);
				#line 155 f8__ //Call
				Print120(str{1,(i8*)"\n"});
			};
			#line 157 f8__ //If
			if((depth>0)){
				#line 158 f8__ //Call
				PrintDepth282(depth);
				#line 159 f8__ //Call
				Print120(str{2,(i8*)"}\n"});
			};
			#line 161 f8__ //BinaryOp
			depth = (depth-1);
		};
		#line 163 f8__ //If
		if((self.Type==ArchiveString)){
			#line 165 f8__ //Call
			Print120(self.string);
		};
		#line 167 f8__ //If
		if((self.Type==ArchiveNumber)){
			#line 169 f8__ //Call
			Print120(String126(f32355(self.number)));
		};
		#line 171 f8__ //If
		if((self.Type==ArchiveNone)){
			#line 173 f8__ //Call
			Print120(str{3,(i8*)"nil"});
		};
}
	void Write285(File* file,str string){
		#line 179 f8__ //Call
		FileWrite((voidptr)string.chars,1,u64345(string.length),file);
}
	void ArchiveFile286(Archive& self,File* file,i64 depth){
		#line 183 f8__ //If
		if((self.Type==ArchiveArray)){
			#line 185 f8__ //Call
			Write285(file,str{1,(i8*)"("});
			for(i64 it = i64300(0); it<self.array.length;it++){
				#line 188 f8__ //Call
				ArchiveFile286(OpArray90690(self.array,it),file,depth);
				#line 189 f8__ //Call
				Write285(file,str{1,(i8*)" "});
			};
			#line 191 f8__ //Call
			Write285(file,str{1,(i8*)")"});
		};
		#line 193 f8__ //If
		if((self.Type==ArchiveTable)){
			#line 195 f8__ //BinaryOp
			depth = (depth+1);
			#line 197 f8__ //If
			if((depth>0)){
				#line 198 f8__ //Call
				Write285(file,str{2,(i8*)"{\n"});
			};
			for(i64 it = i64300(0); it<self.array.length;it++){
				#line 202 f8__ //Call
				WriteDepth283(file,depth);
				#line 203 f8__ //Call
				Write285(file,OpArray91691(self.array,it).id);
				#line 204 f8__ //Call
				Write285(file,str{1,(i8*)" "});
				#line 205 f8__ //Call
				ArchiveFile286(OpArray92692(self.array,it),file,depth);
				#line 206 f8__ //Call
				Write285(file,str{1,(i8*)"\n"});
			};
			#line 208 f8__ //BinaryOp
			depth = (depth-1);
			#line 210 f8__ //If
			if((depth>=0)){
				#line 211 f8__ //Call
				WriteDepth283(file,depth);
				#line 212 f8__ //Call
				Write285(file,str{1,(i8*)"}"});
			};
		};
		#line 215 f8__ //If
		if((self.Type==ArchiveString)){
			#line 217 f8__ //Call
			Write285(file,str{1,(i8*)"\'"});
			#line 218 f8__ //Call
			Write285(file,self.string);
			#line 219 f8__ //Call
			Write285(file,str{1,(i8*)"\'"});
		};
		#line 221 f8__ //If
		if((self.Type==ArchiveNumber)){
			#line 223 f8__ //Call
			Write285(file,String126(f32355(self.number)));
		};
		#line 225 f8__ //If
		if((self.Type==ArchiveNone)){
			#line 227 f8__ //Call
			Write285(file,str{3,(i8*)"nil"});
		};
}
	void ArchiveFile287(Archive& self,str file){
		File* f=FileOpen(file.chars,str{1,(i8*)"w"}.chars);
		#line 233 f8__ //Call
		ArchiveFile286(self,f,(-1));
}
	Archive Unarchive288(str file){
		Archive archive=Archive268();
		#line 238 f8__ //BinaryOp
		archive.Type = ArchiveTable;
		Lexer lexer=Lexer419(file);
		#line 240 f8__ //Call
		Unarchive289(archive,lexer);
		#line 241 f8__ //Return
		return archive;
}
	i8 Unarchive289(Archive& archive,Lexer& lexer){
		#line 245 f8__ //If
		if((archive.Type==ArchiveNone)){
			#line 247 f8__ //If
			if((lexer.token.Type==Char418(str{1,(i8*)"{"}))){
				#line 249 f8__ //Call
				Consume426(lexer);
				#line 251 f8__ //BinaryOp
				archive.Type = ArchiveTable;
				#line 252 f8__ //Call
				Unarchive289(archive,lexer);
				#line 254 f8__ //If
				if((lexer.token.Type!=Char418(str{1,(i8*)"}"}))){
					#line 256 f8__ //Call
					Print120(str{10,(i8*)"Expected }"});
				};
				#line 258 f8__ //Call
				Consume426(lexer);
				#line 259 f8__ //Return
				return true;
			};
			#line 261 f8__ //If
			if((lexer.token.Type==Char418(str{1,(i8*)"("}))){
				#line 263 f8__ //Call
				Consume426(lexer);
				#line 264 f8__ //BinaryOp
				archive.Type = ArchiveArray;
				#line 265 f8__ //Call
				Unarchive289(archive,lexer);
				#line 266 f8__ //If
				if((lexer.token.Type!=Char418(str{1,(i8*)")"}))){
					#line 268 f8__ //Call
					Print120(str{10,(i8*)"Expected )"});
				};
				#line 270 f8__ //Call
				Consume426(lexer);
				#line 271 f8__ //Return
				return true;
			};
			#line 273 f8__ //If
			if((lexer.token.Type==LexerNumber)){
				#line 275 f8__ //BinaryOp
				archive.Type = ArchiveNumber;
				#line 276 f8__ //BinaryOp
				archive.number = lexer.token.number;
				#line 277 f8__ //Call
				Consume426(lexer);
				#line 278 f8__ //Return
				return true;
			};
			#line 280 f8__ //If
			if((lexer.token.Type==LexerString)){
				#line 282 f8__ //BinaryOp
				archive.Type = ArchiveString;
				#line 283 f8__ //BinaryOp
				archive.string = lexer.token.string;
				#line 284 f8__ //Call
				Consume426(lexer);
				#line 285 f8__ //Return
				return true;
			};
			#line 287 f8__ //Return
			return false;
		}else{
			#line 289 f8__ //If
			if((archive.Type==ArchiveTable)){
				while((lexer.token.Type==LexerIdentifier)){
					Token t=lexer.token;
					#line 293 f8__ //Call
					Consume426(lexer);
					#line 294 f8__ //Call
					Unarchive289(OpArray279(archive,t.string),lexer);
				};
			}else{
				#line 297 f8__ //If
				if((archive.Type==ArchiveArray)){
					Archive a=Archive268();
					while(Unarchive289(a,lexer)){
						#line 301 f8__ //Call
						Push5509(archive.array,a);
						#line 302 f8__ //BinaryOp
						a = Archive268();
					};
				}else{
					#line 306 f8__ //Return
					return false;
				};
			};
		};
		#line 308 f8__ //Return
		return true;
}
						void Assert295(i8 condition,str reason){
		#line 19 f9__ //If
		if((!condition)){
			#line 20 f9__ //Call
			Println121(add123(str{10,(i8*)"Aborting: "},reason));
			#line 21 f9__ //Call
			abort();
		};
}
	void Assert296(i8 condition){
		#line 26 f9__ //If
		if((!condition)){
			#line 27 f9__ //Call
			abort();
		}else{
			#line 30 f9__ //Call
			Println121(str{11,(i8*)"Test passed"});
		};
}
	i8* Alloc0470(i64 len){
		u64 size=(u64)(typeinfo1.size*(u32)len);
		return (i8*)calloc(1,size);
}
i8* Alloc1475(i64 len){
		u64 size=(u64)(typeinfo1.size*(u32)len);
		return (i8*)calloc(1,size);
}
i64* Alloc0468(i64 len){
		u64 size=(u64)(typeinfo0.size*(u32)len);
		return (i64*)calloc(1,size);
}
Entity* Alloc3488(i64 len){
		u64 size=(u64)(typeinfo3.size*(u32)len);
		return (Entity*)calloc(1,size);
}
Transform* Alloc4490(i64 len){
		u64 size=(u64)(typeinfo4.size*(u32)len);
		return (Transform*)calloc(1,size);
}
Sprite* Alloc5492(i64 len){
		u64 size=(u64)(typeinfo5.size*(u32)len);
		return (Sprite*)calloc(1,size);
}
PositionTextureColor* Alloc6518(i64 len){
		u64 size=(u64)(typeinfo6.size*(u32)len);
		return (PositionTextureColor*)calloc(1,size);
}
u16* Alloc7519(i64 len){
		u64 size=(u64)(typeinfo7.size*(u32)len);
		return (u16*)calloc(1,size);
}
i8* Alloc8571(i64 len){
		u64 size=(u64)(typeinfo1.size*(u32)len);
		return (i8*)calloc(1,size);
}
i8* Alloc9572(i64 len){
		u64 size=(u64)(typeinfo1.size*(u32)len);
		return (i8*)calloc(1,size);
}
i8* Alloc10573(i64 len){
		u64 size=(u64)(typeinfo1.size*(u32)len);
		return (i8*)calloc(1,size);
}
i8* Alloc11575(i64 len){
		u64 size=(u64)(typeinfo1.size*(u32)len);
		return (i8*)calloc(1,size);
}
u32* Alloc12643(i64 len){
		u64 size=(u64)(typeinfo12.size*(u32)len);
		return (u32*)calloc(1,size);
}
		void CopyPtr0471(i8* from,i8* to,i64 len){
		u64 size=(u64)(typeinfo1.size*(u32)len);
		#line 48 f9__ //Call
		memcpy((voidptr)to,(voidptr)from,size);
}
void CopyPtr1472(i8* from,i8* to,i64 len){
		u64 size=(u64)(typeinfo1.size*(u32)len);
		#line 48 f9__ //Call
		memcpy((voidptr)to,(voidptr)from,size);
}
	i64 i64300(u8 i){
		#line 6 f10__ //Return
		return (i64)i;
}
	i64 i64301(u32 i){
		#line 7 f10__ //Return
		return (i64)i;
}
	i64 i64302(u64 i){
		#line 8 f10__ //Return
		return (i64)i;
}
	i64 i64303(i8 i){
		#line 9 f10__ //Return
		return (i64)i;
}
	i64 i64304(i32 i){
		#line 10 f10__ //Return
		return (i64)i;
}
	i64 i64305(i64 i){
		#line 11 f10__ //Return
		return (i64)i;
}
	i64 i64306(f32 i){
		#line 12 f10__ //Return
		return (i64)i;
}
	i64 i64307(f64 i){
		#line 13 f10__ //Return
		return (i64)i;
}
	i32 i32308(u8 i){
		#line 15 f10__ //Return
		return (i32)i;
}
	i32 i32309(u32 i){
		#line 16 f10__ //Return
		return (i32)i;
}
	i32 i32310(u64 i){
		#line 17 f10__ //Return
		return (i32)i;
}
	i32 i32311(i8 i){
		#line 18 f10__ //Return
		return (i32)i;
}
	i32 i32312(i32 i){
		#line 19 f10__ //Return
		return (i32)i;
}
	i32 i32313(i64 i){
		#line 20 f10__ //Return
		return (i32)i;
}
	i32 i32314(f32 i){
		#line 21 f10__ //Return
		return (i32)i;
}
	i32 i32315(f64 i){
		#line 22 f10__ //Return
		return (i32)i;
}
	i8 i8316(u8 i){
		#line 24 f10__ //Return
		return (i8)i;
}
	i8 i8317(u32 i){
		#line 25 f10__ //Return
		return (i8)i;
}
	i8 i8318(u64 i){
		#line 26 f10__ //Return
		return (i8)i;
}
	i8 i8319(i8 i){
		#line 27 f10__ //Return
		return (i8)i;
}
	i8 i8320(i32 i){
		#line 28 f10__ //Return
		return (i8)i;
}
	i8 i8321(i64 i){
		#line 29 f10__ //Return
		return (i8)i;
}
	i8 i8322(f32 i){
		#line 30 f10__ //Return
		return (i8)i;
}
	i8 i8323(f64 i){
		#line 31 f10__ //Return
		return (i8)i;
}
	u8 u8324(u8 i){
		#line 33 f10__ //Return
		return (u8)i;
}
	u8 u8325(u32 i){
		#line 34 f10__ //Return
		return (u8)i;
}
	u8 u8326(u64 i){
		#line 35 f10__ //Return
		return (u8)i;
}
	u8 u8327(i8 i){
		#line 36 f10__ //Return
		return (u8)i;
}
	u8 u8328(i32 i){
		#line 37 f10__ //Return
		return (u8)i;
}
	u8 u8329(i64 i){
		#line 38 f10__ //Return
		return (u8)i;
}
	u8 u8330(f32 i){
		#line 39 f10__ //Return
		return (u8)i;
}
	u8 u8331(f64 i){
		#line 40 f10__ //Return
		return (u8)i;
}
	u32 u32332(u8 i){
		#line 42 f10__ //Return
		return (u32)i;
}
	u32 u32333(u32 i){
		#line 43 f10__ //Return
		return (u32)i;
}
	u32 u32334(u64 i){
		#line 44 f10__ //Return
		return (u32)i;
}
	u32 u32335(i8 i){
		#line 45 f10__ //Return
		return (u32)i;
}
	u32 u32336(i32 i){
		#line 46 f10__ //Return
		return (u32)i;
}
	u32 u32337(i64 i){
		#line 47 f10__ //Return
		return (u32)i;
}
	u32 u32338(f32 i){
		#line 48 f10__ //Return
		return (u32)i;
}
	u32 u32339(f64 i){
		#line 49 f10__ //Return
		return (u32)i;
}
	u64 u64340(u8 i){
		#line 51 f10__ //Return
		return (u64)i;
}
	u64 u64341(u32 i){
		#line 52 f10__ //Return
		return (u64)i;
}
	u64 u64342(u64 i){
		#line 53 f10__ //Return
		return (u64)i;
}
	u64 u64343(i8 i){
		#line 54 f10__ //Return
		return (u64)i;
}
	u64 u64344(i32 i){
		#line 55 f10__ //Return
		return (u64)i;
}
	u64 u64345(i64 i){
		#line 56 f10__ //Return
		return (u64)i;
}
	u64 u64346(f32 i){
		#line 57 f10__ //Return
		return (u64)i;
}
	u64 u64347(f64 i){
		#line 58 f10__ //Return
		return (u64)i;
}
	f32 f32348(u8 i){
		#line 60 f10__ //Return
		return (f32)i;
}
	f32 f32349(u32 i){
		#line 61 f10__ //Return
		return (f32)i;
}
	f32 f32350(u64 i){
		#line 62 f10__ //Return
		return (f32)i;
}
	f32 f32351(i8 i){
		#line 63 f10__ //Return
		return (f32)i;
}
	f32 f32352(i32 i){
		#line 64 f10__ //Return
		return (f32)i;
}
	f32 f32353(i64 i){
		#line 65 f10__ //Return
		return (f32)i;
}
	f32 f32354(f32 i){
		#line 66 f10__ //Return
		return (f32)i;
}
	f32 f32355(f64 i){
		#line 67 f10__ //Return
		return (f32)i;
}
	f64 f64356(u8 i){
		#line 69 f10__ //Return
		return (f64)i;
}
	f64 f64357(u32 i){
		#line 70 f10__ //Return
		return (f64)i;
}
	f64 f64358(u64 i){
		#line 71 f10__ //Return
		return (f64)i;
}
	f64 f64359(i8 i){
		#line 72 f10__ //Return
		return (f64)i;
}
	f64 f64360(i32 i){
		#line 73 f10__ //Return
		return (f64)i;
}
	f64 f64361(i64 i){
		#line 74 f10__ //Return
		return (f64)i;
}
	f64 f64362(f32 i){
		#line 75 f10__ //Return
		return (f64)i;
}
	f64 f64363(f64 i){
		#line 76 f10__ //Return
		return (f64)i;
}
						;
	f32 sqrt369(f32 f){
		#line 15 f11__ //Return
		return sqrtf(f);
}
	f32 abs370(f32 f){
		#line 19 f11__ //Return
		return fabsf(f);
}
	f32 cos371(f32 f){
		#line 23 f11__ //Return
		return cosf(f);
}
	f32 sin372(f32 f){
		#line 27 f11__ //Return
		return sinf(f);
}
	f32 tan373(f32 f){
		#line 31 f11__ //Return
		return tanf(f);
}
					void Bind378(Material material){
		#line 48 f12__ //Call
		GLError430(str{10,(i8*)"pre shader"});
		#line 49 f12__ //Call
		glUseProgram(material.shader.id);
		#line 50 f12__ //Call
		GLError430(str{21,(i8*)"failed to bind shader"});
		#line 52 f12__ //If
		if(material.texture.id){
			#line 54 f12__ //Call
			glBindTexture(GL_TEXTURE_2D,material.texture.id);
			#line 55 f12__ //Call
			GLError430(str{22,(i8*)"failed to bind texture"});
		};
}
	Sprite* Sprite379(Entity entity,Renderer& renderer,str file){
		Sprite* r=(&AddComponent0514(entity));
		#line 62 f12__ //BinaryOp
		(*r) = Sprite380(renderer,file);
		#line 63 f12__ //Return
		return r;
}
	Sprite Sprite380(Renderer& renderer,str file){
		Sprite sprite={0};
		#line 69 f12__ //BinaryOp
		sprite.vertices = Alloc6518(4);
		#line 70 f12__ //BinaryOp
		sprite.indices = Alloc7519(6);
		#line 71 f12__ //BinaryOp
		sprite.material.texture = Texture256(renderer,file);
		#line 72 f12__ //BinaryOp
		sprite.color = Vec4202(1);
		#line 74 f12__ //Call
		glGenBuffers(1,(&sprite.buffer));
		#line 75 f12__ //Call
		glGenBuffers(1,(&sprite.index));
		Array7 i={0};
		#line 78 f12__ //BinaryOp
		i.elements = sprite.indices;
		#line 79 f12__ //BinaryOp
		i.length = 6;
		#line 80 f12__ //BinaryOp
		OpArray13565(i,0) = 0;
		#line 81 f12__ //BinaryOp
		OpArray14566(i,1) = 1;
		#line 82 f12__ //BinaryOp
		OpArray15567(i,2) = 3;
		#line 83 f12__ //BinaryOp
		OpArray16568(i,3) = 2;
		#line 84 f12__ //BinaryOp
		OpArray17569(i,4) = 3;
		#line 85 f12__ //BinaryOp
		OpArray18570(i,5) = 0;
		#line 86 f12__ //Call
		GLError430(str{3,(i8*)"172"});
		#line 87 f12__ //Call
		glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,sprite.index);
		#line 88 f12__ //Call
		glBufferData(GL_ELEMENT_ARRAY_BUFFER,i64302((typeinfo7.size*6)),(voidptr)sprite.indices,GL_DYNAMIC_DRAW);
		#line 89 f12__ //Call
		GLError430(str{3,(i8*)"169"});
		u32 VAO={0};
		#line 92 f12__ //Call
		glBindBuffer(GL_ARRAY_BUFFER,sprite.buffer);
		#line 94 f12__ //Call
		glGenVertexArrays(1,(&VAO));
		#line 95 f12__ //Call
		glBindVertexArray(VAO);
		#line 96 f12__ //Call
		glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,sprite.index);
		#line 97 f12__ //Call
		GLError430(str{3,(i8*)"181"});
		#line 99 f12__ //Call
		glEnableVertexAttribArray(0);
		#line 100 f12__ //Call
		glVertexAttribPointer(0,2,GL_FLOAT,GL_FALSE,i32309(typeinfo6.size),(voidptr)0);
		#line 101 f12__ //Call
		glEnableVertexAttribArray(1);
		#line 102 f12__ //Call
		glVertexAttribPointer(1,2,GL_FLOAT,GL_FALSE,i32309(typeinfo6.size),(voidptr)(typeinfo9.size*2));
		#line 103 f12__ //Call
		glEnableVertexAttribArray(2);
		#line 104 f12__ //Call
		glVertexAttribPointer(2,4,GL_FLOAT,GL_FALSE,i32309(typeinfo6.size),(voidptr)(typeinfo9.size*4));
		#line 105 f12__ //Call
		glBindVertexArray(0);
		#line 107 f12__ //Call
		glBindBuffer(GL_ARRAY_BUFFER,0);
		#line 108 f12__ //Call
		glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,0);
		#line 109 f12__ //Call
		GLError430(str{3,(i8*)"188"});
		#line 111 f12__ //Call
		Color381(sprite,Vec4202(1));
		#line 112 f12__ //BinaryOp
		sprite.vao = VAO;
		#line 113 f12__ //Return
		return sprite;
}
	void Color381(Sprite& sprite,Vec4 color){
		#line 117 f12__ //BinaryOp
		sprite.color = color;
		#line 118 f12__ //Call
		GLError430(str{1,(i8*)"1"});
		PositionTextureColor* a=sprite.vertices;
		#line 121 f12__ //BinaryOp
		a->position = Vec2207((-0.5),(-0.5));
		#line 122 f12__ //BinaryOp
		a->texture = Vec2207(0,1);
		#line 123 f12__ //BinaryOp
		a->color = sprite.color;
		#line 124 f12__ //BinaryOp
		a = (a+1);
		#line 125 f12__ //BinaryOp
		a->position = Vec2207((-0.5),0.5);
		#line 126 f12__ //BinaryOp
		a->texture = Vec2207(0,0);
		#line 127 f12__ //BinaryOp
		a->color = sprite.color;
		#line 128 f12__ //BinaryOp
		a = (a+1);
		#line 129 f12__ //BinaryOp
		a->position = Vec2207(0.5,(-0.5));
		#line 130 f12__ //BinaryOp
		a->texture = Vec2207(1,1);
		#line 131 f12__ //BinaryOp
		a->color = sprite.color;
		#line 132 f12__ //BinaryOp
		a = (a+1);
		#line 133 f12__ //BinaryOp
		a->position = Vec2207(0.5,0.5);
		#line 134 f12__ //BinaryOp
		a->texture = Vec2207(1,0);
		#line 135 f12__ //BinaryOp
		a->color = sprite.color;
		#line 136 f12__ //BinaryOp
		a = (a+1);
		#line 138 f12__ //Call
		GLError430(str{3,(i8*)"163"});
		#line 139 f12__ //Call
		glBindBuffer(GL_ARRAY_BUFFER,sprite.buffer);
		#line 140 f12__ //Call
		glBufferData(GL_ARRAY_BUFFER,i64302((typeinfo6.size*4)),(voidptr)sprite.vertices,GL_DYNAMIC_DRAW);
		#line 141 f12__ //Call
		GLError430(str{3,(i8*)"169"});
}
		Transform* Transform383(Entity entity){
		Transform* transform=(&AddComponent1618(entity));
		#line 23 f13__ //BinaryOp
		transform->matrix = Mat4196(1.0);
		#line 24 f13__ //BinaryOp
		transform->scale = Vec3204(1.0);
		#line 25 f13__ //BinaryOp
		transform->entity = entity;
		#line 26 f13__ //Return
		return transform;
}
	Vec3 Scale384(Transform self){
		#line 30 f13__ //Return
		return self.scale;
}
	void Scale385(Transform& self,Vec3 scale){
		#line 33 f13__ //BinaryOp
		self.scale = scale;
		#line 34 f13__ //Call
		Recalculate389(self);
}
	Vec3 Position386(Transform& self){
		#line 37 f13__ //Return
		return self.position;
}
	void Position387(Transform& self,Vec3 position){
		#line 40 f13__ //BinaryOp
		self.position = position;
		#line 41 f13__ //Call
		Recalculate389(self);
}
	Vec3 WorldPosition388(Transform self){
		#line 45 f13__ //Return
		return Vec3203(OpArray194(self.matrix,3).x,OpArray194(self.matrix,3).y,OpArray194(self.matrix,3).z);
}
	void Recalculate389(Transform& self){
		#line 49 f13__ //BinaryOp
		self.matrix = mul199(Mat4Transform198(self.position),Mat4Scale197(self.scale));
		#line 50 f13__ //If
		if(self.parent){
			#line 51 f13__ //BinaryOp
			self.matrix = mul199(self.parent->matrix,self.matrix);
		};
		for(i64 it = i64300(0); it<self.children.length;it++){
			#line 54 f13__ //Call
			Recalculate389((*OpArray70625(self.children,it)));
		};
}
	void Parent390(Transform& self,Transform& parent){
		#line 60 f13__ //BinaryOp
		self.parent = (&parent);
		#line 61 f13__ //Call
		Push13693(parent.children,(&self));
		#line 62 f13__ //Call
		Recalculate389(self);
		#line 63 f13__ //Call
		Recalculate389(parent);
}
	;
	;
	;
		Buffer Buffer392(u32 buffertype,i64 length){
		Buffer buffer={0};
		#line 26 f14__ //Call
		glGenBuffers(1,(&buffer.id));
		#line 27 f14__ //BinaryOp
		buffer.buffertype = buffertype;
		#line 28 f14__ //BinaryOp
		buffer.length = length;
		#line 29 f14__ //Return
		return buffer;
}
	voidptr Map393(Buffer& buffer,i64 begin,i64 length){
		#line 34 f14__ //Call
		glBindBuffer(buffer.buffertype,buffer.id);
		#line 35 f14__ //BinaryOp
		buffer.ptr = glMapBufferRange(buffer.buffertype,begin,length,u32337((i64301(GL_MAP_WRITE_BIT)|i64301(GL_MAP_UNSYNCHRONIZED_BIT))));
		#line 36 f14__ //Return
		return buffer.ptr;
}
	void Unmap394(Buffer buffer){
		#line 41 f14__ //Call
		glBindBuffer(buffer.buffertype,buffer.id);
		#line 42 f14__ //Call
		glUnmapBuffer(buffer.buffertype);
}
	void Resize395(Buffer buffer,i64 size){
		#line 47 f14__ //Call
		glBindBuffer(buffer.buffertype,buffer.id);
		#line 48 f14__ //Call
		glBufferData(buffer.buffertype,size,(voidptr)0,GL_DYNAMIC_DRAW);
}
						Texture Texture402(str file){
		Texture texture={0};
		#line 26 f16__ //BinaryOp
		texture.file = file;
		#line 27 f16__ //BinaryOp
		texture.id = 0;
		u32 x={0};
		u32 y={0};
		u32 components={0};
		u32 req={0};
		Array6 data={0};
		#line 34 f16__ //BinaryOp
		data.elements = stbi_load(file.chars,(&x),(&y),(&components),0);
		#line 35 f16__ //BinaryOp
		data.length = i64302(((x*y)*4));
		#line 37 f16__ //If
		if((!data.elements)){
			#line 39 f16__ //Call
			Error122(add123(str{21,(i8*)"Couldnt open texture "},file));
			#line 40 f16__ //Return
			return texture;
		};
		for(i64 it = i64300(0); it<i64302((x*y));it++){
			i64 i=(it*4);
			f32 a=(f32348(OpArray6521(data,(i+3)))/255.0);
			#line 47 f16__ //BinaryOp
			OpArray7522(data,i) = u8330((f32348(OpArray8523(data,i))*a));
			#line 48 f16__ //BinaryOp
			OpArray9524(data,(i+1)) = u8330((f32348(OpArray10525(data,(i+1)))*a));
			#line 49 f16__ //BinaryOp
			OpArray11526(data,(i+2)) = u8330((f32348(OpArray12527(data,(i+2)))*a));
		};
		#line 52 f16__ //BinaryOp
		texture.size.x = f32349(x);
		#line 53 f16__ //BinaryOp
		texture.size.y = f32349(y);
		#line 55 f16__ //Call
		glGenTextures(1,(&texture.id));
		#line 56 f16__ //Call
		glBindTexture(GL_TEXTURE_2D,texture.id);
		#line 57 f16__ //Call
		glTexImage2D(GL_TEXTURE_2D,0,i32309(GL_RGBA),i32309(x),i32309(y),0,GL_RGBA,GL_UNSIGNED_BYTE,(voidptr)data.elements);
		#line 58 f16__ //Call
		glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_BASE_LEVEL,0);
		#line 59 f16__ //Call
		glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAX_LEVEL,0);
		#line 60 f16__ //Call
		glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,i32309(GL_LINEAR));
		#line 61 f16__ //Call
		glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,i32309(GL_LINEAR));
		#line 62 f16__ //Call
		stbi_image_free((voidptr)data.elements);
		#line 63 f16__ //Return
		return texture;
}
	Texture Texture403(Vec2 size){
		Texture texture={0};
		#line 68 f16__ //BinaryOp
		texture.id = 0;
		#line 69 f16__ //BinaryOp
		texture.size = size;
		#line 70 f16__ //Call
		glGenTextures(1,(&texture.id));
		#line 71 f16__ //Call
		glBindTexture(GL_TEXTURE_2D,texture.id);
		#line 72 f16__ //Call
		glTexImage2D(GL_TEXTURE_2D,0,i32309(GL_RGBA),i32314(size.x),i32314(size.y),0,GL_RGBA,GL_UNSIGNED_BYTE,(voidptr)0);
		#line 73 f16__ //Call
		glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_BASE_LEVEL,0);
		#line 74 f16__ //Call
		glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAX_LEVEL,0);
		#line 75 f16__ //Call
		glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,i32309(GL_LINEAR));
		#line 76 f16__ //Call
		glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,i32309(GL_LINEAR));
		#line 77 f16__ //Return
		return texture;
}
		Camera Camera405(){
		Camera camera={0};
		#line 31 f17__ //BinaryOp
		camera.near = 1;
		#line 32 f17__ //BinaryOp
		camera.far = 150;
		#line 33 f17__ //BinaryOp
		camera.fieldOfView = 90;
		#line 34 f17__ //BinaryOp
		camera.projection = Perspective407(camera.fieldOfView,2.0,camera.near,camera.far);
		#line 35 f17__ //BinaryOp
		camera.view = Translate408(Vec3203(0,0,(-50)));
		#line 36 f17__ //BinaryOp
		camera.viewportPosition = Vec2207(0,0);
		#line 37 f17__ //BinaryOp
		camera.viewportScale = Vec2207(1,1);
		#line 39 f17__ //BinaryOp
		camera.viewProjection = mul199(camera.projection,camera.view);
		#line 40 f17__ //Return
		return camera;
}
	Mat4 Frustum406(f32 left,f32 right,f32 bottom,f32 top,f32 near,f32 far){
		Mat4 m={0};
		f32 zDelta=(far-near);
		f32 dir=(right-left);
		f32 height=(top-bottom);
		f32 zNear2=(2*near);
		f32 m11=((2.0*near)/dir);
		f32 m22=(zNear2/height);
		f32 m33=(0-((far+near)/zDelta));
		f32 a=((right+left)/dir);
		f32 b=((top+bottom)/height);
		f32 d=(0-((zNear2*far)/zDelta));
		#line 65 f17__ //BinaryOp
		OpArray195(OpArray194(m,0),0) = m11;
		#line 66 f17__ //BinaryOp
		OpArray195(OpArray194(m,0),4) = 0;
		#line 67 f17__ //BinaryOp
		OpArray195(OpArray194(m,0),8) = a;
		#line 68 f17__ //BinaryOp
		OpArray195(OpArray194(m,0),12) = 0;
		#line 70 f17__ //BinaryOp
		OpArray195(OpArray194(m,0),1) = 0;
		#line 71 f17__ //BinaryOp
		OpArray195(OpArray194(m,0),5) = m22;
		#line 72 f17__ //BinaryOp
		OpArray195(OpArray194(m,0),9) = b;
		#line 73 f17__ //BinaryOp
		OpArray195(OpArray194(m,0),13) = 0;
		#line 75 f17__ //BinaryOp
		OpArray195(OpArray194(m,0),2) = 0;
		#line 76 f17__ //BinaryOp
		OpArray195(OpArray194(m,0),6) = 0;
		#line 77 f17__ //BinaryOp
		OpArray195(OpArray194(m,0),10) = m33;
		#line 78 f17__ //BinaryOp
		OpArray195(OpArray194(m,0),14) = d;
		#line 80 f17__ //BinaryOp
		OpArray195(OpArray194(m,0),3) = 0;
		#line 81 f17__ //BinaryOp
		OpArray195(OpArray194(m,0),7) = 0;
		#line 82 f17__ //BinaryOp
		OpArray195(OpArray194(m,0),11) = (-1);
		#line 83 f17__ //BinaryOp
		OpArray195(OpArray194(m,0),15) = 0;
		#line 85 f17__ //Return
		return m;
}
	Mat4 Perspective407(f32 fovy,f32 aspect,f32 zNear,f32 zFar){
		f32 f=(1/tanf(((fovy*(PI/180))/2)));
		f32 m11=(f/aspect);
		f32 m22=f;
		f32 m33=((zFar+zNear)/(zNear-zFar));
		f32 m34=(((2*zFar)*zNear)/(zNear-zFar));
		Mat4 m={0};
		#line 114 f17__ //BinaryOp
		OpArray195(OpArray194(m,0),0) = m11;
		#line 115 f17__ //BinaryOp
		OpArray195(OpArray194(m,0),4) = 0;
		#line 116 f17__ //BinaryOp
		OpArray195(OpArray194(m,0),8) = 0;
		#line 117 f17__ //BinaryOp
		OpArray195(OpArray194(m,0),12) = 0;
		#line 119 f17__ //BinaryOp
		OpArray195(OpArray194(m,0),1) = 0;
		#line 120 f17__ //BinaryOp
		OpArray195(OpArray194(m,0),5) = m22;
		#line 121 f17__ //BinaryOp
		OpArray195(OpArray194(m,0),9) = 0;
		#line 122 f17__ //BinaryOp
		OpArray195(OpArray194(m,0),13) = 0;
		#line 124 f17__ //BinaryOp
		OpArray195(OpArray194(m,0),2) = 0;
		#line 125 f17__ //BinaryOp
		OpArray195(OpArray194(m,0),6) = 0;
		#line 126 f17__ //BinaryOp
		OpArray195(OpArray194(m,0),10) = m33;
		#line 127 f17__ //BinaryOp
		OpArray195(OpArray194(m,0),14) = m34;
		#line 129 f17__ //BinaryOp
		OpArray195(OpArray194(m,0),3) = 0;
		#line 130 f17__ //BinaryOp
		OpArray195(OpArray194(m,0),7) = 0;
		#line 131 f17__ //BinaryOp
		OpArray195(OpArray194(m,0),11) = (-1);
		#line 132 f17__ //BinaryOp
		OpArray195(OpArray194(m,0),15) = 0;
		#line 134 f17__ //Return
		return m;
}
	Mat4 Translate408(Vec3 translate){
		Mat4 m=Mat4196(1);
		#line 140 f17__ //BinaryOp
		OpArray195(OpArray194(m,0),12) = translate.x;
		#line 141 f17__ //BinaryOp
		OpArray195(OpArray194(m,0),13) = translate.y;
		#line 142 f17__ //BinaryOp
		OpArray195(OpArray194(m,0),14) = translate.z;
		#line 143 f17__ //Return
		return m;
}
		Vec3 PointAt410(Ray self,f32 distance){
		#line 154 f17__ //Return
		return add212(self.orgin,mul219(self.direction,distance));
}
	i8 IntersectsSphere411(Ray self,Vec3 point,f32 radius){
		Vec3 m=sub209(self.orgin,point);
		f32 b=Dot225(m,self.direction);
		f32 c=(Dot225(m,m)-(radius*radius));
		#line 164 f17__ //If
		if(((c>0)&&(b>0))){
			#line 165 f17__ //Return
			return false;
		};
		f32 discr=((b*b)-c);
		#line 170 f17__ //If
		if((discr<0)){
			#line 171 f17__ //Return
			return false;
		};
		#line 173 f17__ //Return
		return true;
}
	f32 IntersectsSphereDistance412(Ray self,Vec3 point,f32 radius){
		Vec3 m=sub209(self.orgin,point);
		f32 b=Dot225(m,self.direction);
		f32 c=(Dot225(m,m)-(radius*radius));
		#line 183 f17__ //If
		if(((c>0)&&(b>0))){
			#line 184 f17__ //Return
			return (-1);
		};
		f32 discr=((b*b)-c);
		#line 189 f17__ //If
		if((discr<0)){
			#line 190 f17__ //Return
			return (-1);
		};
		f32 t=(-(b-sqrtf(discr)));
		#line 197 f17__ //If
		if((t<0)){
			#line 198 f17__ //BinaryOp
			t = 0;
		};
		#line 200 f17__ //Return
		return t;
}
	Ray ScreenToRay413(Camera self,Vec2 screen){
		Vec2 p={0};
		#line 206 f17__ //BinaryOp
		p.x = ((screen.x/self.viewportScale.x)-(self.viewportPosition.x/self.viewportScale.x));
		#line 207 f17__ //BinaryOp
		p.y = ((screen.y/self.viewportScale.y)-(self.viewportPosition.y/self.viewportScale.y));
		Mat4 iviewProj=Inverse415(mul199(self.projection,self.view));
		Mat4 iview=Inverse415(self.view);
		Vec4 nearPlaneWorld=mul414(iviewProj,Vec4200(p.x,p.y,(-1),1));
		#line 215 f17__ //BinaryOp
		nearPlaneWorld = div224(nearPlaneWorld,nearPlaneWorld.w);
		Ray ray={0};
		#line 218 f17__ //BinaryOp
		ray.orgin = Vec3203(OpArray194(iview,3).x,OpArray194(iview,3).y,OpArray194(iview,3).z);
		#line 219 f17__ //BinaryOp
		ray.direction = Normalize230(sub209(Vec3203(nearPlaneWorld.x,nearPlaneWorld.y,nearPlaneWorld.z),ray.orgin));
		#line 220 f17__ //Return
		return ray;
}
	Vec4 mul414(Mat4 self,Vec4 v){
		Vec4 m={0};
		#line 226 f17__ //BinaryOp
		m.x = ((((v.x*OpArray195(self.x,0))+(v.y*OpArray195(self.x,4)))+(v.z*OpArray195(self.x,8)))+(v.w*OpArray195(self.x,12)));
		#line 227 f17__ //BinaryOp
		m.y = ((((v.x*OpArray195(self.x,1))+(v.y*OpArray195(self.x,5)))+(v.z*OpArray195(self.x,9)))+(v.w*OpArray195(self.x,13)));
		#line 228 f17__ //BinaryOp
		m.z = ((((v.x*OpArray195(self.x,2))+(v.y*OpArray195(self.x,6)))+(v.z*OpArray195(self.x,10)))+(v.w*OpArray195(self.x,14)));
		#line 229 f17__ //BinaryOp
		m.w = ((((v.x*OpArray195(self.x,4))+(v.y*OpArray195(self.x,7)))+(v.z*OpArray195(self.x,11)))+(v.w*OpArray195(self.x,15)));
		#line 230 f17__ //Return
		return m;
}
	Mat4 Inverse415(Mat4 v){
		Mat4 out={0};
		f32 det={0};
		i64 i={0};
		#line 253 f17__ //BinaryOp
		OpArray195(out.x,0) = (((((((OpArray195(v.x,5)*OpArray195(v.x,10))*OpArray195(v.x,15))-((OpArray195(v.x,5)*OpArray195(v.x,11))*OpArray195(v.x,14)))-((OpArray195(v.x,9)*OpArray195(v.x,6))*OpArray195(v.x,15)))+((OpArray195(v.x,9)*OpArray195(v.x,7))*OpArray195(v.x,14)))+((OpArray195(v.x,13)*OpArray195(v.x,6))*OpArray195(v.x,11)))-((OpArray195(v.x,13)*OpArray195(v.x,7))*OpArray195(v.x,10)));
		#line 260 f17__ //BinaryOp
		OpArray195(out.x,4) = (-(((((((OpArray195(v.x,4)*OpArray195(v.x,10))*OpArray195(v.x,15))+((OpArray195(v.x,4)*OpArray195(v.x,11))*OpArray195(v.x,14)))+((OpArray195(v.x,8)*OpArray195(v.x,6))*OpArray195(v.x,15)))-((OpArray195(v.x,8)*OpArray195(v.x,7))*OpArray195(v.x,14)))-((OpArray195(v.x,12)*OpArray195(v.x,6))*OpArray195(v.x,11)))+((OpArray195(v.x,12)*OpArray195(v.x,7))*OpArray195(v.x,10))));
		#line 267 f17__ //BinaryOp
		OpArray195(out.x,8) = (((((((OpArray195(v.x,4)*OpArray195(v.x,9))*OpArray195(v.x,15))-((OpArray195(v.x,4)*OpArray195(v.x,11))*OpArray195(v.x,13)))-((OpArray195(v.x,8)*OpArray195(v.x,5))*OpArray195(v.x,15)))+((OpArray195(v.x,8)*OpArray195(v.x,7))*OpArray195(v.x,13)))+((OpArray195(v.x,12)*OpArray195(v.x,5))*OpArray195(v.x,11)))-((OpArray195(v.x,12)*OpArray195(v.x,7))*OpArray195(v.x,9)));
		#line 274 f17__ //BinaryOp
		OpArray195(out.x,12) = (-(((((((OpArray195(v.x,4)*OpArray195(v.x,9))*OpArray195(v.x,14))+((OpArray195(v.x,4)*OpArray195(v.x,10))*OpArray195(v.x,13)))+((OpArray195(v.x,8)*OpArray195(v.x,5))*OpArray195(v.x,14)))-((OpArray195(v.x,8)*OpArray195(v.x,6))*OpArray195(v.x,13)))-((OpArray195(v.x,12)*OpArray195(v.x,5))*OpArray195(v.x,10)))+((OpArray195(v.x,12)*OpArray195(v.x,6))*OpArray195(v.x,9))));
		#line 281 f17__ //BinaryOp
		OpArray195(out.x,1) = (-(((((((OpArray195(v.x,1)*OpArray195(v.x,10))*OpArray195(v.x,15))+((OpArray195(v.x,1)*OpArray195(v.x,11))*OpArray195(v.x,14)))+((OpArray195(v.x,9)*OpArray195(v.x,2))*OpArray195(v.x,15)))-((OpArray195(v.x,9)*OpArray195(v.x,3))*OpArray195(v.x,14)))-((OpArray195(v.x,13)*OpArray195(v.x,2))*OpArray195(v.x,11)))+((OpArray195(v.x,13)*OpArray195(v.x,3))*OpArray195(v.x,10))));
		#line 288 f17__ //BinaryOp
		OpArray195(out.x,5) = (((((((OpArray195(v.x,0)*OpArray195(v.x,10))*OpArray195(v.x,15))-((OpArray195(v.x,0)*OpArray195(v.x,11))*OpArray195(v.x,14)))-((OpArray195(v.x,8)*OpArray195(v.x,2))*OpArray195(v.x,15)))+((OpArray195(v.x,8)*OpArray195(v.x,3))*OpArray195(v.x,14)))+((OpArray195(v.x,12)*OpArray195(v.x,2))*OpArray195(v.x,11)))-((OpArray195(v.x,12)*OpArray195(v.x,3))*OpArray195(v.x,10)));
		#line 295 f17__ //BinaryOp
		OpArray195(out.x,9) = (-(((((((OpArray195(v.x,0)*OpArray195(v.x,9))*OpArray195(v.x,15))+((OpArray195(v.x,0)*OpArray195(v.x,11))*OpArray195(v.x,13)))+((OpArray195(v.x,8)*OpArray195(v.x,1))*OpArray195(v.x,15)))-((OpArray195(v.x,8)*OpArray195(v.x,3))*OpArray195(v.x,13)))-((OpArray195(v.x,12)*OpArray195(v.x,1))*OpArray195(v.x,11)))+((OpArray195(v.x,12)*OpArray195(v.x,3))*OpArray195(v.x,9))));
		#line 302 f17__ //BinaryOp
		OpArray195(out.x,13) = (((((((OpArray195(v.x,0)*OpArray195(v.x,9))*OpArray195(v.x,14))-((OpArray195(v.x,0)*OpArray195(v.x,10))*OpArray195(v.x,13)))-((OpArray195(v.x,8)*OpArray195(v.x,1))*OpArray195(v.x,14)))+((OpArray195(v.x,8)*OpArray195(v.x,2))*OpArray195(v.x,13)))+((OpArray195(v.x,12)*OpArray195(v.x,1))*OpArray195(v.x,10)))-((OpArray195(v.x,12)*OpArray195(v.x,2))*OpArray195(v.x,9)));
		#line 309 f17__ //BinaryOp
		OpArray195(out.x,2) = (((((((OpArray195(v.x,1)*OpArray195(v.x,6))*OpArray195(v.x,15))-((OpArray195(v.x,1)*OpArray195(v.x,7))*OpArray195(v.x,14)))-((OpArray195(v.x,5)*OpArray195(v.x,2))*OpArray195(v.x,15)))+((OpArray195(v.x,5)*OpArray195(v.x,3))*OpArray195(v.x,14)))+((OpArray195(v.x,13)*OpArray195(v.x,2))*OpArray195(v.x,7)))-((OpArray195(v.x,13)*OpArray195(v.x,3))*OpArray195(v.x,6)));
		#line 316 f17__ //BinaryOp
		OpArray195(out.x,6) = (-(((((((OpArray195(v.x,0)*OpArray195(v.x,6))*OpArray195(v.x,15))+((OpArray195(v.x,0)*OpArray195(v.x,7))*OpArray195(v.x,14)))+((OpArray195(v.x,4)*OpArray195(v.x,2))*OpArray195(v.x,15)))-((OpArray195(v.x,4)*OpArray195(v.x,3))*OpArray195(v.x,14)))-((OpArray195(v.x,12)*OpArray195(v.x,2))*OpArray195(v.x,7)))+((OpArray195(v.x,12)*OpArray195(v.x,3))*OpArray195(v.x,6))));
		#line 323 f17__ //BinaryOp
		OpArray195(out.x,10) = (((((((OpArray195(v.x,0)*OpArray195(v.x,5))*OpArray195(v.x,15))-((OpArray195(v.x,0)*OpArray195(v.x,7))*OpArray195(v.x,13)))-((OpArray195(v.x,4)*OpArray195(v.x,1))*OpArray195(v.x,15)))+((OpArray195(v.x,4)*OpArray195(v.x,3))*OpArray195(v.x,13)))+((OpArray195(v.x,12)*OpArray195(v.x,1))*OpArray195(v.x,7)))-((OpArray195(v.x,12)*OpArray195(v.x,3))*OpArray195(v.x,5)));
		#line 330 f17__ //BinaryOp
		OpArray195(out.x,14) = (-(((((((OpArray195(v.x,0)*OpArray195(v.x,5))*OpArray195(v.x,14))+((OpArray195(v.x,0)*OpArray195(v.x,6))*OpArray195(v.x,13)))+((OpArray195(v.x,4)*OpArray195(v.x,1))*OpArray195(v.x,14)))-((OpArray195(v.x,4)*OpArray195(v.x,2))*OpArray195(v.x,13)))-((OpArray195(v.x,12)*OpArray195(v.x,1))*OpArray195(v.x,6)))+((OpArray195(v.x,12)*OpArray195(v.x,2))*OpArray195(v.x,5))));
		#line 337 f17__ //BinaryOp
		OpArray195(out.x,3) = (-(((((((OpArray195(v.x,1)*OpArray195(v.x,6))*OpArray195(v.x,11))+((OpArray195(v.x,1)*OpArray195(v.x,7))*OpArray195(v.x,10)))+((OpArray195(v.x,5)*OpArray195(v.x,2))*OpArray195(v.x,11)))-((OpArray195(v.x,5)*OpArray195(v.x,3))*OpArray195(v.x,10)))-((OpArray195(v.x,9)*OpArray195(v.x,2))*OpArray195(v.x,7)))+((OpArray195(v.x,9)*OpArray195(v.x,3))*OpArray195(v.x,6))));
		#line 344 f17__ //BinaryOp
		OpArray195(out.x,7) = (((((((OpArray195(v.x,0)*OpArray195(v.x,6))*OpArray195(v.x,11))-((OpArray195(v.x,0)*OpArray195(v.x,7))*OpArray195(v.x,10)))-((OpArray195(v.x,4)*OpArray195(v.x,2))*OpArray195(v.x,11)))+((OpArray195(v.x,4)*OpArray195(v.x,3))*OpArray195(v.x,10)))+((OpArray195(v.x,8)*OpArray195(v.x,2))*OpArray195(v.x,7)))-((OpArray195(v.x,8)*OpArray195(v.x,3))*OpArray195(v.x,6)));
		#line 351 f17__ //BinaryOp
		OpArray195(out.x,11) = (-(((((((OpArray195(v.x,0)*OpArray195(v.x,5))*OpArray195(v.x,11))+((OpArray195(v.x,0)*OpArray195(v.x,7))*OpArray195(v.x,9)))+((OpArray195(v.x,4)*OpArray195(v.x,1))*OpArray195(v.x,11)))-((OpArray195(v.x,4)*OpArray195(v.x,3))*OpArray195(v.x,9)))-((OpArray195(v.x,8)*OpArray195(v.x,1))*OpArray195(v.x,7)))+((OpArray195(v.x,8)*OpArray195(v.x,3))*OpArray195(v.x,5))));
		#line 358 f17__ //BinaryOp
		OpArray195(out.x,15) = (((((((OpArray195(v.x,0)*OpArray195(v.x,5))*OpArray195(v.x,10))-((OpArray195(v.x,0)*OpArray195(v.x,6))*OpArray195(v.x,9)))-((OpArray195(v.x,4)*OpArray195(v.x,1))*OpArray195(v.x,10)))+((OpArray195(v.x,4)*OpArray195(v.x,2))*OpArray195(v.x,9)))+((OpArray195(v.x,8)*OpArray195(v.x,1))*OpArray195(v.x,6)))-((OpArray195(v.x,8)*OpArray195(v.x,2))*OpArray195(v.x,5)));
		#line 365 f17__ //BinaryOp
		det = ((((OpArray195(v.x,0)*OpArray195(out.x,0))+(OpArray195(v.x,1)*OpArray195(out.x,4)))+(OpArray195(v.x,2)*OpArray195(out.x,8)))+(OpArray195(v.x,3)*OpArray195(out.x,12)));
		#line 367 f17__ //If
		if((det==0)){
			#line 368 f17__ //Call
			Print120(str{30,(i8*)"Error: Cannot inverse det = 0\n"});
			#line 369 f17__ //Return
			return Mat4196(0);
		};
		#line 372 f17__ //BinaryOp
		det = (1.0/det);
		while((i<16)){
			#line 375 f17__ //BinaryOp
			OpArray195(out.x,i) = (OpArray195(out.x,i)*det);
			#line 376 f17__ //BinaryOp
			i = (i+1);
		};
		#line 379 f17__ //Return
		return out;
}
			i32 Char418(str char){
		#line 18 f18__ //Call
		Assert295((char.length==1),str{24,(i8*)"Exepcted str of length 1"});
		#line 19 f18__ //Return
		return (*char.chars);
}
	Lexer Lexer419(str file){
		Lexer self={0};
		#line 24 f18__ //BinaryOp
		self.file = FileOpen(file.chars,str{1,(i8*)"r"}.chars);
		#line 25 f18__ //If
		if(self.file){
			#line 27 f18__ //Call
			Get421(self);
			#line 28 f18__ //Call
			Consume426(self);
		}else{
			#line 31 f18__ //Call
			Print120(add123(add123(str{21,(i8*)"Failed to open file \'"},file),str{1,(i8*)"\'"}));
		};
		#line 33 f18__ //Return
		return self;
}
	i32 Peek420(Lexer& self){
		#line 38 f18__ //Return
		return self.nextCharacter;
}
	i32 Get421(Lexer& self){
		i32 character=self.nextCharacter;
		#line 43 f18__ //BinaryOp
		self.nextCharacter = FileGetChar(self.file);
		#line 44 f18__ //If
		if((self.nextCharacter==(-1))){
			#line 45 f18__ //BinaryOp
			self.nextCharacter = 0;
		};
		#line 47 f18__ //Return
		return character;
}
	;
	;
	;
					void Consume426(Lexer& self){
		#line 64 f18__ //BinaryOp
		self.token = Next427(self);
}
	Token Next427(Lexer& self){
		while(isspace(Peek420(self))){
			#line 70 f18__ //Call
			Get421(self);
		};
		#line 73 f18__ //If
		if((isalpha(Peek420(self))||(Peek420(self)==Char418(str{1,(i8*)"_"})))){
			DynamicArray9 data={0};
			#line 76 f18__ //Call
			Init1495(data);
			while(isalnum(Peek420(self))){
				#line 78 f18__ //Call
				Push1496(data,i8320(Get421(self)));
			};
			#line 80 f18__ //Call
			Push2499(data,0);
			Token t={0};
			#line 83 f18__ //BinaryOp
			t.Type = LexerIdentifier;
			#line 84 f18__ //BinaryOp
			t.string.chars = data.elements;
			#line 85 f18__ //BinaryOp
			t.string.length = (data.length-1);
			#line 86 f18__ //Return
			return t;
		};
		#line 89 f18__ //If
		if((((Peek420(self)==Char418(str{1,(i8*)"."}))||isdigit(Peek420(self)))||i32311((Peek420(self)==Char418(str{1,(i8*)"-"}))))){
			f64 num=0;
			f64 m=10;
			#line 93 f18__ //If
			if((Peek420(self)==Char418(str{1,(i8*)"-"}))){
				#line 95 f18__ //Call
				Get421(self);
				#line 96 f18__ //BinaryOp
				m = (-m);
			};
			while(isdigit(Peek420(self))){
				#line 100 f18__ //BinaryOp
				num = ((num*m)+f64360((Get421(self)-Char418(str{1,(i8*)"0"}))));
			};
			#line 102 f18__ //If
			if((Peek420(self)==Char418(str{1,(i8*)"."}))){
				#line 104 f18__ //Call
				Get421(self);
			};
			#line 106 f18__ //BinaryOp
			m = (f64356(1.0)/m);
			while(isdigit(Peek420(self))){
				#line 108 f18__ //BinaryOp
				num = (num+(f64360((Get421(self)-Char418(str{1,(i8*)"0"})))*m));
				#line 109 f18__ //BinaryOp
				m = (m/f64356(10));
			};
			Token t={0};
			#line 112 f18__ //BinaryOp
			t.Type = LexerNumber;
			#line 113 f18__ //BinaryOp
			t.number = num;
			#line 114 f18__ //Return
			return t;
		};
		#line 116 f18__ //If
		if((Peek420(self)==Char418(str{1,(i8*)"\'"}))){
			#line 118 f18__ //Call
			Get421(self);
			DynamicArray9 data={0};
			#line 121 f18__ //Call
			Init2502(data);
			while((Peek420(self)!=Char418(str{1,(i8*)"\'"}))){
				#line 124 f18__ //Call
				Push3503(data,i8320(Get421(self)));
			};
			#line 127 f18__ //Call
			Push4506(data,0);
			#line 128 f18__ //Call
			Get421(self);
			Token t={0};
			#line 131 f18__ //BinaryOp
			t.Type = LexerString;
			#line 132 f18__ //BinaryOp
			t.string.chars = data.elements;
			#line 133 f18__ //BinaryOp
			t.string.length = (data.length-1);
			#line 134 f18__ //Return
			return t;
		};
		Token t={0};
		#line 137 f18__ //BinaryOp
		t.Type = Get421(self);
		#line 138 f18__ //Return
		return t;
}
		Shader Shader429(str vs,str fs){
		Shader shader={0};
		#line 21 f19__ //BinaryOp
		shader.id = glCreateProgram();
		#line 22 f19__ //BinaryOp
		shader.fs = fs;
		#line 23 f19__ //BinaryOp
		shader.vs = vs;
		u32 vsshader=CompileShader432(GL_VERTEX_SHADER,ReadFile434(vs),vs);
		u32 fsshader=CompileShader432(GL_FRAGMENT_SHADER,ReadFile434(fs),fs);
		#line 28 f19__ //If
		if((!vsshader)){
			#line 29 f19__ //Call
			Error122(add123(str{18,(i8*)"Failed to compile "},vs));
		};
		#line 31 f19__ //If
		if((!fsshader)){
			#line 32 f19__ //Call
			Error122(add123(str{18,(i8*)"Failed to compile "},fs));
		};
		#line 35 f19__ //Call
		glAttachShader(shader.id,vsshader);
		#line 36 f19__ //Call
		glAttachShader(shader.id,fsshader);
		#line 38 f19__ //Call
		glDeleteShader(fsshader);
		#line 39 f19__ //Call
		glDeleteShader(vsshader);
		#line 41 f19__ //Call
		glLinkProgram(shader.id);
		i32 status={0};
		#line 44 f19__ //Call
		glGetProgramiv(shader.id,GL_LINK_STATUS,(&status));
		#line 46 f19__ //If
		if((status==i32311(GL_FALSE))){
			i32 length={0};
			i8* buffer=Alloc10573(1024);
			#line 50 f19__ //Call
			glGetShaderInfoLog(shader.id,1024,(&length),buffer);
			#line 51 f19__ //Call
			Error122(str{15,(i8*)"Linking failed "});
			#line 52 f19__ //Call
			Error122(String124(buffer,i64304(length)));
		};
		u32 cameraIndex=glGetUniformBlockIndex(shader.id,str{6,(i8*)"Camera"}.chars);
		#line 56 f19__ //If
		if((cameraIndex!=GL_INVALID_INDEX)){
			#line 58 f19__ //Call
			glUniformBlockBinding(shader.id,cameraIndex,0);
		};
		u32 transformIndex=glGetUniformBlockIndex(shader.id,str{9,(i8*)"Transform"}.chars);
		#line 61 f19__ //If
		if((transformIndex!=GL_INVALID_INDEX)){
			#line 63 f19__ //Call
			glUniformBlockBinding(shader.id,transformIndex,1);
		};
		#line 66 f19__ //Call
		GLError430(str{13,(i8*)"Pre Add error"});
		#line 67 f19__ //Call
		AddUniforms433(shader);
		#line 68 f19__ //Call
		GLError430(str{14,(i8*)"post Add error"});
		#line 70 f19__ //Return
		return shader;
}
	void GLError430(str string){
		u32 err=glGetError();
		#line 76 f19__ //If
		if((err!=GL_NO_ERROR)){
			#line 78 f19__ //Call
			Error122(string);
			#line 79 f19__ //If
			if((err==GL_INVALID_ENUM)){
				#line 80 f19__ //Call
				Error122(str{24,(i8*)"OpenGL: GL_INVALID_ENUM\n"});
			};
			#line 82 f19__ //If
			if((err==GL_INVALID_OPERATION)){
				#line 83 f19__ //Call
				Error122(str{29,(i8*)"OpenGL: GL_INVALID_OPERATION\n"});
			};
			#line 85 f19__ //If
			if((err==GL_INVALID_VALUE)){
				#line 86 f19__ //Call
				Error122(str{25,(i8*)"OpenGL: GL_INVALID_VALUE\n"});
			};
			#line 88 f19__ //If
			if((err==GL_OUT_OF_MEMORY)){
				#line 89 f19__ //Call
				Error122(str{25,(i8*)"OpenGL: GL_OUT_OF_MEMORY\n"});
			};
		};
}
	void Bind431(Shader shader){
		#line 96 f19__ //Call
		GLError430(str{13,(i8*)"Pre use error"});
		#line 97 f19__ //Call
		glUseProgram(shader.id);
		#line 98 f19__ //Call
		GLError430(str{16,(i8*)"Shader use error"});
}
	u32 CompileShader432(u32 shaderType,str data,str file){
		#line 103 f19__ //If
		if((data.length==0)){
			#line 104 f19__ //Return
			return 0;
		};
		i8* source=data.chars;
		u32 shader=glCreateShader(shaderType);
		i32 s=1;
		i32* ss={0};
		#line 112 f19__ //Call
		glShaderSource(shader,s,(&source),ss);
		#line 114 f19__ //Call
		glCompileShader(shader);
		i32 status={0};
		#line 117 f19__ //Call
		glGetShaderiv(shader,GL_COMPILE_STATUS,(&status));
		#line 119 f19__ //If
		if((status==i32311(GL_FALSE))){
			#line 121 f19__ //Call
			Error122(file);
			#line 122 f19__ //Call
			Error122(str{4,(i8*)"...\n"});
			i8* buffer=Alloc9572(1024);
			i32 length={0};
			#line 126 f19__ //Call
			glGetShaderInfoLog(shader,2048,(&length),buffer);
			i64 b={0};
			#line 128 f19__ //If
			if((length>0)){
				str string={0};
				#line 131 f19__ //BinaryOp
				string.chars = buffer;
				#line 132 f19__ //BinaryOp
				string.length = i64304(length);
				#line 133 f19__ //Call
				Error122(add123(add123(add123(string,str{5,(i8*)"End: "}),file),str{1,(i8*)"\n"}));
			};
			#line 136 f19__ //Call
			glDeleteShader(shader);
			#line 137 f19__ //BinaryOp
			shader = 0;
		};
		#line 143 f19__ //Return
		return shader;
}
	void AddUniforms433(Shader shader){
		i32 activeUniforms=0;
		Array5 tname={0};
		#line 151 f19__ //Call
		Init5574(tname,256);
		#line 153 f19__ //Call
		glGetProgramiv(shader.id,GL_ACTIVE_UNIFORMS,(&activeUniforms));
		#line 154 f19__ //Call
		GLError430(str{9,(i8*)"get error"});
		i32 i={0};
		while((i<activeUniforms)){
			u32 t={0};
			i32 size={0};
			i32 len={0};
			#line 165 f19__ //Call
			glGetActiveUniform(shader.id,u32336(i),256,(&len),(&size),(&t),tname.elements);
			#line 166 f19__ //BinaryOp
			tname.length = i64304(len);
			i32 loc=glGetUniformLocation(shader.id,tname.elements);
			#line 169 f19__ //If
			if((t==GL_SAMPLER_2D)){
				i64 num=0;
				i64 mult=1;
				while(mult){
					i64 n=(i64303(OpArray19576(tname,i64304((len-1))))-48);
					#line 176 f19__ //If
					if(((n>=0)&&(n<10))){
						#line 178 f19__ //BinaryOp
						num = (num+(n*mult));
						#line 179 f19__ //BinaryOp
						mult = (mult*10);
						#line 180 f19__ //BinaryOp
						len = (len-1);
					}else{
						#line 184 f19__ //BinaryOp
						mult = 0;
						#line 185 f19__ //Call
						glProgramUniform1i(shader.id,loc,i32313(num));
						#line 186 f19__ //Call
						GLError430(str{10,(i8*)"get 2error"});
						str t={0};
						#line 188 f19__ //BinaryOp
						t.chars = tname.elements;
						#line 189 f19__ //BinaryOp
						t.length = tname.length;
					};
				};
			};
			#line 209 f19__ //BinaryOp
			i = (i+1);
		};
}
	str ReadFile434(str file){
		str r={0};
		File* f=FileOpen(file.chars,str{1,(i8*)"r"}.chars);
		#line 218 f19__ //If
		if((!f)){
			#line 219 f19__ //Call
			Error122(add123(file,str{18,(i8*)" couldnt be opened"}));
			#line 220 f19__ //Return
			return r;
		};
		#line 223 f19__ //BinaryOp
		r.chars = Alloc8571(10000);
		u64 newLen=FileRead(r.chars,1,10000,f);
		#line 225 f19__ //BinaryOp
		r.length = i64302(newLen);
		#line 226 f19__ //BinaryOp
		(*(r.chars+r.length)) = 0;
		#line 227 f19__ //Return
		return r;
}
		Mat4 GetRotationMatrix436(Quaternion q){
		Mat4 r={0};
		#line 19 f20__ //BinaryOp
		OpArray195(OpArray194(r,0),0) = ((1-((2*q.y)*q.y))-((2*q.z)*q.z));
		#line 20 f20__ //BinaryOp
		OpArray195(OpArray194(r,0),1) = (((2*q.x)*q.y)+((2*q.w)*q.z));
		#line 21 f20__ //BinaryOp
		OpArray195(OpArray194(r,0),2) = (((2*q.x)*q.z)-((2*q.w)*q.y));
		#line 22 f20__ //BinaryOp
		OpArray195(OpArray194(r,0),3) = 0;
		#line 24 f20__ //BinaryOp
		OpArray195(OpArray194(r,1),0) = (((2*q.x)*q.y)-((2*q.w)*q.z));
		#line 25 f20__ //BinaryOp
		OpArray195(OpArray194(r,1),1) = ((1-((2*q.x)*q.x))-((2*q.z)*q.x));
		#line 26 f20__ //BinaryOp
		OpArray195(OpArray194(r,1),2) = (((2*q.y)*q.z)+((2*q.w)*q.x));
		#line 27 f20__ //BinaryOp
		OpArray195(OpArray194(r,1),3) = 0;
		#line 29 f20__ //BinaryOp
		OpArray195(OpArray194(r,2),0) = (((2*q.x)*q.z)+((2*q.w)*q.y));
		#line 30 f20__ //BinaryOp
		OpArray195(OpArray194(r,2),1) = (((2*q.y)*q.z)-((2*q.w)*q.x));
		#line 31 f20__ //BinaryOp
		OpArray195(OpArray194(r,2),2) = ((1-((2*q.x)*q.x))-((2*q.y)*q.y));
		#line 32 f20__ //BinaryOp
		OpArray195(OpArray194(r,2),3) = 0;
		#line 34 f20__ //BinaryOp
		OpArray195(OpArray194(r,3),0) = 0;
		#line 35 f20__ //BinaryOp
		OpArray195(OpArray194(r,3),1) = 0;
		#line 36 f20__ //BinaryOp
		OpArray195(OpArray194(r,3),2) = 0;
		#line 37 f20__ //BinaryOp
		OpArray195(OpArray194(r,3),3) = 1;
		#line 39 f20__ //Return
		return r;
}
	Quaternion CreateQuaternion437(Vec3 axis,f32 angle){
		Quaternion r={0};
		#line 45 f20__ //BinaryOp
		r.w = cos371((angle/2));
		#line 46 f20__ //BinaryOp
		r.x = (axis.x*sin372((angle/2)));
		#line 47 f20__ //BinaryOp
		r.y = (axis.y*sin372((angle/2)));
		#line 48 f20__ //BinaryOp
		r.z = (axis.z*sin372((angle/2)));
		#line 49 f20__ //Return
		return r;
}
	Quaternion CreateQuaternion438(){
		Quaternion r={0};
		#line 55 f20__ //BinaryOp
		r.w = 1.0;
		#line 56 f20__ //BinaryOp
		r.x = 0;
		#line 57 f20__ //BinaryOp
		r.y = 0;
		#line 58 f20__ //BinaryOp
		r.z = 0;
		#line 59 f20__ //Return
		return r;
}
	void normalize439(Quaternion& v){
		f32 magnitude=sqrt369(((((v.w*v.w)+(v.x*v.x))+(v.y*v.y))+(v.z*v.z)));
		#line 65 f20__ //BinaryOp
		v.w = (v.w/magnitude);
		#line 66 f20__ //BinaryOp
		v.x = (v.x/magnitude);
		#line 67 f20__ //BinaryOp
		v.y = (v.y/magnitude);
		#line 68 f20__ //BinaryOp
		v.z = (v.z/magnitude);
}
	Quaternion mul440(Quaternion lhs,Quaternion rhs){
		Quaternion r={0};
		#line 74 f20__ //BinaryOp
		r.w = ((((lhs.w*rhs.w)-(lhs.x*rhs.x))-(lhs.y*rhs.y))-(lhs.z*rhs.z));
		#line 75 f20__ //BinaryOp
		r.x = ((((lhs.w*rhs.x)+(lhs.x*rhs.w))+(lhs.y*rhs.z))-(lhs.z*rhs.y));
		#line 76 f20__ //BinaryOp
		r.y = ((((lhs.w*rhs.y)-(lhs.x*rhs.z))+(lhs.y*rhs.w))+(lhs.z*rhs.x));
		#line 77 f20__ //BinaryOp
		r.z = ((((lhs.w*rhs.z)+(lhs.x*rhs.y))-(lhs.y*rhs.x))+(lhs.z*rhs.w));
		#line 78 f20__ //Return
		return r;
}
										;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
