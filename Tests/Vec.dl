@import {
    'dl/Math.dl',
    'dl/String.dl',
}
// asdfasdf
Vec4 struct {
    x f32
    y f32
    z f32
    w f32
}
Vec3 struct {
    x f32
    y f32
    z f32
}
Vec2 struct {
    x f32
    y f32
}
Mat4 struct {
    x Vec4
    y Vec4
    z Vec4
    w Vec4
}

String fn(v Vec4) str
{
    return '(' + String(v.x) + ',' + String(v.y) + ',' + String(v.z) + ',' + String(v.w) + ')'
}
String fn(v Vec3) str
{
    return '(' + String(v.x) + ',' + String(v.y) + ',' + String(v.z) + ')'
}
String fn(v Vec2) str
{
    return '(' + String(v.x) + ',' + String(v.y) + ')'
}

OpArray fn(matrix ref Mat4, index i64) ref Vec4 {
    return ^(cast(Vec4^, &matrix) + index)
}

OpArray fn(v ref Vec4, index i64) ref f32 {
    return ^(cast(f32^, &v) + index)
}

Mat4 fn(v f32) Mat4 {
    r Mat4
    r.x = Vec4(v, 0, 0, 0)
    r.y = Vec4(0, v, 0, 0)
    r.z = Vec4(0, 0, v, 0)
    r.w = Vec4(0, 0, 0, 1)
    return r
}

Mat4Scale fn(scale Vec3) Mat4 {
    r Mat4
    r.x = Vec4(scale.x, 0, 0, 0)
    r.y = Vec4(0, scale.y, 0, 0)
    r.z = Vec4(0, 0, scale.z, 0)
    r.w = Vec4(0, 0, 0, 1)
    return r
}

Mat4Transform fn(v Vec3) Mat4 {
    r Mat4
    r.x = Vec4(1, 0, 0, 0)
    r.y = Vec4(0, 1, 0, 0)
    r.z = Vec4(0, 0, 1, 0)
    r.w = Vec4(v.x, v.y, v.z, 1)
    return r
}

mul fn(lhs Mat4, rhs Mat4) Mat4{
    v Mat4
    r i64
    for(r < 4)
    {
        c i64
        for (c < 4)
        {
            k i64
            v[c][r] = 0
            for(k < 4)
            {
                v[c][r] = v[c][r] + lhs[k][r] * rhs[c][k]
                k = k + 1
            }
            c = c + 1
        }
        r = r + 1
    }
    return v
}

Vec4 fn(x f32, y f32, z f32, w f32) Vec4{
    v Vec4
    v.x = x
    v.y = y
    v.z = z
    v.w = w
    return v
}
Vec4 fn(v Vec3, w f32) Vec4{
    r Vec4
    r.x = v.x
    r.y = v.y
    r.z = v.z
    r.w = w
    return r
}
Vec4 fn(v f32) Vec4{
    return Vec4(v, v, v, v)
}
Vec3 fn(x f32, y f32, z f32) Vec3{
    v Vec3
    v.x = x
    v.y = y
    v.z = z
    return v
}

Vec3 fn(value f32) Vec3{
    v Vec3
    v.x = value
    v.y = value
    v.z = value
    return v
}

Vec3 fn(v Vec2) Vec3{
    r Vec3
    r.x = v.x
    r.y = v.y
    r.z = 0
    return r
}

Vec2 fn(v Vec3) Vec2{
    r Vec2
    r.x = v.x
    r.y = v.y
    return r
}
Vec2 fn(x f32, y f32) Vec2{
    v Vec2
    v.x = x
    v.y = y
    return v
}

Vec2 fn(v f32) Vec2
{
    return Vec2(v, v)
}
sub fn(lhs Vec3, rhs Vec3) Vec3{
    v Vec3
    v.x = lhs.x - rhs.x
    v.y = lhs.y - rhs.y
    v.z = lhs.z - rhs.z
    return v
}
sub fn(lhs Vec3, rhs Vec2) Vec3{
    v Vec3
    v.x = lhs.x - rhs.x
    v.y = lhs.y - rhs.y
    v.z = lhs.z
    return v
}
sub fn(lhs Vec2, rhs Vec2) Vec2{
    v Vec2
    v.x = lhs.x - rhs.x
    v.y = lhs.y - rhs.y
    return v
}
add fn(lhs Vec3, rhs Vec3) Vec3{
    v Vec3
    v.x = lhs.x + rhs.x
    v.y = lhs.y + rhs.y
    v.z = lhs.z + rhs.z
    return v
}
add fn(lhs Vec3, rhs Vec2) Vec3{
    v Vec3
    v.x = lhs.x + rhs.x
    v.y = lhs.y + rhs.y
    v.z = lhs.z
    return v
}
add fn(lhs Vec2, rhs Vec2) Vec2{
    v Vec2
    v.x = lhs.x + rhs.x
    v.y = lhs.y + rhs.y
    return v
}
mul fn(lhs Vec3, rhs Vec3) Vec3{
    v Vec3
    v.x = lhs.x * rhs.x
    v.y = lhs.y * rhs.y
    v.z = lhs.z * rhs.z
    return v
}

mul fn(l f32, r Vec4) Vec4 { return mul(r, l) }
mul fn(l Vec4, r f32) Vec4{
    v Vec4
    v.x = l.x * r
    v.y = l.y * r
    v.z = l.z * r
    v.w = l.w * r
    return v
}
mul fn(l f32, r Vec3) Vec3 { return r * l }
mul fn(l Vec3, r f32) Vec3{
    v Vec3
    v.x = l.x * r
    v.y = l.y * r
    v.z = l.z * r
    return v
}

mul fn(l f32, r Vec2) Vec2 { return r * l }
mul fn(l Vec2, r f32) Vec2{
    v Vec2
    v.x = l.x * r
    v.y = l.y * r
    return v
}

div fn(l Vec2, r f32) Vec2{
    return l * (1.0/r)
}
div fn(l Vec3, r f32) Vec3{
    return l * (1.0/r)
}
div fn(l Vec4, r f32) Vec4{
    return l * (1.0/r)
}

Dot fn(l Vec3, r Vec3) f32
{
    return l.x*r.x + l.y*r.y + l.z*r.z
}
Dot fn(l Vec2, r Vec2) f32
{
    return l.x*r.x + l.y*r.y
}
Cross fn(l Vec3, r Vec3) Vec3
{
    return Vec3(l.y*r.z - l.z*r.y, l.z*r.x - l.x*r.z, l.x*r.y - l.y*r.x)
}

Length fn(v Vec3) f32
{
    return sqrt(v.x*v.x + v.y*v.y + v.z*v.z)
}
Length fn(v Vec2) f32
{
    return sqrt(v.x*v.x + v.y*v.y)
}

Normalize fn(v Vec3) Vec3
{
    return v * 1.0/Length(v)
}
Normalize fn(v Vec2) Vec2
{
    return v * 1.0/Length(v)
}
