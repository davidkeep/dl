@import 
{
	'dl/Array.dl',
	'dl/String.dl',
	'Vec.dl',
	'Sprite.dl',
	'Transform.dl',
}

Entity struct {
    id i64
    version i64
}

World struct
{
    count i64
    components Array(i64)
    entities Array(Entity)
    transforms Array(Transform)
    sprites Array(Sprite)
}
world World

Init fn(world ref World) { 
    size i64 = 1000
    Init(world.components, size)
    Init(world.entities, size)
    Init(world.transforms, size)
    Init(world.sprites, size)
    world.count = 1
}

Bits fn(type Transform) i64 {
    return BitShiftLeft(1, 0)
}

Bits fn(type Sprite) i64 {
    return BitShiftLeft(1, 1)
}


Components fn(type Transform) ref Array(Transform) {
    return world.transforms
}
Components fn(type Sprite) ref Array(Sprite) {
    return world.sprites
}

Retrieve fn(i i64, a ref A?^, b ref B?^, c ref C?^) i8
{
    if (Bits(A) | Bits(B) | Bits(C)) & world.components[i] {
        a = &Components(A)[i]
        b = &Components(B)[i]
        c = &Components(C)[i]
        return true
    }
    return false
}

Retrieve fn(i i64, a ref A?^, b ref B?^) i8
{
    if (Bits(A) | Bits(B)) & world.components[i] {
        a = &Components(A)[i]
        b = &Components(B)[i]
        return true
    }
    return false
}

Retrieve fn(i i64, a ref A?^) i8
{
    if (Bits(A)) & world.components[i] {
        a = &Components(A)[i]
        return true
    }
    return false
}

AddComponent fn(type T?, entity Entity) ref T
{
	world.components[entity.id] = world.components[entity.id] | Bits(T)
    return Components(T)[entity.id]
}

CreateEntity fn() Entity 
{
    entity Entity
    entity.id = world.count
    world.components[entity.id] = 0
    world.count = world.count + 1
    return entity
}
