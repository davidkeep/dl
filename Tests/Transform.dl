//
//  Transform.dl
//  Created by David on 6/10/16.
//

@import {
    'World.dl'
}

Transform struct 
{
    entity Entity
    matrix Mat4
    position Vec3
    scale Vec3
    parent Transform^
    children DynamicArray(Transform^)
}

Transform fn(entity Entity) Transform^
{
    transform Transform^ = &AddComponent(Transform, entity)
    transform.matrix = Mat4(1.0)
    transform.scale = Vec3(1.0)
    transform.entity = entity
    return transform
}

Scale fn(self Transform) Vec3 {
    return self.scale
}
Scale fn(self ref Transform, scale Vec3) {
    self.scale = scale
    Recalculate(self)
}
Position fn(self ref Transform) Vec3 {
    return self.position
}
Position fn(self ref Transform, position Vec3) {
    self.position = position
    Recalculate(self)
}
WorldPosition fn(self Transform) Vec3
{
    return Vec3(self.matrix[3].x, self.matrix[3].y, self.matrix[3].z)
}
Recalculate fn(self ref Transform) 
{
    self.matrix = Mat4Transform(self.position) * Mat4Scale(self.scale)
    if self.parent {
        self.matrix = self.parent.matrix * self.matrix
    }
    for i64(0) .. self.children.length {
        Recalculate(^(self.children[it]))
    }
}

Parent fn(self ref Transform, parent ref Transform)
{
    self.parent = &parent
    Push(parent.children, &self)
    Recalculate(self)
    Recalculate(parent)
}
