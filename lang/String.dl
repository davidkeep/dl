//
//  String.dl
//  Created by David on 10/20/16.
//

struct str {
    int length
    uint8^ chars
}

fn Print(str string){
    for int(0) .. string.length {
        putchar(int32(^(string.chars + it)))
    }
}

fn Println(str string){
    Print(string + "\n")
}

fn add(str a, str b) str
{
    str v
    AllocPtr(v.chars, a.length + b.length + 1)
    CopyPtr(a.chars, v.chars, a.length)
    CopyPtr(b.chars, v.chars + a.length, b.length)

    v.length = a.length + b.length
    ^(v.chars + v.length) = 0
    return v
}

fn String(uint8^ chars, int length) str
{
    str string
    string.chars = chars
    string.length = length
    return string
}

fn String(int number) str
{
    if number == 0 {
        return "0"
    }
    
    int8 negative = 0
    if number < 0 {
        negative = 1
        number = 0-number
    }

    int n = number
    int count = 0
    for n {
        n = n / 10
        count = count + 1
    }

    Array:(uint8) int8acters
    Init(int8acters, count + 1)

    int i
    for number {
        int8acters[count - i - 1] = uint8(number % 10 + 48)
        number = number / 10
        i = i + 1
    }
    //int8acters[count] = cast(int8, number + 48)
    int8acters[count] = 0
    str r
    r.length = count
    r.chars = int8acters.elements

    if(negative) {
        return "-" + r
    }
    return r
}

fn String(float32 number) str
{
    int top = cast(number, int)
    float32 fnumber = number
    if top < 0 {
        fnumber = 0.0 - fnumber
    }
    int bottom = int((fnumber - float32(int(fnumber))) * 1000)

    str r = String(top)
    if bottom {
        r = r + "." + String(bottom)
    }
    return r
}

fn equal(str l, str r) int
{
    if l.length != r.length
    {
        return 0
    }

    for int(0) .. l.length
    {
        int8 ll = ^(l.chars + it)
        int8 rr = ^(r.chars + it)
        if int(ll) != int(rr)
        {
            return 0
        }
    }
    return 1
}

fn Hash(str string) int
{
    int hash = 5381
    for int(0) .. string.length {
        //hash = ((hash << 5) + hash) + '(string.chars + i)
        hash = ((hash + 5) + hash) + int(^(string.chars + it)) 
    }
    return hash
}
