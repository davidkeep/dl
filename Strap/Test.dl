


str struct 
{
	length i64
}

* fn(left str, right str) str {

}

//Basic trait 
//{
//	Init fn(self ref Basic)
//	Drop fn(self ref Basic)

//	Size fn(Basic)

//}


Any trait
{
	//Init fn(self ref Basic)
	//Drop fn(self ref Basic)

}


Array struct ($Type)
{
	length i64
	data Type
}

Duck struct ($Type)
{
	length i64
	data ref Type
}
  
At fn(self Array($T), at i64) {

}

Pop fn(self Array($Type)) {

	ss Array(Type)
	ass Array(Type)


	//self.data
	aa i64

	aa * aa

	ss = ass

	at i64
	At(self, at)
}

ASD fn(self Array(i32)) {

}

//List trait ($Type)
//{
//	Pop fn(self List)
//}


//Array require List


Main fn () 
{
	string str

	//string * string

	value i64
	value * value + value

	t Array(i32)
	Pop(t)
	ASD(t)


	ts Array(i32)

	t = ts
	t.data

	//tss Array(i64)
	//tss.Pop()
}
