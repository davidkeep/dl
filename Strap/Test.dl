

@extern {
	putchar fn(character i32) i32
}



Str struct 
{
	chars ref? i32
	length i64
}

+ fn(left Str, right Str) Str {

}

//Basic trait 
//{
//	Init fn(self ref Basic)
//	Drop fn(self ref Basic)

//	Size fn(Basic)

//}

//Any trait
//{
//	Init fn(self ref Basic)
//	Drop fn(self ref Basic)
//}

//Array struct ($Type)
//{
//	length i64
//	data ref Type
//}

//Duck struct ($Type)
//{
//	length i64
//	data ref Type
//}
//Set fn(adadsf i32) {

//}

//Set fn(adadsf i64) {

//}
  
//At fn(self Array($T), at i64) {
//	one i32
//	two i64

//	for [one, two] {
//		Set(it)
//	}

//}


//Pop fn(self Array($Type)) {

//	ss Array(Str)
//	ass Array(Type)


//	//self.data
//	aa i64
//	at i64 
//	at = aa * aa
//	At(self, at)
//}

//ASD fn(self Array(i32)) {

//}


//List trait ($Type)
//{
//	Pop fn(self List)
//}


//Array require List

//Printable trait
//{
//	Print fn(self Printable)
//}

//Print fn(l Printable, r Printable) {
//	Print(l)
//	Print(r)
//}

//Test fn(typeof i32) {

//}
//Test fn(typeof i64) {
//	v i32
//	v = 5
//}

//Test fn(typeof Array) {

//}

//Test fn(af i32) {

//}


//Print fn (string ref i8) {

//	at i32
//	//for dref(string + at) != cast(i8, 0) {
//	//	putchar(cast(i32, dref(string + at)))
//	//	at = at + 1
//	//}
//}

Print fn () {
	at i32
	putchar(at)
}


Main fn () i32
{
	//string Str

	//string + string
	Print()

	value i32
	value = 40
	value * value + value


	putchar(value)
	putchar(value)

	//alue i32

	//chars ref i8
	//chars = 'Hello World\n'
	////chars = chars + value
	////chars? = 65
	Print()
	Print()
	Print()
	Print()


	//at i32
	//putchar(at)
	//putchar(at)

	//at = 40
	////t = ts

	//array Array(i8)
	////array.data = 'Hello World\n'
	//asdf i32
	//asdf = t.data


}

