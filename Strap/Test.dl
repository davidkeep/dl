

@extern {
	putchar fn(character i32) i32
}



Str struct 
{
	chars ref i32
	length i64
}

//+ fn(left Str, right Str) Str {

//}

//Basic trait 
//{
//	Init fn(self ref Basic)
//	Drop fn(self ref Basic)

//	Size fn(Basic)

//}

//Any trait
//{
//	Init fn(self ref Basic)
//	Drop fn(self ref Basic)
//}

//Array struct ($Type)
//{
//	length i64
//	data ref Type
//}

//Duck struct ($Type)
//{
//	length i64
//	data ref Type
//}
//Set fn(adadsf i32) {

//}

//Set fn(adadsf i64) {

//}
  
//At fn(self Array($T), at i64) {
//	one i32
//	two i64

//	for [one, two] {
//		Set(it)
//	}

//}


//Pop fn(self Array($Type)) {

//	ss Array(Str)
//	ass Array(Type)


//	//self.data
//	aa i64
//	at i64 
//	at = aa * aa
//	At(self, at)
//}

//ASD fn(self Array(i32)) {

//}


//List trait ($Type)
//{
//	Pop fn(self List)
//}


//Array require List

//Printable trait
//{
//	Print fn(self Printable)
//}

//Print fn(l Printable, r Printable) {
//	Print(l)
//	Print(r)
//}

//Test fn(typeof i32) {

//}
//Test fn(typeof i64) {
//	v i32
//	v = 5
//}

//Test fn(typeof Array) {

//}

//Test fn(af i32) {

//}



Deeper fn (asdf i32, bs i32) {
	a i32
	a = 5
	putchar(49)
		putchar(49)
	putchar(49)

}

Print fn (asdf i32, b i32) {
	at i32
	at = 50
	for asdf .. b {
		putchar(it)
	}
	putchar(at)
	putchar(asdf)
	putchar(b)

	if 0 == 0 {
		putchar(b)
		putchar(b)
		putchar(b)
		putchar(b)
		putchar(b)
		putchar(b)
		putchar(b)
		putchar(b)
		putchar(b)
	}

	if 5 == 5 {
		putchar(asdf)
		putchar(asdf)
		putchar(asdf)
		putchar(asdf)

	}
	//Deeper(at, at)
	//	putchar(asdf)
	//	asd i32
	//Deeper(at, at)
	//		putchar(asdf)

}

Print fn (chars ref i8) {

	a ref i8
	a = chars

	for i32(dref(a)) != 0 {
		putchar(i32(dref(a)))
		a = a + i64(1)
	}
}


Main fn () i32
{
	//string Str



	c i32
	c = 55

	a ref i8
	a = 'a test'
	Print(a)




	//string + string
	//a i32 
	//a = 50
	//value i32
	//value = 40 + a
	//value  = value * value

	//Print(48, 55)


	//b i32 
	//b = 50
}

