

@extern {
	putchar fn(character i32) i32
}



Str struct 
{
	chars ref? i32
	length i64
}

+ fn(left Str, right Str) Str {

}

//Basic trait 
//{
//	Init fn(self ref Basic)
//	Drop fn(self ref Basic)

//	Size fn(Basic)

//}

//Any trait
//{
//	Init fn(self ref Basic)
//	Drop fn(self ref Basic)
//}

Array struct ($Type)
{
	length i64
	data Type
}

Duck struct ($Type)
{
	length i64
	data ref Type
}
Set fn(adadsf i32) {

}

Set fn(adadsf i64) {

}
  
At fn(self Array($T), at i64) {
	one i32
	two i64

	for [one, two] {
		Set(it)
	}

}


Pop fn(self Array($Type)) {

	ss Array(Str)
	ass Array(Type)


	//self.data
	aa i64
	at i64 
	at = aa * aa
	At(self, at)
}

ASD fn(self Array(i32)) {

}


//List trait ($Type)
//{
//	Pop fn(self List)
//}


//Array require List

//Printable trait
//{
//	Print fn(self Printable)
//}

//Print fn(l Printable, r Printable) {
//	Print(l)
//	Print(r)
//}

Test fn(typeof i32) {

}
Test fn(typeof i64) {

}

Test fn(typeof Array) {

}

Test fn(af i32) {

}

//T fn(self $T) 
//{

//}

Main fn () i32
{


	string Str

	//string + string

	value i64
	value * value + value


	alue i32
	chars ref? i32
	//T(chars)

	chars + value
	//putchar()

	//for [alue, value, value + value] {
	//	Set(it)
	//}
	for [65, 66, 67, 83, 84, 85] {
		putchar(it)
	}

	t Array(i32)
	Pop(t)
	Pop(t)
	ASD(t)


	ts Array(i64)
	Pop(ts)

	//t = ts
	//asdf i32
	//asdf = t.data


}
