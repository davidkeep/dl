@import {
	'Ast.dl',
}

PrintVisitor struct {
	indent i32
}
PrintIndent fn(visitor ref PrintVisitor)
{
	for i64(1) .. visitor.indent {
		Print('\t')
	}
}

Print fn(expr ref Expr) {
	printer PrintVisitor
	expr.Visit(printer)
}

Print fn(expr ref Type) {
	printer PrintVisitor
	expr.Visit(printer)
}

Visit fn(expr ref Expr, visitor ref PrintVisitor)
{
	if expr.Is(Block) {
		self Block^ = expr.As(Block)
		if visitor.indent {
			Println('{')
		}
		visitor.indent = visitor.indent + 1

		for i64(0) .. self.expressions.length
		{
			visitor.PrintIndent()
			self.expressions[it].Visit(visitor)
			Println('')
		}
		visitor.indent = visitor.indent - 1

		if visitor.indent {
			Println('}')
		}
		return
	}

	if expr.Is(Structure) {
		self Structure^ = expr.As(Structure)
		Print(self.ident)
		Print(' struct')
		if !self.incomplete {
			Println(' {')
			visitor.indent = visitor.indent + 1
			for i64(0) .. self.fields.length {
				visitor.PrintIndent()
				Print(self.fields[it].ident)
				Print(' ')
				self.fields[it].super.typ.Visit(visitor)
				Println('')
			}
			visitor.indent = visitor.indent - 1
			Println('}')
		}
		else
		{
			Println('')
		}
		return
	}

	if expr.Is(Function) {
		self Function^ = expr.As(Function)
		Print(self.ident)
		Print(' fn')
		Print(self.params.super)
		self.block.super.Visit(visitor)
		return
	}

	if expr.Is(Identifier) {
		self Identifier^ = expr.As(Identifier)
		Print(self.ident)
		return
	}

	if expr.Is(Call) {
		self Call^ = expr.As(Call)
		self.operand.Visit(visitor)
		self.params.super.Visit(visitor)
		return
	}

	if expr.Is(ExpressionList) {
		self ExpressionList^ = expr.As(ExpressionList)
		Print('(')
		for i64(0) .. self.list.length {
			self.list[it].Visit(visitor)
			if it != self.list.length - 1 {
				Print(', ')
			}
		}
		Print(')')
		return
	}


	if expr.Is(Variable) {
		self Variable^ = expr.As(Variable)
		Print(self.ident)
		Print(' ')
		expr.typ.Visit(visitor)
		return
	}

    if expr.Is(Trait) {
        self Trait^ = expr.As(Trait)
        Print(self.ident)
        Print(' trait')
        visitor.indent = visitor.indent + 1
        Println(' {')

        visitor.indent = visitor.indent - 1
        Println('}')
        return
    }
	Println('Unhandled print expr visit')
}

Visit fn(expr ref Type, visitor ref PrintVisitor)
{
	if expr.Is(TypePointer) {
		self TypePointer^ = expr.As(TypePointer)
		Print('^')
		self.pointed.Visit(visitor)
		return
	}
	if expr.Is(TypeIdentifier) {
		self TypeIdentifier^ = expr.As(TypeIdentifier)
		Print(self.ident)
		return
	}
	if expr.Is(TypeAny) {
		self TypeAny^ = expr.As(TypeAny)
		Print('$')
		Print(self.ident)
		if self.reference {
			Print('->')
			Print(^self.reference)
		}
		return
	}
	if expr.Is(TypeGeneric) {
		self TypeGeneric^ = expr.As(TypeGeneric)
		Print(self.ident.super)
		Print('(')
		for i64(0) .. self.constraints.length {
			Print(^self.constraints[it])
			if it != self.constraints.length - 1 {
				Print(',')
			}
		}
		Print(')')
		return
	}
	Println('Unhandled type visit')
}
