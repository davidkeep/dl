@import {
	'Ast.dl',
	'Intrinsic.dl',
	'Print.dl',
}

Semantic struct {
	error i8
	intrinsic Intrinsics
	scopes DynamicArray(Block^)
}

Init fn(semantic ref Semantic, ast ref Block)
{
	semantic.scopes.Push(&ast)

    semantic.intrinsic.Init(semantic, ast)

	for i64(0) .. ast.expressions.length {
		expr Expr^ = ast.expressions[it]
		semantic.Declare(^expr)
	}
    semantic.scopes.Pop()

	semantic.Visit(ast.super)
}

FindPrivate fn(semantic ref Semantic, ident str) Expr^ {
	scope Block^ =  semantic.scopes.Last()
	for scope
	{
		expr Expr^ = scope.Lookup(ident)
		if expr 
		{
			return expr
		}
		scope = scope.outer
	}
	return cast(Expr^, 0)
}

FindType fn(semantic ref Semantic, ident str) Expr^ {
	expr Expr^ = semantic.FindPrivate(ident)
	Assert(expr, 'No known type named ' + ident)
	return expr
}
FindVariable fn(semantic ref Semantic, ident str) Expr^ {
	expr Expr^ = semantic.FindPrivate(ident)
	Assert(expr, 'No known variable named ' + ident)
	return expr
}

FindMatch fn(semantic ref Semantic, ident str, args ref ExpressionList) TypeFunctions^ 
{
	scope Block^ =  semantic.scopes.Last()
	for scope
	{
		expr TypeFunctions^ = scope.LookupFns(ident)
		if expr 
		{
			return expr
		}
		scope = scope.outer
	}
	Assert(0, 'No known function named ' + ident)
	return cast(TypeFunctions^, 0)
}

Declare fn(block ref Block, expr ref Expr) {
	if expr.Is(Structure) {
		self Structure^ = expr.As(Structure)
		block.Insert(self.ident, &expr)
	}
	else if expr.Is(Function) {
		self Function^ = expr.As(Function)
		block.InsertFn(self.ident, self)
	}
	else if expr.Is(Variable) {
		self Variable^ = expr.As(Variable)
		block.Insert(self.ident, &expr)
	}
    else if expr.Is(Trait) {
        self Trait^ = expr.As(Trait)
        block.Insert(self.ident, &expr)
    }
    else if expr.Is(TypeAs) {
        self TypeAs^ = expr.As(TypeAs)
        block.Insert(self.ident, &expr)
    }
    else if expr.Is(Require) {
    }
	else {
 		Assert(0, 'Expected Structure, Function, Trait, or Variable')
	}
}


Declare fn(semantic ref Semantic, expr ref Expr) {
	semantic.scopes.Last().Declare(expr)
}

Visit fn(semantic ref Semantic, expr ref Expr)
{
	if expr.Is(Block) {
		self Block^ = expr.As(Block)
		if semantic.scopes.length {
			if !self.outer {
				self.outer = semantic.scopes.Last()
                Assert(cast(i64, self) != cast(i64, self.outer))
			}
		}
		semantic.scopes.Push(self)

		for i64(0) .. self.expressions.length {
			expr Expr^ = self.expressions[it]
			semantic.Visit(^expr)
		}
		semantic.scopes.Pop()
		return
	}
	if expr.Is(Structure) {
		self Structure^ = expr.As(Structure)

		self.block.outer = semantic.scopes.Last()
        Assert(cast(i64, &self.block) != cast(i64, self.block.outer))

		semantic.scopes.Push(&self.block)
		for i64(0) .. self.constraints.length {
			any TypeAny^ = self.constraints[it].As(TypeAny)
			as TypeAs^ = New(TypeAs)
			as.super.typ = &any.super
			as.ident = any.ident
			semantic.Declare(as.super)
		}	
		for i64(0) .. self.fields.length {
			semantic.Visit(self.fields[it].super)
		}		
		//for i64(0) .. self.fields.length {
  //      	semantic.Annotate(^self.fields[it].super.typ)
 	//	}
 		semantic.scopes.Pop()
		return
	}
	if expr.Is(Function) {
		self Function^ = expr.As(Function)
		if self.block 
		{
			self.block.parent = self
	        if(!self.block.outer) {
	            self.block.outer = semantic.scopes.Last()
	            Assert(cast(i64, &self.block) != cast(i64, self.block.outer))
	        }
			semantic.scopes.Push(self.block)
			for i64(0) .. self.params.list.length {
				variable Variable^ = self.params.list[it].As(Variable)
				semantic.Declare(variable.super)
				semantic.AnnotateGeneric(^variable.super.typ, ^self)
			}
			if self.result {
				semantic.AnnotateGeneric(^self.result, ^self)
			}
			semantic.scopes.Pop()
			semantic.Visit(self.block.super)
		}
		else {
			for i64(0) .. self.params.list.length {
				variable Variable^ = self.params.list[it].As(Variable)
				semantic.AnnotateGeneric(^variable.super.typ, ^self)
			}
			if self.result {
				semantic.AnnotateGeneric(^self.result, ^self)
			}
		}
		return
	}
	if expr.Is(Variable) {
		self Variable^ = expr.As(Variable)
		semantic.Declare(self.super)
		semantic.Annotate(^self.super.typ)
		return
	}
	if expr.Is(Identifier) {
		self Identifier^ = expr.As(Identifier)
		referenced Expr^ = semantic.FindVariable(self.ident)
		self.reference = referenced
		self.super.typ = referenced.typ
		Assert(self.super.typ, 'Expect type to be non nil')
		return
	}
	if expr.Is(Access) {
		self Access^ = expr.As(Access)
		semantic.Visit(^self.operand)
		typ Type^ = self.operand.typ.Resolved()
		spec Expr^ = typ.ResolveSpec()

		if self.operand.typ.Resolved().Is(TypeIdentifier)
		{
			structure Structure^ = self.operand.typ.Resolved().As(TypeIdentifier).spec.As(Structure)
			variable Variable^ = structure.Lookup(self.field)
			if !variable 
			{
				Assert(0, 'Could not find field named ' + self.field)
			}
			self.super.typ = variable.super.typ
		}
        else if spec {
        	sspec StructureSpec^ = spec.As(StructureSpec)
			variable Variable^ = sspec.structure.Lookup(self.field)
        	if !variable 
			{
				Assert(0, 'Could not find field named ' + self.field)
			}
			sspec.structure.Apply(^sspec)
        	self.super.typ = variable.super.typ
        }
        else {
            Assert(0, 'Unhandled type after . access, expected structure')
        }
		//self.super.typ = typ.typ
		Assert(self.super.typ, 'Access expect type to be non nil')
		return
	}
	if expr.Is(Call) {
		self Call^ = expr.As(Call)
		if self.operand.Is(Identifier) 
		{
			semantic.Visit(self.params.super)

			funcs TypeFunctions^ = semantic.FindMatch(self.operand.As(Identifier).ident, self.params)
			found Function^
			foundKnown Known

			for i64(0) .. funcs.functions.length {
				f Function^ = funcs.functions[it]
				if f.params.list.length == self.params.list.length 
				{
					matched i8 = 1
					known Known
					for i64(0) .. f.params.list.length {
						if !Apply(self.params.list[it].typ, f.params.list[it].typ, known)
						{
							matched = 0
						}
					}
					if matched {
						found = f
						foundKnown = known
					}
				}	
			}
			if !found {
				Print(self.operand.As(Identifier).ident)
				Print('(')
				for i64(0) .. self.params.list.length {
					Print(^self.params.list[it].typ)
					if(it != self.params.list.length - 1) {
						Print(', ')
					}
				}
				Println(')')
				//Print(self.super)
				for i64(0) .. self.params.list.length {
					Print(^self.params.list[it].typ)
				}
				Assert(0, 'No match for function: ' + self.operand.As(Identifier).ident)
			}

			if foundKnown.known.length 
			{
				//Specialize also sets the typ of Call^ 
				//If not we would need to call Apply() to figure out the functions return type
				spec FunctionSpec^ = found.Specialize(self, semantic.scopes.Last().parent, foundKnown)
				Assert(spec)
				self.func = &spec.super
				spec.Apply()
				if found.result {
					self.super.typ = found.result.Resolved().Clone()
				}
				spec.Clear()
			}
			else 
			{
				self.func = &found.super
				self.super.typ = found.result
			}
		}
		else
		{
			Assert(0, 'Call without identifier as operand')
		}
		return
	}

	if expr.Is(ExpressionList) {
		self ExpressionList^ = expr.As(ExpressionList)
		Assert(self, 'nil')
		for i64(0) .. self.list.length {
			Assert(self.list[it], 'nil item in list')

			semantic.Visit(^self.list[it])
			Assert(self.list[it].typ, 'Type should be non nil')
		}
		return
	}
    if expr.Is(Trait) {
        self Trait^ = expr.As(Trait)
        return
    }

    if expr.Is(NumberConstant) {
        self NumberConstant^ = expr.As(NumberConstant)
        self.super.typ = semantic.FindType('i32').typ.As(TypeType).reference
        Assert(self.super.typ)
        return
    }
    if expr.Is(StringConstant) {
        self StringConstant^ = expr.As(StringConstant)
        tt Type^ = semantic.FindType('i8').typ.As(TypeType).reference
 		t TypeRef^ = New(TypeRef)
 		t.reference = tt
        self.super.typ = &t.super
        return
    }
 	if expr.Is(ForList) {
        self ForList^ = expr.As(ForList)
        semantic.Visit(self.list.super)
        if !self.it {
	        variable Variable^ = New(Variable)
	        variable.ident = 'it'
	        variable.super.typ = self.list.list[0].typ
	        self.it = variable

	        self.block.expressions.Insert(0, &variable.super)
		}
        semantic.Visit(self.block.super)
        return
    }
     if expr.Is(For) {
        self For^ = expr.As(For)
        semantic.Visit(^self.from)
        if !self.it {
	        variable Variable^ = New(Variable)
	        variable.ident = 'it'
	        variable.super.typ = self.from.typ
	        self.it = variable
	        self.block.Declare(variable.super)
	        //self.block.expressions.Insert(0, &variable.super)
		}
        if self.to {

        	self.block.outer = semantic.scopes.Last()
			semantic.scopes.Push(self.block)
        	semantic.Visit(^self.to)
        	
        	if !self.test 
        	{
        		it Identifier^ = Identifier()
				it.ident = 'it'


				self.test = Call()
				ident Identifier^ = Identifier()
				ident.ident = '<'
				self.test.operand =&ident.super
				self.test.params.list.Push(&it.super)
				self.test.params.list.Push(self.to)
			}
			if !self.inc {
				ident Identifier^ = Identifier()
				ident.ident = 'it'

				constant NumberConstant^ = New(NumberConstant)
				constant.value = '1'

				add Identifier^ = Identifier()
				add.ident = '+'

				call Call^ = Call()
				call.operand = &add.super
				call.params.list.Push(&ident.super)
				call.params.list.Push(&constant.super)
				assign Assign^ = New(Assign)
				assign.left = &ident.super
				assign.right = &call.super

				self.inc = &assign.super
			}
			semantic.Visit(self.test.super)
			semantic.Visit(^self.inc)
			semantic.scopes.Pop()
        }


        semantic.Visit(self.block.super)
        return
    }
    if expr.Is(Assign) {
        self Assign^ = expr.As(Assign)
        semantic.Visit(^self.left)
        semantic.Visit(^self.right)

        typeLeft Type^ = self.left.typ.Resolved()
        typeRight Type^ = self.right.typ.Resolved()
        count i32

        for typeLeft.Is(TypeRef) && !typeRight.Is(TypeRef) {
        	typeLeft = typeLeft.As(TypeRef).reference.Resolved()
        	count = count + 1
        }
        if count {
        	Println('Stripped ' + String(count) + ' references')
        }
        self.drefCount = count
        if !Equal(typeLeft, typeRight)
        {
        	Println('')
        	PrettyPrint(self.left.typ)
        	Print(' cannot be assigned a value of type ')
        	PrettyPrint(self.right.typ)
        	Println('')
        	Assert(0, '')
        	semantic.error = true
        }
        
        return
    }
    if expr.Is(If) 
    {
    	self If^ = expr.As(If)
    	semantic.Visit(^self.condition)
    	if !Equal(self.condition.typ, semantic.intrinsic.i8_.typeIdent) {
    		Assert(0, 'Expected condition to be of type Bool, did you mean to use "=="')
    	}
    	semantic.Visit(self.trueBranch.super)

        return
    }
    if expr.Is(Branch) {
        return
    }

	Println('Unhandled visit ' + String(expr.kind))
}

AnnotateGeneric fn(semantic ref Semantic, typ ref Type, spec ref Function)
{
	if typ.Is(TypeAny) {
		self TypeAny^ = typ.As(TypeAny)
		spec.AddAny(self)
		return
	}
	if typ.Is(TypeRef) {
		self TypeRef^ = typ.As(TypeRef)
		semantic.AnnotateGeneric(^self.reference, spec)
		return
	}
	if typ.Is(TypeOption) {
		self TypeOption^ = typ.As(TypeOption)
		semantic.AnnotateGeneric(^self.reference, spec)
		return
	}
	if typ.Is(TypeIdentifier) {
		self TypeIdentifier^ = typ.As(TypeIdentifier)
		self.spec = semantic.FindType(self.ident)
		return
	}
	if typ.Is(TypeGeneric) {
		self TypeGeneric^ = typ.As(TypeGeneric)
		semantic.AnnotateGeneric(self.ident.super, spec)
		for i64(0) .. self.constraints.length {
			semantic.AnnotateGeneric(^self.constraints[it], spec)
		}
		structure Structure^ = self.ident.spec.As(Structure)
		structure.Specialize(self.constraints)
		return
	}
	if typ.Is(TypeType) {
		self TypeType^ = typ.As(TypeType)
		semantic.AnnotateGeneric(^self.reference, spec)
		return
	}
	Assert(0, 'No annotate generic for type ' + String(typ.kind))
}

Annotate fn(semantic ref Semantic, typ ref Type)
{
	if typ.Is(TypeRef) {
		self TypeRef^ = typ.As(TypeRef)
		semantic.Annotate(^self.reference)
		return
	}
	if typ.Is(TypeIdentifier) {
		self TypeIdentifier^ = typ.As(TypeIdentifier)
        if !self.spec {
            self.spec = semantic.FindType(self.ident)
        }
		return
	}
	if typ.Is(TypeGeneric) {
		self TypeGeneric^ = typ.As(TypeGeneric)
		semantic.Annotate(self.ident.super)
		for i64(0) .. self.constraints.length {
			semantic.Annotate(^self.constraints[it])
		}
		structure Structure^ = self.ident.spec.As(Structure)
		self.spec = &structure.Specialize(self.constraints).super
		return
	}
	if typ.Is(TypeType) {
		self TypeType^ = typ.As(TypeType)
		semantic.Annotate(^self.reference)
		return
	}
	if typ.Is(TypeOption) {
		self TypeOption^ = typ.As(TypeOption)
		semantic.Annotate(^self.reference)
		return
	}
	Assert(0, 'No semantic annotate for type ' + String(typ.kind))
}

// Strips of typedefs etc to get to the true underlying type
Resolved fn(typ ref Type) Type^ {
	if typ.Is(TypeAny) { 
		any TypeAny^ = typ.As(TypeAny)
		if any.reference {
			return any.reference.Resolved()
		}
	}
	if typ.Is(TypeIdentifier) {
		ident TypeIdentifier^ = typ.As(TypeIdentifier)
		if ident.spec.Is(TypeAs) {
			return ident.spec.typ.Resolved()
		}
	}
	return &typ
}


// Strips everythintg until it hits a Structure, StructureSpec 
// A fully annotated type will always resolve to a spec
ResolveSpec fn(typ ref Type) Expr^ {
	t Type^ = typ.Resolved()
	if typ.Is(TypeGeneric) { 
		self TypeGeneric^ = t.As(TypeGeneric)
		Assert(self.spec, 'Generic type not annotated')
		return self.spec
	}
	return cast(Expr^, 0)
}

Apply fn(argument Type^, parameter Type^, known ref Known) i8 {
	arg Type^ = argument.Resolved()
	param Type^ = parameter.Resolved()
	verbose i8
	if arg.kind == param.kind {

		if arg.Is(TypeRef) 
		{
			argPtr TypeRef^ = arg.As(TypeRef)
			paramPtr TypeRef^ = param.As(TypeRef)

			return Apply(argPtr.reference, paramPtr.reference, known)
		}
		if arg.Is(TypeOption) 
		{
			argPtr TypeOption^ = arg.As(TypeOption)
			paramPtr TypeOption^ = param.As(TypeOption)

			return Apply(argPtr.reference, paramPtr.reference, known)
		}
		if arg.Is(TypeIdentifier) 
		{
			argIdent TypeIdentifier^ = arg.As(TypeIdentifier)
			paramIdent TypeIdentifier^ = param.As(TypeIdentifier)
			return cast(i64, argIdent.spec) == cast(i64, paramIdent.spec)
		}
		if arg.Is(TypeGeneric) 
		{
			argGen TypeGeneric^ = arg.As(TypeGeneric)
			paramGen TypeGeneric^ = param.As(TypeGeneric)
			if !Equal(&argGen.ident.super, &paramGen.ident.super) {
				if verbose { 
					Println('Failed in type gen spec')
				}
				return false
			}
			if argGen.constraints.length != paramGen.constraints.length {
				return false
			}

			for i64(0) .. argGen.constraints.length {
				if !Apply(argGen.constraints[it], paramGen.constraints[it], known) {
					return false
				}
			}
			return true
		}
		if arg.Is(TypeType) 
		{
			a TypeType^ = arg.As(TypeType)
			p TypeType^ = param.As(TypeType)

			return Apply(a.reference, p.reference, known)
		}
	}

	if param.Is(TypeAny) {
		if verbose { 
			Print('Resolved type is: ') 
			Print(^arg)
			Println('')
		}
		return known.Add(param.As(TypeAny), arg)
		return true
	}
	if verbose { 
		Println('Failed a bottom apply :')
	}
	return false
}

Equal fn(left DynamicArray(Type^), right DynamicArray(Type^)) i8 {
	if left.length != right.length {
		return false
	}

	for i64(0) .. left.length {
		if !Equal(left[it], right[it]) {
			return false
		}
	}
	return true
}

Equal fn(from Type^, to Type^) i8 {

	if cast(i64, !from) || cast(i64, !to) {
		if !(from == to) {
			return false
		}
		return true
	}

	f Type^ = from.Resolved()
	t Type^ = to.Resolved()

	if f.kind != t.kind {
		return false
	}

	if f.Is(TypeRef) {
		fPtr TypeRef^ = f.As(TypeRef)
		tPtr TypeRef^ = t.As(TypeRef)
		return Equal(fPtr.reference, tPtr.reference)
	}

	if f.Is(TypeIdentifier) {
		fIdent TypeIdentifier^ = f.As(TypeIdentifier)
		tIdent TypeIdentifier^ = t.As(TypeIdentifier)
		Assert(fIdent.spec, 'f spec nil')
		Assert(tIdent.spec, 't spec nil')
		return cast(i64, fIdent.spec) == cast(i64, tIdent.spec)
	}

	if f.Is(TypeAny) {
		fAny TypeAny^ = f.As(TypeAny)
		tAny TypeAny^ = t.As(TypeAny)
		//Assert(!tAny.reference, 'f spec nil')
		//Assert(!fAny.reference, 't spec nil')
		return cast(i64, fAny) == cast(i64, tAny)
	}

	if f.Is(TypeType) {
		fType TypeType^ = f.As(TypeType)
		tType TypeType^ = t.As(TypeType)
		return Equal(fType.reference, tType.reference)
	}
	if f.Is(TypeOption) {
		fType TypeOption^ = f.As(TypeOption)
		tType TypeOption^ = t.As(TypeOption)
		return Equal(fType.reference, tType.reference)
	}

	if f.Is(TypeGeneric) 
	{
		fGen TypeGeneric^ = f.As(TypeGeneric)
		tGen TypeGeneric^ = t.As(TypeGeneric)
		if !Equal(&fGen.ident.super, &tGen.ident.super) {
			return false
		}
		if fGen.constraints.length != tGen.constraints.length {
			return false
		}

		for i64(0) .. fGen.constraints.length {
			if !Equal(fGen.constraints[it], tGen.constraints[it]) {
				return false
			}
		}
		return true
	}

	Assert(0, 'Unhandled type in Equal ' + String(from.kind))
	return false
}

Clone fn(expr ref Type) Type^
{
	if expr.Is(TypeRef) {
		self TypeRef^ = expr.As(TypeRef)

		out TypeRef^ = New(TypeRef)
		out.reference = self.reference.Clone()
		return &out.super
	}
	if expr.Is(TypeIdentifier) {
		self TypeIdentifier^ = expr.As(TypeIdentifier)
		out TypeIdentifier^ = New(TypeIdentifier)
		out.spec = self.spec
		return &out.super
	}
	if expr.Is(TypeAny) {
		self TypeAny^ = expr.As(TypeAny)
		out TypeAny^ = New(TypeAny)
		out.reference = self.reference.Clone()
		return &out.super
	}
	if expr.Is(TypeOption) {
		self TypeOption^ = expr.As(TypeOption)
		out TypeOption^ = New(TypeOption)
		out.reference = self.reference.Clone()
		return &out.super
	}
	if expr.Is(TypeType) {
		self TypeType^ = expr.As(TypeType)
		return &self.super
	}
	if expr.Is(TypeGeneric) {
		self TypeGeneric^ = expr.As(TypeGeneric)

		out TypeGeneric^ = New(TypeGeneric)
		out.ident =  cast(TypeIdentifier^, self.ident.super.Clone())

		for i64(0) .. self.constraints.length {
			out.constraints.Push(self.constraints[it].Clone())
		}
		return &out.super
	}
	Println('Unhandled type visit')
}

