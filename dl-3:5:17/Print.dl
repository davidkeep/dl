@import {
	'Semantic.dl',
}

PrintVisitor struct {
	indent i32
}
PrintIndent fn(visitor ref PrintVisitor)
{
	for i64(1) .. visitor.indent {
		Print('\t')
	}
}

Print fn(expr ref Expr) {
	printer PrintVisitor
	expr.Visit(printer)
}

Print fn(expr ref Type) {
	printer PrintVisitor
	expr.Visit(printer)
}

Print fn(expr Type^) {
	if !expr {
		Print('()')
		return
	}

	printer PrintVisitor
	expr.Visit(printer)
}

Print fn(array DynamicArray(T?^)) {
	for i64(0) .. array.length {
		Print(^array[it])
		if it != array.length - 1 {
			Print(', ')
		}
	}
}

Visit fn(expr ref Expr, visitor ref PrintVisitor)
{
	if expr.Is(Block) {
		self Block^ = expr.As(Block)
		if visitor.indent {
			Println('{')
		}
		visitor.indent = visitor.indent + 1

		for i64(0) .. self.expressions.length
		{
			visitor.PrintIndent()
			self.expressions[it].Visit(visitor)
			Println('')
		}
		visitor.indent = visitor.indent - 1

		if visitor.indent {
			Println('}')
		}
		return
	}

	if expr.Is(Structure) {
		self Structure^ = expr.As(Structure)
		Print(self.ident)
		Print(' struct')
		if !self.incomplete {
			Println(' {')
			visitor.indent = visitor.indent + 1
			for i64(0) .. self.fields.length {
				visitor.PrintIndent()
				Print(self.fields[it].ident)
				Print(' ')
				self.fields[it].super.typ.Visit(visitor)
				Println('')
			}
			visitor.indent = visitor.indent - 1
			Println('}')
		}
		else
		{
			Println('')
		}
		return
	}

	if expr.Is(Function) {
		self Function^ = expr.As(Function)
		Print(self.ident)
		Print(' fn ')
		Print(self.params.super)
		Print(' ')
		Print(self.result)

		//if self.block { 
		// self.block.super.Visit(visitor)
		//}
		return
	}

	if expr.Is(Identifier) {
		self Identifier^ = expr.As(Identifier)
		Print(self.ident)
		return
	}

	if expr.Is(Call) {
		self Call^ = expr.As(Call)
		self.operand.Visit(visitor)
		self.params.super.Visit(visitor)
		return
	}
	if expr.Is(Access) {
		self Access^ = expr.As(Access)
		self.operand.Visit(visitor)
		Print('.')
		Print(self.field)
		return
	}

	if expr.Is(ExpressionList) {
		self ExpressionList^ = expr.As(ExpressionList)
		Print('(')
		for i64(0) .. self.list.length {
			self.list[it].Visit(visitor)
			if it != self.list.length - 1 {
				Print(', ')
			}
		}
		Print(')')
		return
	}


	if expr.Is(Variable) {
		self Variable^ = expr.As(Variable)
		Print(self.ident)
		Print(' ')
		expr.typ.Visit(visitor)
		return
	}

    if expr.Is(Trait) {
        self Trait^ = expr.As(Trait)
        Print(self.ident)
        Print(' trait')
        visitor.indent = visitor.indent + 1
        Println(' {')

        visitor.indent = visitor.indent - 1
        Println('}')
        return
    }
	Println('Unhandled print expr visit')
}

Visit fn(t ref Type, visitor ref PrintVisitor)
{
	expr Type^ = &t
	Print(String(t))
}

PrettyPrint fn(expr Type^)
{
	if !expr {
		Print('()')
	}
	else {
		expr.PrettyPrint()
	}
}

PrettyPrint fn(expr ref Expr)
{
	if expr.Is(Structure) {
		self Structure^ = expr.As(Structure)
		Print(self.ident)
		return
	}

	if expr.Is(Function) {
		self Function^ = expr.As(Function)
		Print(self.ident)
		return
	}
	if expr.Is(TypeAs) {
		self TypeAs^ = expr.As(TypeAs)
		PrettyPrint(self.super.typ)
		return
	}
	if expr.Is(Trait) {
		self Trait^ = expr.As(Trait)
		Print('huh?')
		return
	}

	Print('none ' + String(expr.kind))
}

PrettyPrint fn(expr ref Type)
{
	Print(String(expr))
}

String fn(expr Type^) str
{
	if !expr {
		return '()'
	}
	else {
		return expr.String()
	}
}

String fn(expr ref Expr) str
{
	if expr.Is(Structure) {
		self Structure^ = expr.As(Structure)
		return self.ident
	}

	if expr.Is(Function) {
		self Function^ = expr.As(Function)
		return self.ident
	}
	if expr.Is(TypeAs) {
		self TypeAs^ = expr.As(TypeAs)

		return 'as' + String(self.super.typ)
	}
 	if expr.Is(Trait) {
		self Trait^ = expr.As(Trait)
		return '$' + self.ident
	}
	return 'none ' + String(expr.kind)
}

String fn(expr ref Type) str
{
	Assert(&expr, 'nil value')
	if expr.Is(TypeRef) {
		self TypeRef^ = expr.As(TypeRef)		
		return 'ref ' + self.reference.String()
	}
	if expr.Is(TypeIdentifier) {
		self TypeIdentifier^ = expr.As(TypeIdentifier)
		if self.spec {
			return String(^self.spec)
		}
		else
		{
			return 'untyped<' + self.ident + '>'	
		}
	}
	if expr.Is(TypeAny) {
		self TypeAny^ = expr.As(TypeAny)
		if self.reference {
			return '$' + self.ident + '->' + String(^self.reference)
		}
		return '$' + self.ident + String(cast(i64, self))
	}
	if expr.Is(TypeTrait) {
		self TypeTrait^ = expr.As(TypeTrait)
		if self.reference {
			return '$' + self.trai.ident + '->' + String(^self.reference)
		}
		return '$' + self.trai.ident
	}
	if expr.Is(TypeOption) {
		self TypeOption^ = expr.As(TypeOption)
		Assert(self.reference, 'Require ref')

		value str 
		if self.reference.Resolved().Is(TypeRef) {
			return 'ref? ' +self.reference.Resolved().As(TypeRef).reference.String()
		}
		else
		{
			return self.reference.String() + '?'
			
		}
	}
	if expr.Is(TypeType) {
		self TypeType^ = expr.As(TypeType)
		Print('typeof ')
		return 'type of' + String(self.reference)
	}
	if expr.Is(TypeGeneric) {
		self TypeGeneric^ = expr.As(TypeGeneric)
		value str = String(self.ident.super) +  '->' + String(cast(i64, self.spec)) + '('
		for i64(0) .. self.constraints.length {
			value = value + String(^self.constraints[it])
			if it != self.constraints.length - 1 {
				value = value + ', '
			}
		}
		return value + ')'
	}
	if expr.Is(TypeNumber) {
		self TypeNumber^ = expr.As(TypeNumber)
		if self.kind == TypeNumberInteger {
			return 'i' + String(self.size * 8)
		}
		else if self.kind == TypeNumberUnsigned  {
			return 'u' + String(self.size * 8)
		}
		else if self.kind == TypeNumberFloat {
			return 'f' + String(self.size * 8)
		}
		else {
			Assert(0)
		}
		return ''
	}
	Println('Unhandled type visit')
	return ''
}

