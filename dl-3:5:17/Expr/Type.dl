
@import {
	'Expr.dl'
}

Type struct
{
    kind i32
}

TypeIdentifier struct {
    super Type
    ident str
    spec Expr^
}

TypeIdentifier fn() TypeIdentifier^
{
    self TypeIdentifier^ = new(TypeIdentifier)
    self.super.kind = Id(TypeIdentifier)
    return self
}
Init fn(self ref TypeIdentifier) {
    self.super.kind = Id(TypeIdentifier)
}

TypeFunctions struct {
    super Type
    functions DynamicArray(Function^)
}

TypeFunctions fn() TypeFunctions^
{
    self TypeFunctions^ = new(TypeFunctions)
    self.super.kind = Id(TypeFunctions)
    return self
}

TypeRef struct {
    super Type
    reference Type^
}
Init fn(self ref TypeRef) {
    self.super.kind = Id(TypeRef)
}
TypeOption struct {
    super Type
    reference Type^
}
Init fn(self ref TypeOption) {
    self.super.kind = Id(TypeOption)
}

TypeGeneric struct {
    super Type
    ident TypeIdentifier^
    constraints DynamicArray(Type^)

    spec Expr^ // Resolved spec
    referenced TypeStructure^ // Resolved structure
}

Init fn(self ref TypeGeneric) {
    self.constraints.Init()
    self.super.kind = Id(TypeGeneric)
}

TypeAny struct {
    super Type
    ident str
    reference Type^

    parent TypeAny^
    required i32
}

Init fn(self ref TypeAny) {
    self.super.kind = Id(TypeAny)
    self.parent = &self
}

TypeType struct {
    super Type
    reference Type^
}
Init fn(self ref TypeType) {
    self.super.kind = Id(TypeType)
}

TypeTrait struct {
    super Type
    parent TypeTrait^
    trai Trait^
    reference Type^
}
Init fn(self ref TypeTrait) {
    self.super.kind = Id(TypeTrait)
    self.parent = &self
}


TypeNumberInteger         i8 = 0
TypeNumberUnsigned        i8 = 1 
TypeNumberFloat           i8 = 2

TypeNumber struct {
    super Type
    size i64
    kind i8
    constant i8
}
Init fn(self ref TypeNumber) {
    self.super.kind = Id(TypeNumber)
}

New fn(type TypeNumber, kind i8, size i64) TypeNumber^ {
    r TypeNumber^ = New(TypeNumber)
    r.kind = kind
    r.size = size
    return r
}


i64Type TypeNumber^ = New(TypeNumber, TypeNumberInteger, 8)
i32Type TypeNumber^ = New(TypeNumber, TypeNumberInteger, 4)
i16Type TypeNumber^ = New(TypeNumber, TypeNumberInteger, 2)
 i8Type TypeNumber^ = New(TypeNumber, TypeNumberInteger, 1)

u64Type TypeNumber^ = New(TypeNumber, TypeNumberUnsigned, 8)
u32Type TypeNumber^ = New(TypeNumber, TypeNumberUnsigned, 4)
u16Type TypeNumber^ = New(TypeNumber, TypeNumberUnsigned, 2)
 u8Type TypeNumber^ = New(TypeNumber, TypeNumberUnsigned, 1)

f32Type TypeNumber^ = New(TypeNumber, TypeNumberFloat, 4)
f64Type TypeNumber^ = New(TypeNumber, TypeNumberFloat, 8)


