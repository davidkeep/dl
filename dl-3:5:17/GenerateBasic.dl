@import {
	'Semantic.dl',
}

remapped Table(str, str)

GenerateBasic struct {
	semantic Semantic^


	types File^
	header File^
	impl File^
	indent i32
}
Indent fn(self ref GenerateBasic) {
	for i32(0) .. self.indent {
		self.impl.Write('\t')
	}
}

Mangle fn(self Type^) str {
	t Type ^ = self.Resolved()
	if t.Is(TypeTrait) {
		return '<typeTrait>'
	}
	if t.Is(TypeAny) {
		return '<TypeAny>'
	}
	if t.Is(TypeType) {
		return '_typeof' + Mangle(t.As(TypeType).reference)
	}
	if t.Is(TypeRef) {
		return '_ref_' + Mangle(t.As(TypeRef).reference)
	}
	if t.Is(TypeIdentifier) {
        ident TypeIdentifier^ = t.As(TypeIdentifier)
        if !ident.spec {
            return '_nil_'
        }
        else if ident.spec.Is(Structure) {
            return ident.spec.As(Structure).Name()
        }
        else {
            return '_t_'
        }
	}
	if t.Is(TypeGeneric) {
        gen TypeGeneric^ = t.As(TypeGeneric)
        return Mangle(&gen.referenced.super)
	}
	if t.Is(TypeStructure) {
        self TypeStructure^ = t.As(TypeStructure)
        out str = self.parent.ident
        if self.constraints.length {
        	out = out + '_'
        }
        if self.incomplete {
        	out = '<inc>' + out + '<inc>'
        }
		for i64(0) .. self.constraints.length {
			out = out + Mangle(self.constraints[it])
		}
        return out
	}
	if t.Is(TypeNumber) {
        self TypeNumber^ = t.As(TypeNumber)
        if self.kind == TypeNumberInteger {
			return 'i' + String(self.size * 8)
		}
		else if self.kind == TypeNumberUnsigned  {
			return 'u' + String(self.size * 8)
		}
		else if self.kind == TypeNumberFloat {
			return 'f' + String(self.size * 8)
		}
		else {
			Assert(0)
		}
        return ''
	}
	return ''
}


Name fn(self ref Structure) str {
	out str = self.ident
	for i64(0) .. self.constraints.length {
		out = out + Mangle(self.constraints[it])  + '_incomplete_'
	}
	return out
}

Name fn(self ref Function) str {
	out str = remapped[self.ident]
	if out.length == 0 {
		out = self.ident
	}

	if self.spec {
		return self.spec.Name()	
	}

	else if self.block  {
		out = out + '_'
		
		for i64(0) .. self.params.list.length {
			out = out + Mangle(self.params.list[it].typ)

		}

	}


	return out
}

Name fn(self ref FunctionSpec) str {
	out str = remapped[self.function.ident]
	if out.length == 0 {
		out = self.function.ident
	}
	for i64(0) .. self.params.length {
		out = out + Mangle(self.params[it])
	}

	return out
}



Init fn(generate ref GenerateBasic, semantic ref Semantic, ast ref Block) {
	
	generate.semantic = &semantic
	generate.header = FileOpen('build/strap.h'.chars, 'w'.chars)
	generate.impl = FileOpen('build/strap.cpp'.chars, 'w'.chars)
	generate.types = FileOpen('build/types.h'.chars, 'w'.chars)

	Assert(cast(i64, generate.header) != 0, 'Bad file')
	Assert(cast(i64, generate.impl) != 0, 'Bad file')

	remapped.Init()
	remapped['*'] = '_mul_'
	remapped['+'] = '_add_'
	remapped['-'] = '_sub_'
	remapped['/'] = '_div_'

	remapped['[]'] = '_bracket_'
	remapped['<'] = '_less_'
	remapped['<='] = '_lessEq_'
	remapped['>'] = '_greater_'
	remapped['>='] = '_greaterEq_'
	remapped['=='] = '_eq_'
	remapped['!='] = '_notEq_'


	generate.impl.Write('#include "strap.h"\n')
	generate.types.Write('#include "header.h"\n')
	generate.header.Write('#include "types.h"\n')

	for i64(0) .. ast.expressions.length {
		expr Expr^ = ast.expressions[it]
		if expr.Is(Variable) {
			generate.Visit(^expr)
			generate.impl.Write(';\n')
		}
	}

	for i64(0) .. ast.expressions.length {
		expr Expr^ = ast.expressions[it]
		if expr.Is(Structure) {}
		else if expr.Is(Variable) {}
		else {
			generate.Visit(^expr)
		}
	}

	Print('gSpecializations.length ' + String(gSpecializations.length))
	for i64(0) .. gSpecializations.length {
		spec FunctionSpec^ = gSpecializations[it]
		if !spec.incomplete 
		{
			if !spec.incomplete {
				for i64(0) .. spec.known.length {
			        t TypeAnyResolved = spec.known[it]
                    Assert(!t.typ.ContainsAny())
			    }
			}
			spec.Apply()
			generate.semantic.Visit(spec.function.super)
			generate.Visit(spec.function.super)
            spec.Clear()

		}
	}
	Print('gSpecializations.length ' + String(gSpecializations.length))


	//for i64(0) .. semantic.structures.length {
	//	generate.Visit(semantic.structures[it].super)
	//}
	for i64(0) .. structures.length {
		spec TypeStructure^ = structures[it]
		hide i8 = spec.parent == &generate.semantic.intrinsic.voidptr_ || spec.incomplete
		if !hide {
			name str = Mangle(&spec.super)
			generate.types.Write('struct ')
			generate.types.Write(name)
			generate.types.Write(';\n')
		}
		
	}

	for i64(0) .. structures.length {
		spec TypeStructure^ = structures[it]

		hide i8 = spec.parent == &generate.semantic.intrinsic.voidptr_ || spec.incomplete
		if hide
		{
			generate.types.Write('/*')
		}

		name str = Mangle(&spec.super)

		
		//generate.semantic.Visit(self.super)
		generate.types.Write('struct ')
		generate.types.Write(name)
		generate.types.Write(' {\n')

		for i64(0) .. spec.fields.length {
			generate.types.Visit(^spec.fields[it])
			generate.types.Write(' ')
			generate.types.Write(spec.parent.fields[it].ident)
			generate.types.Write(';\n')
		}
		generate.types.Write('};\n')

		if hide
		{
			generate.types.Write('*/')
		}
	}



	FileClose(generate.header)
	FileClose(generate.impl)
	FileClose(generate.types)
}

Write fn(file ref File, s str) {
	FilePut(&file, s.chars)
}

Visit fn(file ref File, t ref Type) {
	typ Type^ = t.Resolved()

	if typ.Is(TypeOption) {
		self TypeOption^ = typ.As(TypeOption)
		if self.reference.Is(TypeRef) {
			file.Visit(^self.reference)
		}
		else {
			file.Write('OPTION')
		}
	
		return
	}
	if typ.Is(TypeRef) {
		self TypeRef^ = typ.As(TypeRef)
		file.Visit(^self.reference)
		file.Write('*')
		return
	}
	if typ.Is(TypeIdentifier) {
		self TypeIdentifier^ = typ.As(TypeIdentifier)

		file.Write(self.spec.As(Structure).Name())
		return
	}
	if typ.Is(TypeGeneric) {
		self TypeGeneric^ = typ.As(TypeGeneric)
		file.Write(Mangle(typ))
		return
	}
        
    if typ.Is(TypeNumber){
        self TypeNumber^ = typ.As(TypeNumber)
        if self.kind == TypeNumberInteger {
			file.Write('i')
		}
		else if self.kind == TypeNumberUnsigned  {
			file.Write('u')
		}
		else if self.kind == TypeNumberFloat {
			file.Write('f')
		}
		else {
			Assert(0)
		}
        file.Write(String(self.size * 8))        
        return
    }
	file.Write('unknown type - ' + String(typ.kind))
	//Assert(0, 'Cannot write unknown type')
} 


Visit fn(generate ref GenerateBasic, expr ref Expr) 
{
	if expr.Is(Block) {
		generate.Indent()
		generate.impl.Write('{\n')
		self Block^ = expr.As(Block)
		generate.indent = generate.indent + 1
		for i64(0) .. self.expressions.length {
			expr Expr^ = self.expressions[it]
			generate.Indent()
			generate.Visit(^expr)
			generate.impl.Write(';\n')
		}
		generate.indent = generate.indent - 1
		generate.Indent()
		generate.impl.Write('}')

		return
	}
	if expr.Is(Structure) {
		self Structure^ = expr.As(Structure)
		//if self.incomplete {
		//	return
		//}
		if self == &generate.semantic.intrinsic.voidptr_ {
			return
		}

		if !self.constraints.length {
			name str = self.Name()


			generate.types.Write('typedef struct ')
			generate.types.Write(name)
			generate.types.Write(' {\n')

			for i64(0) .. self.fields.length {
				generate.types.Visit(^self.fields[it].super.typ)
				generate.types.Write(' ')
				generate.types.Write(self.fields[it].ident)
				generate.types.Write(';\n')
			}
			generate.types.Write('} ')
			generate.types.Write(name)
			generate.types.Write(';\n')
		}
		return
	}
	if expr.Is(Function) {
		self Function^ = expr.As(Function)
		if generate.semantic.intrinsic.IsIntrinsic(self) 
		{
			return
		}
		
		ident str = self.Name()


		if self.any.length == 0 || cast(i64, self.spec) != 0 {

			Assert(((self.any.length != 0) || (cast(i64, self.spec) == 0)) != 0 , 'Expected just one of these to pass')
			if self.spec {
				Assert(!self.spec.incomplete)
			}
			if !self.block {
				generate.header.Write('extern "C" ')
			}
			if self.result {
				generate.header.Visit(^self.result)
				generate.header.Write(' ')
			}
			else {
				generate.header.Write('void ')
			}		
			generate.header.Write(ident)
			if self.spec {
				generate.header.Write(String(self.spec.index))
			}
			generate.header.Write('(')
			last i64 = self.params.list.length-1
			for last > 0 && self.params.list[last].typ.Is(TypeType)
			{
				last = last - 1
			}

			for i64(0) .. self.params.list.length {
				if !self.params.list[it].typ.Is(TypeType) 
				{
					//if !self.params.list[it].typ.Resolved().Is(TypeRef) {
					//		generate.header.Write('const ')
					//}
					generate.header.Visit(^self.params.list[it].typ)
					generate.header.Write(' ')
					generate.header.Write(self.params.list[it].As(Variable).ident)

					if it != last {
						generate.header.Write(', ')
					}
				}
			}
			generate.header.Write(');\n')
			if self.block {
				if self.result {
					generate.impl.Visit(^self.result)
					generate.impl.Write(' ')
				}
				else {
					generate.impl.Write('void ')
				}
				generate.impl.Write(ident)
				if self.spec {
					generate.impl.Write(String(self.spec.index))
				}
				generate.impl.Write('(')
				for i64(0) .. self.params.list.length {
					if !self.params.list[it].typ.Is(TypeType) 
					{
						//if !self.params.list[it].typ.Resolved().Is(TypeRef) {
						//	generate.impl.Write('const ')
						//}
						generate.impl.Visit(^self.params.list[it].typ)
						generate.impl.Write(' ')
						generate.impl.Write(self.params.list[it].As(Variable).ident)

						if it != last {
							generate.impl.Write(', ')
						}
					}
				}
				generate.impl.Write(')')
				generate.Visit(self.block.super)
				generate.impl.Write('\n')
			}
		}
		return
	}
	if expr.Is(Call) 
	{
		self Call^ = expr.As(Call)
		//for i64(0) .. self.params.list.length {
		//		generate.impl.Visit(^self.params.list[it].typ)
		//		if it != self.params.list.length-1 {
		//			generate.impl.Write(',')
		//		}
		//	}
		//	generate.impl.Write('\n')

		last i64 = self.params.list.length-1
		for last > 0 && (self.params.list[last].typ.Is(TypeType) ||  self.params.list[last].Is(TypeAs))
		{
			last = last - 1
		}
		if self.func.Is(Function) 
		{
			function Function^ = self.func.As(Function)
			//Assert(function.any.length == 0, 'This function should be specialized')

			if generate.semantic.intrinsic.IsIntrinsic(function) 
			{
				generate.GenerateBasicIntrinsic(function, self)
			}
			else 
			{
				name str = function.Name()

				generate.impl.Write(name)
				generate.impl.Write('(')
				for i64(0) .. self.params.list.length 
				{
					if !self.params.list[it].typ.Is(TypeType) && !self.params.list[it].Is(TypeAs) 
					{
						generate.PerformVisitAutoReference(^self.params.list[it], i64(self.drefCount[it]))
						if it != last 
						{
							generate.impl.Write(',')
						}
					}
				}
				generate.impl.Write(')')
			}
		}
		else if self.func.Is(FunctionSpec) 
		{
			spec FunctionSpec^ = self.func.As(FunctionSpec)
			if generate.semantic.intrinsic.IsIntrinsic(spec.function)
			{
				generate.GenerateBasicIntrinsic(spec.function, self)
			}
			else 
			{
				name str = spec.Name()

				generate.impl.Write(name)
				generate.impl.Write(String(spec.index))
				generate.impl.Write('(')
				for i64(0) .. self.params.list.length 
				{
					if !self.params.list[it].typ.Is(TypeType) && !self.params.list[it].Is(TypeAs) 
					{
						generate.PerformVisitAutoReference(^self.params.list[it], i64(self.drefCount[it]))
						if it != last 
						{
							generate.impl.Write(',')
						}
					}
				}
				generate.impl.Write(')')
			}
			spec.Clear()
		}
		else {
			Assert(0, 'Expected fn or fn spec ' + String(self.operand.kind))
		}
		return
	}
	if expr.Is(Variable) {
		self Variable^ = expr.As(Variable)
		if !self.super.typ.Is(TypeType) 
		{
			generate.impl.Visit(^self.super.typ)
			generate.impl.Write(' ')
			generate.impl.Write(self.ident)
			if self.assign {
				generate.impl.Write('=')
				for i64(0) .. self.drefCount {
					generate.impl.Write('*')
				}
				generate.Visit(^self.assign)
			}
			else {
				generate.impl.Write('={0}')
			}
		}
		return
	}
	if expr.Is(ForList) {
		self ForList^ = expr.As(ForList)

		for i64(0) .. self.list.list.length {
			generate.semantic.SetIt(^self, self.list.list[it])
			generate.impl.Write('/*ForList ' + String(it) + '*/')
			self.it.assign = self.list.list[it]
			self.it.super.typ = self.list.list[it].typ
			Assert(self.it.super.typ)
			//generate.Visit(self.it.super)
			generate.Visit(self.block.super)
		}
		//generate.impl.Write(' ')
		//generate.impl.Write(self.ident)
		return
	}
	if expr.Is(For) {
		self For^ = expr.As(For)

		if self.to {
			generate.impl.Write('for(')
			generate.Visit(self.it.super)
			generate.impl.Write('; ')

			generate.Visit(self.test.super)
			generate.impl.Write('; ')
			generate.Visit(^self.inc)
			generate.impl.Write(')')
		}
		else {
			generate.impl.Write('while(')
			generate.Visit(^self.from)
			generate.impl.Write(')')
		}
		

		generate.Visit(self.block.super)
		//generate.impl.Write(' ')
		//generate.impl.Write(self.ident)
		return
	}
	if expr.Is(If) {
		self If^ = expr.As(If)

		generate.impl.Write('if(')
		generate.Visit(^self.condition)
		generate.impl.Write(')')

		generate.Visit(self.trueBranch.super)

		if self.falseCondition {
			generate.impl.Write('else ')
			generate.Visit(self.falseCondition.super)
		}
		if self.falseBranch {
			generate.impl.Write('else')
			generate.Visit(self.falseBranch.super)

		}
		//generate.impl.Write(' ')
		//generate.impl.Write(self.ident)
		return
	}
	if expr.Is(Identifier) {
		self Identifier^ = expr.As(Identifier)
		generate.impl.Write(self.ident)
		return
	}
	if expr.Is(Access) {
		self Access^ = expr.As(Access)
		if self.call {
			generate.Visit(self.call.super)
			return
		}

		typ Type^ = self.operand.typ.Resolved()
		if typ.Is(TypeRef) {
			generate.impl.Write('(')
			for typ.Is(TypeRef) {
				typ = typ.As(TypeRef).reference.Resolved()
				generate.impl.Write('*')
			}
			generate.Visit(^self.operand)
			generate.impl.Write(')')
		}
		else {
			generate.Visit(^self.operand)
		}

		generate.impl.Write('.')

		
		generate.impl.Write(self.field)
		return
	}
	if expr.Is(Assign) {
		self Assign^ = expr.As(Assign)
		for i32(0) .. -self.drefCount {
			generate.impl.Write('*')
		}
		generate.Visit(^self.left)
		generate.impl.Write('=')
		generate.Visit(^self.right)
		return
	}
	if expr.Is(Trait) {
		self Trait^ = expr.As(Trait)
		return
	}
	if expr.Is(NumberConstant) {
		self NumberConstant^ = expr.As(NumberConstant)
		generate.impl.Write(self.value)
		return
	}
	if expr.Is(StringConstant) {
		self StringConstant^ = expr.As(StringConstant)
		generate.impl.Write('((Str){')
		s str = '0'

		generate.impl.Write(String(self.value.length))
		generate.impl.Write(', (i8*)"')
		for i64(0) .. self.value.length {

        	
        	c i8 = ^(self.value.chars + it)
			if c == ^('\n').chars {
				generate.impl.Write('\\n')
			}
			else if c == ^('"').chars {
				generate.impl.Write('\\"')
			}
			else if c == ^('\\').chars {
				generate.impl.Write('\\\\')
			}
			else {
				v str = StringFromChar(c)
				generate.impl.Write(v)
			}
		}
		generate.impl.Write('"})')
		return
	}
	if expr.Is(Return) {
		self Return^ = expr.As(Return)
		generate.impl.Write('return ')
		if self.expr {
			generate.PerformVisitAutoReference(^self.expr, self.drefCount)
		}
		return
	}
	generate.impl.Write('---- unhandled node ' + String(expr.kind) + '---- \n')
}


PerformVisitAutoReference fn(self ref GenerateBasic, expr ref Expr, count i64) { 
	if count < 0 {
		self.PerformReference(expr, -count)
		return
	}
	else if count > 0 {
		self.PerformDereference(expr, count)
		return
	}
	Assert(count == 0, 'Internal: expected count == 0')
	self.Visit(expr)
}

PerformReference fn(self ref GenerateBasic, expr ref Expr, count i64) {
	Assert(count == 1, 'Internal: expected dref count greater than 0')
	self.impl.Write('(&')
	self.Visit(expr)
	self.impl.Write(')')
}

PerformDereference fn(self ref GenerateBasic, expr ref Expr, count i64) {
	
	Assert(count > 0, 'Internal: expected dref count greater than 0')
	// load initial reference
	self.impl.Write('(*')
	self.Visit(expr)
	self.impl.Write(')')
}

GenerateBasicIntrinsic fn(generate ref GenerateBasic, function Function^, call Call^) {
	if function == &generate.semantic.intrinsic.abortFn {
		generate.impl.Write('abort();')
		return
	}

	if function == &generate.semantic.intrinsic.invert {
		generate.impl.Write('!')
		generate.PerformVisitAutoReference(^call.params.list[0], i64(call.drefCount[0]))
		return
	}

	if function == &generate.semantic.intrinsic.ptr_add {
		generate.impl.Write('(')
		generate.PerformVisitAutoReference(^call.params.list[0], i64(call.drefCount[0]))
		generate.impl.Write('+')
		generate.PerformVisitAutoReference(^call.params.list[1], i64(call.drefCount[1]))
		generate.impl.Write(')')
		return
	}

	if 	cast(i64, &generate.semantic.intrinsic.reference) == cast(i64, function)
	{
		generate.impl.Write('(&')
		generate.PerformVisitAutoReference(^call.params.list[0], i64(call.drefCount[0]))
		generate.impl.Write(')')
		return
	}
	if 	cast(i64, &generate.semantic.intrinsic.dereference) == cast(i64, function)
	{
		generate.impl.Write('(*')
		generate.PerformVisitAutoReference(^call.params.list[0], i64(call.drefCount[0]))
		generate.impl.Write(')')
		return
	}

	if 	cast(i64, &generate.semantic.intrinsic.castOp) == cast(i64, function)
	{
		generate.impl.Write('(')
		generate.impl.Visit(^call.super.typ)
		generate.impl.Write(')')
		generate.PerformVisitAutoReference(^call.params.list[1], i64(call.drefCount[1]))
		return
	}
    if &generate.semantic.intrinsic.sizeFn == function
    {
        size i64 = Size(call.params.list[0].typ.As(TypeType).reference)
        generate.impl.Write('sizeof(')
        generate.impl.Visit(^call.params.list[0].typ.As(TypeType).reference) 
        generate.impl.Write(')')

        return
    }
    if call.params.list.length == 1 {
        generate.impl.Write('(')
        generate.impl.Write(function.ident)
        generate.impl.Write(')')
		generate.PerformVisitAutoReference(^call.params.list[0], i64(call.drefCount[0]))
        return
    }
	generate.impl.Write('(')
	generate.PerformVisitAutoReference(^call.params.list[0], i64(call.drefCount[0]))
	generate.impl.Write(function.ident)
	generate.PerformVisitAutoReference(^call.params.list[1], i64(call.drefCount[1]))
	generate.impl.Write(')')
	return

	//generate.impl.Write('----unhandled intrinsic-----')
}
