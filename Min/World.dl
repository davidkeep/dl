@import 
{
	'dl/Array.dl',
	'dl/String.dl',
	'Vec.dl',
	'Sprite.dl',
	'Transform.dl',
    'Editor.dl',
}

Entity struct {
    id i64
    version i64
}

World struct
{
    count i64
    components Array(i64)
    entities Array(Entity)
    transforms Array(Transform)
    sprites Array(Sprite)
    editables Array(Editable)
    meshes Array(Mesh)
}
world World

Init fn(world ref World) { 
    size i64 = 1000
    Init(world.components, size)
    Init(world.entities, size)
    Init(world.transforms, size)
    Init(world.sprites, size)
    Init(world.editables, size)
    Init(world.meshes, size)
    world.count = 1
}

Bits fn(type Transform) i64 {
    return BitShiftLeft(1, 0)
}

Bits fn(type Sprite) i64 {
    return BitShiftLeft(1, 1)
}

Bits fn(type Editable) i64 {
    return BitShiftLeft(1, 2)
}

Bits fn(type Mesh) i64 {
    return BitShiftLeft(1, 3)
}

Components fn(type Transform) ref Array(Transform) {
    return world.transforms
}
Components fn(type Sprite) ref Array(Sprite) {
    return world.sprites
}
Components fn(type Editable) ref Array(Editable) {
    return world.editables
}
Components fn(type Mesh) ref Array(Mesh) {
    return world.meshes
}

Retrieve fn(i i64, a ref A?^, b ref B?^, c ref C?^) i8
{
    if (Bits(A) | Bits(B) | Bits(C)) & world.components[i] {
        a = &Components(A)[i]
        b = &Components(B)[i]
        c = &Components(C)[i]
        return true
    }
    return false
}

Retrieve fn(i i64, a ref A?^, b ref B?^) i8
{
    if (world.components[i] & (Bits(A) | Bits(B))) == (Bits(A) | Bits(B)) {
        a = &Components(A)[i]
        b = &Components(B)[i]
        return true
    }
    return false
}

Retrieve fn(i i64, a ref A?^) i8
{
    if (Bits(A)) & world.components[i] {
        a = &Components(A)[i]
        return true
    }
    return false
}

AddComponent fn (type T?, entity Entity) ref T
{
	world.components[entity.id] = world.components[entity.id] | Bits(T)
    return Components(T)[entity.id]
}

CreateEntity fn() Entity
{    
    entity Entity
    entity.id = world.count
    world.components[entity.id] = 0
    world.count = world.count + 1
    return entity
}

Get fn(entity Entity, type T?) T^
{
    return &Components(T)[entity.id]
}

Index struct(T?)
{
    item T^
    i i64
    world World
}

Transform fn(index Index(Transform)) ref Transform
{
    return ^index.item
}

Index fn(type T?, world World) Index(T)
{
    index Index(T)
    index.i = 0
    index.world = world
    return index
}
Next fn(index ref Index(T?)) i8
{
    for !Retrieve(index.i, index.item)
    {
        index.i = index.i + 1
        if index.i >= world.count
        {
            return false
        }
    }
    index.i = index.i + 1
    return index.i < world.count
}


