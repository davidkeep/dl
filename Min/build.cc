#include "build.h"
#define f0__ "/Users/Davie/Desktop/dl/Tests/Main.dl"
#define f1__ "/Users/Davie/Desktop/dl/Tests/dl/Array.dl"
#define f2__ "/Users/Davie/Desktop/dl/Tests/dl/String.dl"
#define f3__ "/Users/Davie/Desktop/dl/Tests/glfw.dl"
#define f4__ "/Users/Davie/Desktop/dl/Tests/gl.dl"
#define f5__ "/Users/Davie/Desktop/dl/Tests/Vec.dl"
#define f6__ "/Users/Davie/Desktop/dl/Tests/World.dl"
#define f7__ "/Users/Davie/Desktop/dl/Tests/Renderer.dl"
#define f8__ "/Users/Davie/Desktop/dl/Tests/Archive.dl"
#define f9__ "/Users/Davie/Desktop/dl/Tests/Editor.dl"
#define f10__ "/Users/Davie/Desktop/dl/Tests/Spine.dl"
#define f11__ "/Users/Davie/Desktop/dl/Tests/dl/Memory.dl"
#define f12__ "/Users/Davie/Desktop/dl/Tests/dl/Conversion.dl"
#define f13__ "/Users/Davie/Desktop/dl/Tests/dl/Math.dl"
#define f14__ "/Users/Davie/Desktop/dl/Tests/Sprite.dl"
#define f15__ "/Users/Davie/Desktop/dl/Tests/Transform.dl"
#define f16__ "/Users/Davie/Desktop/dl/Tests/Buffer.dl"
#define f17__ "/Users/Davie/Desktop/dl/Tests/Window.dl"
#define f18__ "/Users/Davie/Desktop/dl/Tests/Texture.dl"
#define f19__ "/Users/Davie/Desktop/dl/Tests/Camera.dl"
#define f20__ "/Users/Davie/Desktop/dl/Tests/Lexer.dl"
#define f21__ "/Users/Davie/Desktop/dl/Tests/SpineC.dl"
#define f22__ "/Users/Davie/Desktop/dl/Tests/Shader.dl"
#define f23__ "/Users/Davie/Desktop/dl/Tests/Quaternion.dl"
#define f24__ "/Users/Davie/Desktop/dl/Tests/dl/c.dl"
TypeInfo typeinfo0={sizeof(i64)};
TypeInfo typeinfo1={sizeof(i8)};
TypeInfo typeinfo2={sizeof(Archive)};
TypeInfo typeinfo3={sizeof(Entity)};
TypeInfo typeinfo4={sizeof(Transform)};
TypeInfo typeinfo5={sizeof(Sprite)};
TypeInfo typeinfo6={sizeof(Editable)};
TypeInfo typeinfo7={sizeof(Mesh)};
TypeInfo typeinfo8={sizeof(PositionTextureColor)};
TypeInfo typeinfo9={sizeof(u16)};
TypeInfo typeinfo10={sizeof(TableNode2)};
TypeInfo typeinfo11={sizeof(Texture)};
TypeInfo typeinfo12={sizeof(f32)};
TypeInfo typeinfo13={sizeof(TableNode1)};
TypeInfo typeinfo14={sizeof(Shader)};
TypeInfo typeinfo15={sizeof(Callback1)};
TypeInfo typeinfo16={sizeof(Texture)};
TypeInfo typeinfo17={sizeof(u32)};
TypeInfo typeinfo18={sizeof(ShadingPass)};
TypeInfo typeinfo19={sizeof(PositionTextureColorColor)};
TypeInfo typeinfo20={sizeof(MouseCallback)};
TypeInfo typeinfo21={sizeof(Transform)};
TypeInfo typeinfo22={sizeof(CameraBlock)};
TypeInfo typeinfo23={sizeof(TransformBlock)};
i64 ArchiveArray=1;
i64 ArchiveTable=2;
i64 ArchiveString=4;
i64 ArchiveNumber=3;
i64 ArchiveNone=0;
i32 LexerIdentifier=(-1);
i32 LexerNumber=(-2);
i32 LexerString=(-3);
i8 true=1;
i8 false=0;
World world={0};
u32 GL_TEXTURE_2D=3553;
u32 GL_RGBA=6408;
u32 GL_UNSIGNED_BYTE=5121;
u32 GL_TEXTURE_BASE_LEVEL=33084;
u32 GL_TEXTURE_MAX_LEVEL=33085;
u32 GL_TEXTURE_MAG_FILTER=10240;
u32 GL_LINEAR=9729;
u32 GL_TEXTURE_MIN_FILTER=10241;
u32 GL_DYNAMIC_DRAW=35048;
u32 GL_NO_ERROR=0;
u32 GL_INVALID_ENUM=1280;
u32 GL_INVALID_OPERATION=1282;
u32 GL_INVALID_VALUE=1281;
u32 GL_OUT_OF_MEMORY=1285;
u32 GL_ELEMENT_ARRAY_BUFFER=34963;
u32 GL_ARRAY_BUFFER=34962;
u32 GL_FLOAT=5126;
i8 GL_FALSE=0;
u32 GL_VERTEX_SHADER=35633;
u32 GL_COMPILE_STATUS=35713;
u32 GL_FRAGMENT_SHADER=35632;
u32 GL_LINK_STATUS=35714;
u32 GL_INVALID_INDEX=4294967295;
u32 GL_ACTIVE_UNIFORMS=35718;
u32 GL_SAMPLER_2D=35678;
i32 GLFW_CONTEXT_VERSION_MAJOR=139266;
i32 GLFW_CONTEXT_VERSION_MINOR=139267;
i32 GLFW_OPENGL_FORWARD_COMPAT=139270;
i32 GLFW_OPENGL_PROFILE=139272;
i32 GLFW_OPENGL_CORE_PROFILE=204801;
f32 PI=3.1415926535897;
u32 GL_FRAMEBUFFER=36160;
u32 GL_COLOR_ATTACHMENT0=36064;
u32 GL_FRAMEBUFFER_COMPLETE=36053;
u32 GL_ONE=1;
u32 GL_ONE_MINUS_SRC_ALPHA=771;
u32 GL_BLEND=3042;
u32 GL_COLOR_BUFFER_BIT=16384;
u32 GL_UNIFORM_BUFFER=35345;
u32 BufferInterface=GL_UNIFORM_BUFFER;
u32 GL_TEXTURE0=33984;
u32 GL_TRIANGLES=4;
u32 GL_UNSIGNED_SHORT=5123;
i32 GLFW_VERSION_MAJOR=3;
i32 GLFW_VERSION_MINOR=2;
i32 GLFW_VERSION_REVISION=0;
i32 GLFW_TRUE=1;
i32 GLFW_FALSE=0;
i32 GLFW_RELEASE=0;
i32 GLFW_PRESS=1;
i32 GLFW_REPEAT=2;
i32 GLFW_KEY_UNKNOWN=(-1);
i32 GLFW_KEY_SPACE=32;
i32 GLFW_KEY_APOSTROPHE=39;
i32 GLFW_KEY_COMMA=44;
i32 GLFW_KEY_MINUS=45;
i32 GLFW_KEY_PERIOD=46;
i32 GLFW_KEY_SLASH=47;
i32 GLFW_KEY_0=48;
i32 GLFW_KEY_1=49;
i32 GLFW_KEY_2=50;
i32 GLFW_KEY_3=51;
i32 GLFW_KEY_4=52;
i32 GLFW_KEY_5=53;
i32 GLFW_KEY_6=54;
i32 GLFW_KEY_7=55;
i32 GLFW_KEY_8=56;
i32 GLFW_KEY_9=57;
i32 GLFW_KEY_SEMICOLON=59;
i32 GLFW_KEY_EQUAL=61;
i32 GLFW_KEY_A=65;
i32 GLFW_KEY_B=66;
i32 GLFW_KEY_C=67;
i32 GLFW_KEY_D=68;
i32 GLFW_KEY_E=69;
i32 GLFW_KEY_F=70;
i32 GLFW_KEY_G=71;
i32 GLFW_KEY_H=72;
i32 GLFW_KEY_I=73;
i32 GLFW_KEY_J=74;
i32 GLFW_KEY_K=75;
i32 GLFW_KEY_L=76;
i32 GLFW_KEY_M=77;
i32 GLFW_KEY_N=78;
i32 GLFW_KEY_O=79;
i32 GLFW_KEY_P=80;
i32 GLFW_KEY_Q=81;
i32 GLFW_KEY_R=82;
i32 GLFW_KEY_S=83;
i32 GLFW_KEY_T=84;
i32 GLFW_KEY_U=85;
i32 GLFW_KEY_V=86;
i32 GLFW_KEY_W=87;
i32 GLFW_KEY_X=88;
i32 GLFW_KEY_Y=89;
i32 GLFW_KEY_Z=90;
i32 GLFW_KEY_LEFT_BRACKET=91;
i32 GLFW_KEY_BACKSLASH=92;
i32 GLFW_KEY_RIGHT_BRACKET=93;
i32 GLFW_KEY_GRAVE_ACCENT=96;
i32 GLFW_KEY_WORLD_1=161;
i32 GLFW_KEY_WORLD_2=162;
i32 GLFW_KEY_ESCAPE=256;
i32 GLFW_KEY_ENTER=257;
i32 GLFW_KEY_TAB=258;
i32 GLFW_KEY_BACKSPACE=259;
i32 GLFW_KEY_INSERT=260;
i32 GLFW_KEY_DELETE=261;
i32 GLFW_KEY_RIGHT=262;
i32 GLFW_KEY_LEFT=263;
i32 GLFW_KEY_DOWN=264;
i32 GLFW_KEY_UP=265;
i32 GLFW_KEY_PAGE_UP=266;
i32 GLFW_KEY_PAGE_DOWN=267;
i32 GLFW_KEY_HOME=268;
i32 GLFW_KEY_END=269;
i32 GLFW_KEY_CAPS_LOCK=280;
i32 GLFW_KEY_SCROLL_LOCK=281;
i32 GLFW_KEY_NUM_LOCK=282;
i32 GLFW_KEY_PRINT_SCREEN=283;
i32 GLFW_KEY_PAUSE=284;
i32 GLFW_KEY_F1=290;
i32 GLFW_KEY_F2=291;
i32 GLFW_KEY_F3=292;
i32 GLFW_KEY_F4=293;
i32 GLFW_KEY_F5=294;
i32 GLFW_KEY_F6=295;
i32 GLFW_KEY_F7=296;
i32 GLFW_KEY_F8=297;
i32 GLFW_KEY_F9=298;
i32 GLFW_KEY_F10=299;
i32 GLFW_KEY_F11=300;
i32 GLFW_KEY_F12=301;
i32 GLFW_KEY_F13=302;
i32 GLFW_KEY_F14=303;
i32 GLFW_KEY_F15=304;
i32 GLFW_KEY_F16=305;
i32 GLFW_KEY_F17=306;
i32 GLFW_KEY_F18=307;
i32 GLFW_KEY_F19=308;
i32 GLFW_KEY_F20=309;
i32 GLFW_KEY_F21=310;
i32 GLFW_KEY_F22=311;
i32 GLFW_KEY_F23=312;
i32 GLFW_KEY_F24=313;
i32 GLFW_KEY_F25=314;
i32 GLFW_KEY_KP_0=320;
i32 GLFW_KEY_KP_1=321;
i32 GLFW_KEY_KP_2=322;
i32 GLFW_KEY_KP_3=323;
i32 GLFW_KEY_KP_4=324;
i32 GLFW_KEY_KP_5=325;
i32 GLFW_KEY_KP_6=326;
i32 GLFW_KEY_KP_7=327;
i32 GLFW_KEY_KP_8=328;
i32 GLFW_KEY_KP_9=329;
i32 GLFW_KEY_KP_DECIMAL=330;
i32 GLFW_KEY_KP_DIVIDE=331;
i32 GLFW_KEY_KP_MULTIPLY=332;
i32 GLFW_KEY_KP_SUBTRACT=333;
i32 GLFW_KEY_KP_ADD=334;
i32 GLFW_KEY_KP_ENTER=335;
i32 GLFW_KEY_KP_EQUAL=336;
i32 GLFW_KEY_LEFT_SHIFT=340;
i32 GLFW_KEY_LEFT_CONTROL=341;
i32 GLFW_KEY_LEFT_ALT=342;
i32 GLFW_KEY_LEFT_SUPER=343;
i32 GLFW_KEY_RIGHT_SHIFT=344;
i32 GLFW_KEY_RIGHT_CONTROL=345;
i32 GLFW_KEY_RIGHT_ALT=346;
i32 GLFW_KEY_RIGHT_SUPER=347;
i32 GLFW_KEY_MENU=348;
i32 GLFW_KEY_LAST=GLFW_KEY_MENU;
i32 GLFW_MOD_SHIFT=1;
i32 GLFW_MOD_CONTROL=2;
i32 GLFW_MOD_ALT=4;
i32 GLFW_MOD_SUPER=8;
i32 GLFW_MOUSE_BUTTON_1=0;
i32 GLFW_MOUSE_BUTTON_2=1;
i32 GLFW_MOUSE_BUTTON_3=2;
i32 GLFW_MOUSE_BUTTON_4=3;
i32 GLFW_MOUSE_BUTTON_5=4;
i32 GLFW_MOUSE_BUTTON_6=5;
i32 GLFW_MOUSE_BUTTON_7=6;
i32 GLFW_MOUSE_BUTTON_8=7;
i32 GLFW_MOUSE_BUTTON_LAST=GLFW_MOUSE_BUTTON_8;
i32 GLFW_MOUSE_BUTTON_LEFT=GLFW_MOUSE_BUTTON_1;
i32 GLFW_MOUSE_BUTTON_RIGHT=GLFW_MOUSE_BUTTON_2;
i32 GLFW_MOUSE_BUTTON_MIDDLE=GLFW_MOUSE_BUTTON_3;
i32 GLFW_JOYSTICK_1=0;
i32 GLFW_JOYSTICK_2=1;
i32 GLFW_JOYSTICK_3=2;
i32 GLFW_JOYSTICK_4=3;
i32 GLFW_JOYSTICK_5=4;
i32 GLFW_JOYSTICK_6=5;
i32 GLFW_JOYSTICK_7=6;
i32 GLFW_JOYSTICK_8=7;
i32 GLFW_JOYSTICK_9=8;
i32 GLFW_JOYSTICK_10=9;
i32 GLFW_JOYSTICK_11=10;
i32 GLFW_JOYSTICK_12=11;
i32 GLFW_JOYSTICK_13=12;
i32 GLFW_JOYSTICK_14=13;
i32 GLFW_JOYSTICK_15=14;
i32 GLFW_JOYSTICK_16=15;
i32 GLFW_JOYSTICK_LAST=GLFW_JOYSTICK_16;
i32 GLFW_NOT_INITIALIZED=65537;
i32 GLFW_NO_CURRENT_CONTEXT=65538;
i32 GLFW_INVALID_ENUM=65539;
i32 GLFW_INVALID_VALUE=65540;
i32 GLFW_OUT_OF_MEMORY=65541;
i32 GLFW_API_UNAVAILABLE=65542;
i32 GLFW_VERSION_UNAVAILABLE=65543;
i32 GLFW_PLATFORM_ERROR=65544;
i32 GLFW_FORMAT_UNAVAILABLE=65545;
i32 GLFW_NO_WINDOW_CONTEXT=65546;
i32 GLFW_FOCUSED=131073;
i32 GLFW_ICONIFIED=131074;
i32 GLFW_RESIZABLE=131075;
i32 GLFW_VISIBLE=131076;
i32 GLFW_DECORATED=131077;
i32 GLFW_AUTO_ICONIFY=131078;
i32 GLFW_FLOATING=131079;
i32 GLFW_MAXIMIZED=131080;
i32 GLFW_RED_BITS=135169;
i32 GLFW_GREEN_BITS=135170;
i32 GLFW_BLUE_BITS=135171;
i32 GLFW_ALPHA_BITS=135172;
i32 GLFW_DEPTH_BITS=135173;
i32 GLFW_STENCIL_BITS=135174;
i32 GLFW_ACCUM_RED_BITS=135175;
i32 GLFW_ACCUM_GREEN_BITS=135176;
i32 GLFW_ACCUM_BLUE_BITS=135177;
i32 GLFW_ACCUM_ALPHA_BITS=135178;
i32 GLFW_AUX_BUFFERS=135179;
i32 GLFW_STEREO=135180;
i32 GLFW_SAMPLES=135181;
i32 GLFW_SRGB_CAPABLE=135182;
i32 GLFW_REFRESH_RATE=135183;
i32 GLFW_DOUBLEBUFFER=135184;
i32 GLFW_CLIENT_API=139265;
i32 GLFW_CONTEXT_REVISION=139268;
i32 GLFW_CONTEXT_ROBUSTNESS=139269;
i32 GLFW_OPENGL_DEBUG_CONTEXT=139271;
i32 GLFW_CONTEXT_RELEASE_BEHAVIOR=139273;
i32 GLFW_CONTEXT_NO_ERROR=139274;
i32 GLFW_CONTEXT_CREATION_API=139275;
i32 GLFW_NO_API=0;
i32 GLFW_OPENGL_API=196609;
i32 GLFW_OPENGL_ES_API=196610;
i32 GLFW_NO_ROBUSTNESS=0;
i32 GLFW_NO_RESET_NOTIFICATION=200705;
i32 GLFW_LOSE_CONTEXT_ON_RESET=200706;
i32 GLFW_OPENGL_ANY_PROFILE=0;
i32 GLFW_OPENGL_COMPAT_PROFILE=204802;
i32 GLFW_CURSOR=208897;
i32 GLFW_STICKY_KEYS=208898;
i32 GLFW_STICKY_MOUSE_BUTTONS=208899;
i32 GLFW_CURSOR_NORMAL=212993;
i32 GLFW_CURSOR_HIDDEN=212994;
i32 GLFW_CURSOR_DISABLED=212995;
i32 GLFW_ANY_RELEASE_BEHAVIOR=0;
i32 GLFW_RELEASE_BEHAVIOR_FLUSH=217089;
i32 GLFW_RELEASE_BEHAVIOR_NONE=217090;
i32 GLFW_NATIVE_CONTEXT_API=221185;
i32 GLFW_EGL_CONTEXT_API=221186;
i32 GLFW_ARROW_CURSOR=221185;
i32 GLFW_IBEAM_CURSOR=221186;
i32 GLFW_CROSSHAIR_CURSOR=221187;
i32 GLFW_HAND_CURSOR=221188;
i32 GLFW_HRESIZE_CURSOR=221189;
i32 GLFW_VRESIZE_CURSOR=221190;
i32 GLFW_CONNECTED=262145;
i32 GLFW_DISCONNECTED=262146;
i32 GLFW_DONT_CARE=(-1);
u32 GL_DEPTH_BUFFER_BIT=256;
u32 GL_STENCIL_BUFFER_BIT=1024;
i8 GL_TRUE=1;
u32 GL_POINTS=0;
u32 GL_LINES=1;
u32 GL_LINE_LOOP=2;
u32 GL_LINE_STRIP=3;
u32 GL_TRIANGLE_STRIP=5;
u32 GL_TRIANGLE_FAN=6;
u32 GL_NEVER=512;
u32 GL_LESS=513;
u32 GL_EQUAL=514;
u32 GL_LEQUAL=515;
u32 GL_GREATER=516;
u32 GL_NOTEQUAL=517;
u32 GL_GEQUAL=518;
u32 GL_ALWAYS=519;
u32 GL_ZERO=0;
u32 GL_SRC_COLOR=768;
u32 GL_ONE_MINUS_SRC_COLOR=769;
u32 GL_SRC_ALPHA=770;
u32 GL_DST_ALPHA=772;
u32 GL_ONE_MINUS_DST_ALPHA=773;
u32 GL_DST_COLOR=774;
u32 GL_ONE_MINUS_DST_COLOR=775;
u32 GL_SRC_ALPHA_SATURATE=776;
u32 GL_NONE=0;
u32 GL_FRONT_LEFT=1024;
u32 GL_FRONT_RIGHT=1025;
u32 GL_BACK_LEFT=1026;
u32 GL_BACK_RIGHT=1027;
u32 GL_FRONT=1028;
u32 GL_BACK=1029;
u32 GL_LEFT=1030;
u32 GL_RIGHT=1031;
u32 GL_FRONT_AND_BACK=1032;
u32 GL_CW=2304;
u32 GL_CCW=2305;
u32 GL_POINT_SIZE=2833;
u32 GL_POINT_SIZE_RANGE=2834;
u32 GL_POINT_SIZE_GRANULARITY=2835;
u32 GL_LINE_SMOOTH=2848;
u32 GL_LINE_WIDTH=2849;
u32 GL_LINE_WIDTH_RANGE=2850;
u32 GL_LINE_WIDTH_GRANULARITY=2851;
u32 GL_POLYGON_MODE=2880;
u32 GL_POLYGON_SMOOTH=2881;
u32 GL_CULL_FACE=2884;
u32 GL_CULL_FACE_MODE=2885;
u32 GL_FRONT_FACE=2886;
u32 GL_DEPTH_RANGE=2928;
u32 GL_DEPTH_TEST=2929;
u32 GL_DEPTH_WRITEMASK=2930;
u32 GL_DEPTH_CLEAR_VALUE=2931;
u32 GL_DEPTH_FN=2932;
u32 GL_STENCIL_TEST=2960;
u32 GL_STENCIL_CLEAR_VALUE=2961;
u32 GL_STENCIL_FN=2962;
u32 GL_STENCIL_VALUE_MASK=2963;
u32 GL_STENCIL_FAIL=2964;
u32 GL_STENCIL_PASS_DEPTH_FAIL=2965;
u32 GL_STENCIL_PASS_DEPTH_PASS=2966;
u32 GL_STENCIL_REF=2967;
u32 GL_STENCIL_WRITEMASK=2968;
u32 GL_VIEWPORT=2978;
u32 GL_DITHER=3024;
u32 GL_BLEND_DST=3040;
u32 GL_BLEND_SRC=3041;
u32 GL_LOGIC_OP_MODE=3056;
u32 GL_COLOR_LOGIC_OP=3058;
u32 GL_DRAW_BUFFER=3073;
u32 GL_READ_BUFFER=3074;
u32 GL_SCISSOR_BOX=3088;
u32 GL_SCISSOR_TEST=3089;
u32 GL_COLOR_CLEAR_VALUE=3106;
u32 GL_COLOR_WRITEMASK=3107;
u32 GL_DOUBLEBUFFER=3122;
u32 GL_STEREO=3123;
u32 GL_LINE_SMOOTH_HINT=3154;
u32 GL_POLYGON_SMOOTH_HINT=3155;
u32 GL_UNPACK_SWAP_BYTES=3312;
u32 GL_UNPACK_LSB_FIRST=3313;
u32 GL_UNPACK_ROW_LENGTH=3314;
u32 GL_UNPACK_SKIP_ROWS=3315;
u32 GL_UNPACK_SKIP_PIXELS=3316;
u32 GL_UNPACK_ALIGNMENT=3317;
u32 GL_PACK_SWAP_BYTES=3328;
u32 GL_PACK_LSB_FIRST=3329;
u32 GL_PACK_ROW_LENGTH=3330;
u32 GL_PACK_SKIP_ROWS=3331;
u32 GL_PACK_SKIP_PIXELS=3332;
u32 GL_PACK_ALIGNMENT=3333;
u32 GL_MAX_TEXTURE_SIZE=3379;
u32 GL_MAX_VIEWPORT_DIMS=3386;
u32 GL_SUBPIXEL_BITS=3408;
u32 GL_TEXTURE_1D=3552;
u32 GL_POLYGON_OFFSET_UNITS=10752;
u32 GL_POLYGON_OFFSET_POINT=10753;
u32 GL_POLYGON_OFFSET_LINE=10754;
u32 GL_POLYGON_OFFSET_FILL=32823;
u32 GL_POLYGON_OFFSET_FACTOR=32824;
u32 GL_TEXTURE_BINDING_1D=32872;
u32 GL_TEXTURE_BINDING_2D=32873;
u32 GL_TEXTURE_WIDTH=4096;
u32 GL_TEXTURE_HEIGHT=4097;
u32 GL_TEXTURE_INTERNAL_FORMAT=4099;
u32 GL_TEXTURE_BORDER_COLOR=4100;
u32 GL_TEXTURE_RED_SIZE=32860;
u32 GL_TEXTURE_GREEN_SIZE=32861;
u32 GL_TEXTURE_BLUE_SIZE=32862;
u32 GL_TEXTURE_ALPHA_SIZE=32863;
u32 GL_DONT_CARE=4352;
u32 GL_FASTEST=4353;
u32 GL_NICEST=4354;
u32 GL_BYTE=5120;
u32 GL_FLOAT16=5122;
u32 GL_INT=5124;
u32 GL_UNSIGNED_INT=5125;
u32 GL_DOUBLE=5130;
u32 GL_CLEAR=5376;
u32 GL_AND=5377;
u32 GL_AND_REVERSE=5378;
u32 GL_COPY=5379;
u32 GL_AND_INVERTED=5380;
u32 GL_NOOP=5381;
u32 GL_XOR=5382;
u32 GL_OR=5383;
u32 GL_NOR=5384;
u32 GL_EQUIV=5385;
u32 GL_INVERT=5386;
u32 GL_OR_REVERSE=5387;
u32 GL_COPY_INVERTED=5388;
u32 GL_OR_INVERTED=5389;
u32 GL_NAND=5390;
u32 GL_SET=5391;
u32 GL_TEXTURE=5890;
u32 GL_COLOR=6144;
u32 GL_DEPTH=6145;
u32 GL_STENCIL=6146;
u32 GL_STENCIL_INDEX=6401;
u32 GL_DEPTH_COMPONENT=6402;
u32 GL_RED=6403;
u32 GL_GREEN=6404;
u32 GL_BLUE=6405;
u32 GL_ALPHA=6406;
u32 GL_RGB=6407;
u32 GL_POINT=6912;
u32 GL_LINE=6913;
u32 GL_FILL=6914;
u32 GL_KEEP=7680;
u32 GL_REPLACE=7681;
u32 GL_INCR=7682;
u32 GL_DECR=7683;
u32 GL_VENDOR=7936;
u32 GL_RENDERER=7937;
u32 GL_VERSION=7938;
u32 GL_EXTENSIONS=7939;
u32 GL_NEAREST=9728;
u32 GL_NEAREST_MIPMAP_NEAREST=9984;
u32 GL_LINEAR_MIPMAP_NEAREST=9985;
u32 GL_NEAREST_MIPMAP_LINEAR=9986;
u32 GL_LINEAR_MIPMAP_LINEAR=9987;
u32 GL_TEXTURE_WRAP_S=10242;
u32 GL_TEXTURE_WRAP_T=10243;
u32 GL_PROXY_TEXTURE_1D=32867;
u32 GL_PROXY_TEXTURE_2D=32868;
u32 GL_REPEAT=10497;
u32 GL_R3_G3_B2=10768;
u32 GL_RGB4=32847;
u32 GL_RGB5=32848;
u32 GL_RGB8=32849;
u32 GL_RGB10=32850;
u32 GL_RGB12=32851;
u32 GL_RGB16=32852;
u32 GL_RGBA2=32853;
u32 GL_RGBA4=32854;
u32 GL_RGB5_A1=32855;
u32 GL_RGBA8=32856;
u32 GL_RGB10_A2=32857;
u32 GL_RGBA12=32858;
u32 GL_RGBA16=32859;
u32 GL_UNSIGNED_BYTE_3_3_2=32818;
u32 GL_UNSIGNED_i16_4_4_4_4=32819;
u32 GL_UNSIGNED_i16_5_5_5_1=32820;
u32 GL_UNSIGNED_INT_8_8_8_8=32821;
u32 GL_UNSIGNED_INT_10_10_10_2=32822;
u32 GL_TEXTURE_BINDING_3D=32874;
u32 GL_PACK_SKIP_IMAGES=32875;
u32 GL_PACK_IMAGE_HEIGHT=32876;
u32 GL_UNPACK_SKIP_IMAGES=32877;
u32 GL_UNPACK_IMAGE_HEIGHT=32878;
u32 GL_TEXTURE_3D=32879;
u32 GL_PROXY_TEXTURE_3D=32880;
u32 GL_TEXTURE_DEPTH=32881;
u32 GL_TEXTURE_WRAP_R=32882;
u32 GL_MAX_3D_TEXTURE_SIZE=32883;
u32 GL_UNSIGNED_BYTE_2_3_3_REV=33634;
u32 GL_UNSIGNED_i16_5_6_5=33635;
u32 GL_UNSIGNED_i16_5_6_5_REV=33636;
u32 GL_UNSIGNED_i16_4_4_4_4_REV=33637;
u32 GL_UNSIGNED_i16_1_5_5_5_REV=33638;
u32 GL_UNSIGNED_INT_8_8_8_8_REV=33639;
u32 GL_UNSIGNED_INT_2_10_10_10_REV=33640;
u32 GL_BGR=32992;
u32 GL_BGRA=32993;
u32 GL_MAX_ELEMENTS_VERTICES=33000;
u32 GL_MAX_ELEMENTS_INDICES=33001;
u32 GL_CLAMP_TO_EDGE=33071;
u32 GL_TEXTURE_MIN_LOD=33082;
u32 GL_TEXTURE_MAX_LOD=33083;
u32 GL_SMOOTH_POINT_SIZE_RANGE=2834;
u32 GL_SMOOTH_POINT_SIZE_GRANULARITY=2835;
u32 GL_SMOOTH_LINE_WIDTH_RANGE=2850;
u32 GL_SMOOTH_LINE_WIDTH_GRANULARITY=2851;
u32 GL_ALIASED_LINE_WIDTH_RANGE=33902;
u32 GL_CONSTANT_COLOR=32769;
u32 GL_ONE_MINUS_CONSTANT_COLOR=32770;
u32 GL_CONSTANT_ALPHA=32771;
u32 GL_ONE_MINUS_CONSTANT_ALPHA=32772;
u32 GL_BLEND_COLOR=32773;
u32 GL_FN_ADD=32774;
u32 GL_MIN=32775;
u32 GL_MAX=32776;
u32 GL_BLEND_EQUATION=32777;
u32 GL_FN_SUBTRACT=32778;
u32 GL_FN_REVERSE_SUBTRACT=32779;
u32 GL_TEXTURE1=33985;
u32 GL_TEXTURE2=33986;
u32 GL_TEXTURE3=33987;
u32 GL_TEXTURE4=33988;
u32 GL_TEXTURE5=33989;
u32 GL_TEXTURE6=33990;
u32 GL_TEXTURE7=33991;
u32 GL_TEXTURE8=33992;
u32 GL_TEXTURE9=33993;
u32 GL_TEXTURE10=33994;
u32 GL_TEXTURE11=33995;
u32 GL_TEXTURE12=33996;
u32 GL_TEXTURE13=33997;
u32 GL_TEXTURE14=33998;
u32 GL_TEXTURE15=33999;
u32 GL_TEXTURE16=34000;
u32 GL_TEXTURE17=34001;
u32 GL_TEXTURE18=34002;
u32 GL_TEXTURE19=34003;
u32 GL_TEXTURE20=34004;
u32 GL_TEXTURE21=34005;
u32 GL_TEXTURE22=34006;
u32 GL_TEXTURE23=34007;
u32 GL_TEXTURE24=34008;
u32 GL_TEXTURE25=34009;
u32 GL_TEXTURE26=34010;
u32 GL_TEXTURE27=34011;
u32 GL_TEXTURE28=34012;
u32 GL_TEXTURE29=34013;
u32 GL_TEXTURE30=34014;
u32 GL_TEXTURE31=34015;
u32 GL_ACTIVE_TEXTURE=34016;
u32 GL_MULTISAMPLE=32925;
u32 GL_SAMPLE_ALPHA_TO_COVERAGE=32926;
u32 GL_SAMPLE_ALPHA_TO_ONE=32927;
u32 GL_SAMPLE_COVERAGE=32928;
u32 GL_SAMPLE_BUFFERS=32936;
u32 GL_SAMPLES=32937;
u32 GL_SAMPLE_COVERAGE_VALUE=32938;
u32 GL_SAMPLE_COVERAGE_INVERT=32939;
u32 GL_TEXTURE_CUBE_MAP=34067;
u32 GL_TEXTURE_BINDING_CUBE_MAP=34068;
u32 GL_TEXTURE_CUBE_MAP_POSITIVE_X=34069;
u32 GL_TEXTURE_CUBE_MAP_NEGATIVE_X=34070;
u32 GL_TEXTURE_CUBE_MAP_POSITIVE_Y=34071;
u32 GL_TEXTURE_CUBE_MAP_NEGATIVE_Y=34072;
u32 GL_TEXTURE_CUBE_MAP_POSITIVE_Z=34073;
u32 GL_TEXTURE_CUBE_MAP_NEGATIVE_Z=34074;
u32 GL_PROXY_TEXTURE_CUBE_MAP=34075;
u32 GL_MAX_CUBE_MAP_TEXTURE_SIZE=34076;
u32 GL_COMPRESSED_RGB=34029;
u32 GL_COMPRESSED_RGBA=34030;
u32 GL_TEXTURE_COMPRESSION_HINT=34031;
u32 GL_TEXTURE_COMPRESSED_IMAGE_SIZE=34464;
u32 GL_TEXTURE_COMPRESSED=34465;
u32 GL_NUM_COMPRESSED_TEXTURE_FORMATS=34466;
u32 GL_COMPRESSED_TEXTURE_FORMATS=34467;
u32 GL_CLAMP_TO_BORDER=33069;
u32 GL_BLEND_DST_RGB=32968;
u32 GL_BLEND_SRC_RGB=32969;
u32 GL_BLEND_DST_ALPHA=32970;
u32 GL_BLEND_SRC_ALPHA=32971;
u32 GL_POINT_FADE_THRESHOLD_SIZE=33064;
u32 GL_DEPTH_COMPONENT16=33189;
u32 GL_DEPTH_COMPONENT24=33190;
u32 GL_DEPTH_COMPONENT32=33191;
u32 GL_MIRRORED_REPEAT=33648;
u32 GL_MAX_TEXTURE_LOD_BIAS=34045;
u32 GL_TEXTURE_LOD_BIAS=34049;
u32 GL_INCR_WRAP=34055;
u32 GL_DECR_WRAP=34056;
u32 GL_TEXTURE_DEPTH_SIZE=34890;
u32 GL_TEXTURE_COMPARE_MODE=34892;
u32 GL_TEXTURE_COMPARE_FUNC=34893;
u32 GL_BUFFER_SIZE=34660;
u32 GL_BUFFER_USAGE=34661;
u32 GL_QUERY_COUNTER_BITS=34916;
u32 GL_CURRENT_QUERY=34917;
u32 GL_QUERY_RESULT=34918;
u32 GL_QUERY_RESULT_AVAILABLE=34919;
u32 GL_ARRAY_BUFFER_BINDING=34964;
u32 GL_ELEMENT_ARRAY_BUFFER_BINDING=34965;
u32 GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING=34975;
u32 GL_READ_ONLY=35000;
u32 GL_WRITE_ONLY=35001;
u32 GL_READ_WRITE=35002;
u32 GL_BUFFER_ACCESS=35003;
u32 GL_BUFFER_MAPPED=35004;
u32 GL_BUFFER_MAP_POINTER=35005;
u32 GL_STREAM_DRAW=35040;
u32 GL_STREAM_READ=35041;
u32 GL_STREAM_COPY=35042;
u32 GL_STATIC_DRAW=35044;
u32 GL_STATIC_READ=35045;
u32 GL_STATIC_COPY=35046;
u32 GL_DYNAMIC_READ=35049;
u32 GL_DYNAMIC_COPY=35050;
u32 GL_SAMPLES_PASSED=35092;
u32 GL_BLEND_EQUATION_RGB=32777;
u32 GL_VERTEX_ATTRIB_ARRAY_ENABLED=34338;
u32 GL_VERTEX_ATTRIB_ARRAY_SIZE=34339;
u32 GL_VERTEX_ATTRIB_ARRAY_STRIDE=34340;
u32 GL_VERTEX_ATTRIB_ARRAY_TYPE=34341;
u32 GL_CURRENT_VERTEX_ATTRIB=34342;
u32 GL_VERTEX_PROGRAM_POINT_SIZE=34370;
u32 GL_VERTEX_ATTRIB_ARRAY_POINTER=34373;
u32 GL_STENCIL_BACK_FUNC=34816;
u32 GL_STENCIL_BACK_FAIL=34817;
u32 GL_STENCIL_BACK_PASS_DEPTH_FAIL=34818;
u32 GL_STENCIL_BACK_PASS_DEPTH_PASS=34819;
u32 GL_MAX_DRAW_BUFFERS=34852;
u32 GL_DRAW_BUFFER0=34853;
u32 GL_DRAW_BUFFER1=34854;
u32 GL_DRAW_BUFFER2=34855;
u32 GL_DRAW_BUFFER3=34856;
u32 GL_DRAW_BUFFER4=34857;
u32 GL_DRAW_BUFFER5=34858;
u32 GL_DRAW_BUFFER6=34859;
u32 GL_DRAW_BUFFER7=34860;
u32 GL_DRAW_BUFFER8=34861;
u32 GL_DRAW_BUFFER9=34862;
u32 GL_DRAW_BUFFER10=34863;
u32 GL_DRAW_BUFFER11=34864;
u32 GL_DRAW_BUFFER12=34865;
u32 GL_DRAW_BUFFER13=34866;
u32 GL_DRAW_BUFFER14=34867;
u32 GL_DRAW_BUFFER15=34868;
u32 GL_BLEND_EQUATION_ALPHA=34877;
u32 GL_MAX_VERTEX_ATTRIBS=34921;
u32 GL_VERTEX_ATTRIB_ARRAY_NORMALIZED=34922;
u32 GL_MAX_TEXTURE_IMAGE_UNITS=34930;
u32 GL_MAX_FRAGMENT_UNIFORM_COMPONENTS=35657;
u32 GL_MAX_VERTEX_UNIFORM_COMPONENTS=35658;
u32 GL_MAX_VARYING_FLOATS=35659;
u32 GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS=35660;
u32 GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS=35661;
u32 GL_SHADER_TYPE=35663;
u32 GL_FLOAT_VEC2=35664;
u32 GL_FLOAT_VEC3=35665;
u32 GL_FLOAT_VEC4=35666;
u32 GL_INT_VEC2=35667;
u32 GL_INT_VEC3=35668;
u32 GL_INT_VEC4=35669;
u32 GL_BOOL=35670;
u32 GL_BOOL_VEC2=35671;
u32 GL_BOOL_VEC3=35672;
u32 GL_BOOL_VEC4=35673;
u32 GL_FLOAT_MAT2=35674;
u32 GL_FLOAT_MAT3=35675;
u32 GL_FLOAT_MAT4=35676;
u32 GL_SAMPLER_1D=35677;
u32 GL_SAMPLER_3D=35679;
u32 GL_SAMPLER_CUBE=35680;
u32 GL_SAMPLER_1D_SHADOW=35681;
u32 GL_SAMPLER_2D_SHADOW=35682;
u32 GL_DELETE_STATUS=35712;
u32 GL_VALIDATE_STATUS=35715;
u32 GL_INFO_LOG_LENGTH=35716;
u32 GL_ATTACHED_SHADERS=35717;
u32 GL_ACTIVE_UNIFORM_MAX_LENGTH=35719;
u32 GL_SHADER_SOURCE_LENGTH=35720;
u32 GL_ACTIVE_ATTRIBUTES=35721;
u32 GL_ACTIVE_ATTRIBUTE_MAX_LENGTH=35722;
u32 GL_FRAGMENT_SHADER_DERIVATIVE_HINT=35723;
u32 GL_SHADING_LANGUAGE_VERSION=35724;
u32 GL_CURRENT_PROGRAM=35725;
u32 GL_POINT_SPRITE_COORD_ORIGIN=36000;
u32 GL_LOWER_LEFT=36001;
u32 GL_UPPER_LEFT=36002;
u32 GL_STENCIL_BACK_REF=36003;
u32 GL_STENCIL_BACK_VALUE_MASK=36004;
u32 GL_STENCIL_BACK_WRITEMASK=36005;
u32 GL_PIXEL_PACK_BUFFER=35051;
u32 GL_PIXEL_UNPACK_BUFFER=35052;
u32 GL_PIXEL_PACK_BUFFER_BINDING=35053;
u32 GL_PIXEL_UNPACK_BUFFER_BINDING=35055;
u32 GL_FLOAT_MAT2x3=35685;
u32 GL_FLOAT_MAT2x4=35686;
u32 GL_FLOAT_MAT3x2=35687;
u32 GL_FLOAT_MAT3x4=35688;
u32 GL_FLOAT_MAT4x2=35689;
u32 GL_FLOAT_MAT4x3=35690;
u32 GL_SRGB=35904;
u32 GL_SRGB8=35905;
u32 GL_SRGB_ALPHA=35906;
u32 GL_SRGB8_ALPHA8=35907;
u32 GL_COMPRESSED_SRGB=35912;
u32 GL_COMPRESSED_SRGB_ALPHA=35913;
u32 GL_COMPARE_REF_TO_TEXTURE=34894;
u32 GL_CLIP_DISTANCE0=12288;
u32 GL_CLIP_DISTANCE1=12289;
u32 GL_CLIP_DISTANCE2=12290;
u32 GL_CLIP_DISTANCE3=12291;
u32 GL_CLIP_DISTANCE4=12292;
u32 GL_CLIP_DISTANCE5=12293;
u32 GL_CLIP_DISTANCE6=12294;
u32 GL_CLIP_DISTANCE7=12295;
u32 GL_MAX_CLIP_DISTANCES=3378;
u32 GL_MAJOR_VERSION=33307;
u32 GL_MINOR_VERSION=33308;
u32 GL_NUM_EXTENSIONS=33309;
u32 GL_CONTEXT_FLAGS=33310;
u32 GL_COMPRESSED_RED=33317;
u32 GL_COMPRESSED_RG=33318;
u32 GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT=1;
u32 GL_RGBA32F=34836;
u32 GL_RGB32F=34837;
u32 GL_RGBA16F=34842;
u32 GL_RGB16F=34843;
u32 GL_VERTEX_ATTRIB_ARRAY_INTEGER=35069;
u32 GL_MAX_ARRAY_TEXTURE_LAYERS=35071;
u32 GL_MIN_PROGRAM_TEXEL_OFFSET=35076;
u32 GL_MAX_PROGRAM_TEXEL_OFFSET=35077;
u32 GL_CLAMP_READ_COLOR=35100;
u32 GL_FIXED_ONLY=35101;
u32 GL_MAX_VARYING_COMPONENTS=35659;
u32 GL_TEXTURE_1D_ARRAY=35864;
u32 GL_PROXY_TEXTURE_1D_ARRAY=35865;
u32 GL_TEXTURE_2D_ARRAY=35866;
u32 GL_PROXY_TEXTURE_2D_ARRAY=35867;
u32 GL_TEXTURE_BINDING_1D_ARRAY=35868;
u32 GL_TEXTURE_BINDING_2D_ARRAY=35869;
u32 GL_R11F_G11F_B10F=35898;
u32 GL_UNSIGNED_INT_10F_11F_11F_REV=35899;
u32 GL_RGB9_E5=35901;
u32 GL_UNSIGNED_INT_5_9_9_9_REV=35902;
u32 GL_TEXTURE_SHARED_SIZE=35903;
u32 GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH=35958;
u32 GL_TRANSFORM_FEEDBACK_BUFFER_MODE=35967;
u32 GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS=35968;
u32 GL_TRANSFORM_FEEDBACK_VARYINGS=35971;
u32 GL_TRANSFORM_FEEDBACK_BUFFER_START=35972;
u32 GL_TRANSFORM_FEEDBACK_BUFFER_SIZE=35973;
u32 GL_PRIMITIVES_GENERATED=35975;
u32 GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN=35976;
u32 GL_RASTERIZER_DISCARD=35977;
u32 GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS=35978;
u32 GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS=35979;
u32 GL_INTERLEAVED_ATTRIBS=35980;
u32 GL_SEPARATE_ATTRIBS=35981;
u32 GL_TRANSFORM_FEEDBACK_BUFFER=35982;
u32 GL_TRANSFORM_FEEDBACK_BUFFER_BINDING=35983;
u32 GL_RGBA32UI=36208;
u32 GL_RGB32UI=36209;
u32 GL_RGBA16UI=36214;
u32 GL_RGB16UI=36215;
u32 GL_RGBA8UI=36220;
u32 GL_RGB8UI=36221;
u32 GL_RGBA32I=36226;
u32 GL_RGB32I=36227;
u32 GL_RGBA16I=36232;
u32 GL_RGB16I=36233;
u32 GL_RGBA8I=36238;
u32 GL_RGB8I=36239;
u32 GL_RED_INTEGER=36244;
u32 GL_GREEN_INTEGER=36245;
u32 GL_BLUE_INTEGER=36246;
u32 GL_RGB_INTEGER=36248;
u32 GL_RGBA_INTEGER=36249;
u32 GL_BGR_INTEGER=36250;
u32 GL_BGRA_INTEGER=36251;
u32 GL_SAMPLER_1D_ARRAY=36288;
u32 GL_SAMPLER_2D_ARRAY=36289;
u32 GL_SAMPLER_1D_ARRAY_SHADOW=36291;
u32 GL_SAMPLER_2D_ARRAY_SHADOW=36292;
u32 GL_SAMPLER_CUBE_SHADOW=36293;
u32 GL_UNSIGNED_INT_VEC2=36294;
u32 GL_UNSIGNED_INT_VEC3=36295;
u32 GL_UNSIGNED_INT_VEC4=36296;
u32 GL_INT_SAMPLER_1D=36297;
u32 GL_INT_SAMPLER_2D=36298;
u32 GL_INT_SAMPLER_3D=36299;
u32 GL_INT_SAMPLER_CUBE=36300;
u32 GL_INT_SAMPLER_1D_ARRAY=36302;
u32 GL_INT_SAMPLER_2D_ARRAY=36303;
u32 GL_UNSIGNED_INT_SAMPLER_1D=36305;
u32 GL_UNSIGNED_INT_SAMPLER_2D=36306;
u32 GL_UNSIGNED_INT_SAMPLER_3D=36307;
u32 GL_UNSIGNED_INT_SAMPLER_CUBE=36308;
u32 GL_UNSIGNED_INT_SAMPLER_1D_ARRAY=36310;
u32 GL_UNSIGNED_INT_SAMPLER_2D_ARRAY=36311;
u32 GL_QUERY_WAIT=36371;
u32 GL_QUERY_NO_WAIT=36372;
u32 GL_QUERY_BY_REGION_WAIT=36373;
u32 GL_QUERY_BY_REGION_NO_WAIT=36374;
u32 GL_BUFFER_ACCESS_FLAGS=37151;
u32 GL_BUFFER_MAP_LENGTH=37152;
u32 GL_BUFFER_MAP_OFFSET=37153;
u32 GL_SAMPLER_2D_RECT=35683;
u32 GL_SAMPLER_2D_RECT_SHADOW=35684;
u32 GL_SAMPLER_BUFFER=36290;
u32 GL_INT_SAMPLER_2D_RECT=36301;
u32 GL_INT_SAMPLER_BUFFER=36304;
u32 GL_UNSIGNED_INT_SAMPLER_2D_RECT=36309;
u32 GL_UNSIGNED_INT_SAMPLER_BUFFER=36312;
u32 GL_TEXTURE_BUFFER=35882;
u32 GL_MAX_TEXTURE_BUFFER_SIZE=35883;
u32 GL_TEXTURE_BINDING_BUFFER=35884;
u32 GL_TEXTURE_BUFFER_DATA_STORE_BINDING=35885;
u32 GL_TEXTURE_RECTANGLE=34037;
u32 GL_TEXTURE_BINDING_RECTANGLE=34038;
u32 GL_PROXY_TEXTURE_RECTANGLE=34039;
u32 GL_MAX_RECTANGLE_TEXTURE_SIZE=34040;
u32 GL_R8_SNORM=36756;
u32 GL_RG8_SNORM=36757;
u32 GL_RGB8_SNORM=36758;
u32 GL_RGBA8_SNORM=36759;
u32 GL_R16_SNORM=36760;
u32 GL_RG16_SNORM=36761;
u32 GL_RGB16_SNORM=36762;
u32 GL_RGBA16_SNORM=36763;
u32 GL_SIGNED_NORMALIZED=36764;
u32 GL_PRIMITIVE_RESTART=36765;
u32 GL_PRIMITIVE_RESTART_INDEX=36766;
u32 GL_CONTEXT_CORE_PROFILE_BIT=1;
u32 GL_CONTEXT_COMPATIBILITY_PROFILE_BIT=2;
u32 GL_LINES_ADJACENCY=10;
u32 GL_LINE_STRIP_ADJACENCY=11;
u32 GL_TRIANGLES_ADJACENCY=12;
u32 GL_TRIANGLE_STRIP_ADJACENCY=13;
u32 GL_PROGRAM_POINT_SIZE=34370;
u32 GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS=35881;
u32 GL_FRAMEBUFFER_ATTACHMENT_LAYERED=36263;
u32 GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS=36264;
u32 GL_GEOMETRY_SHADER=36313;
u32 GL_GEOMETRY_VERTICES_OUT=35094;
u32 GL_GEOMETRY_INPUT_TYPE=35095;
u32 GL_GEOMETRY_OUTPUT_TYPE=35096;
u32 GL_MAX_GEOMETRY_UNIFORM_COMPONENTS=36319;
u32 GL_MAX_GEOMETRY_OUTPUT_VERTICES=36320;
u32 GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS=36321;
u32 GL_MAX_VERTEX_OUTPUT_COMPONENTS=37154;
u32 GL_MAX_GEOMETRY_INPUT_COMPONENTS=37155;
u32 GL_MAX_GEOMETRY_OUTPUT_COMPONENTS=37156;
u32 GL_MAX_FRAGMENT_INPUT_COMPONENTS=37157;
u32 GL_CONTEXT_PROFILE_MASK=37158;
u32 GL_VERTEX_ATTRIB_ARRAY_DIVISOR=35070;
u32 GL_SAMPLE_SHADING=35894;
u32 GL_MIN_SAMPLE_SHADING_VALUE=35895;
u32 GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET=36446;
u32 GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET=36447;
u32 GL_TEXTURE_CUBE_MAP_ARRAY=36873;
u32 GL_TEXTURE_BINDING_CUBE_MAP_ARRAY=36874;
u32 GL_PROXY_TEXTURE_CUBE_MAP_ARRAY=36875;
u32 GL_SAMPLER_CUBE_MAP_ARRAY=36876;
u32 GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW=36877;
u32 GL_INT_SAMPLER_CUBE_MAP_ARRAY=36878;
u32 GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY=36879;
u32 GL_DEPTH_COMPONENT32F=36012;
u32 GL_DEPTH32F_STENCIL8=36013;
u32 GL_FLOAT_32_UNSIGNED_INT_24_8_REV=36269;
u32 GL_INVALID_FRAMEBUFFER_OPERATION=1286;
u32 GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING=33296;
u32 GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE=33297;
u32 GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE=33298;
u32 GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE=33299;
u32 GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE=33300;
u32 GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE=33301;
u32 GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE=33302;
u32 GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE=33303;
u32 GL_FRAMEBUFFER_DEFAULT=33304;
u32 GL_FRAMEBUFFER_UNDEFINED=33305;
u32 GL_DEPTH_STENCIL_ATTACHMENT=33306;
u32 GL_MAX_RENDERBUFFER_SIZE=34024;
u32 GL_DEPTH_STENCIL=34041;
u32 GL_UNSIGNED_INT_24_8=34042;
u32 GL_DEPTH24_STENCIL8=35056;
u32 GL_TEXTURE_STENCIL_SIZE=35057;
u32 GL_TEXTURE_RED_TYPE=35856;
u32 GL_TEXTURE_GREEN_TYPE=35857;
u32 GL_TEXTURE_BLUE_TYPE=35858;
u32 GL_TEXTURE_ALPHA_TYPE=35859;
u32 GL_TEXTURE_DEPTH_TYPE=35862;
u32 GL_UNSIGNED_NORMALIZED=35863;
u32 GL_FRAMEBUFFER_BINDING=36006;
u32 GL_DRAW_FRAMEBUFFER_BINDING=36006;
u32 GL_RENDERBUFFER_BINDING=36007;
u32 GL_READ_FRAMEBUFFER=36008;
u32 GL_DRAW_FRAMEBUFFER=36009;
u32 GL_READ_FRAMEBUFFER_BINDING=36010;
u32 GL_RENDERBUFFER_SAMPLES=36011;
u32 GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE=36048;
u32 GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME=36049;
u32 GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL=36050;
u32 GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE=36051;
u32 GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER=36052;
u32 GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT=36054;
u32 GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT=36055;
u32 GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER=36059;
u32 GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER=36060;
u32 GL_FRAMEBUFFER_UNSUPPORTED=36061;
u32 GL_MAX_COLOR_ATTACHMENTS=36063;
u32 GL_COLOR_ATTACHMENT1=36065;
u32 GL_COLOR_ATTACHMENT2=36066;
u32 GL_COLOR_ATTACHMENT3=36067;
u32 GL_COLOR_ATTACHMENT4=36068;
u32 GL_COLOR_ATTACHMENT5=36069;
u32 GL_COLOR_ATTACHMENT6=36070;
u32 GL_COLOR_ATTACHMENT7=36071;
u32 GL_COLOR_ATTACHMENT8=36072;
u32 GL_COLOR_ATTACHMENT9=36073;
u32 GL_COLOR_ATTACHMENT10=36074;
u32 GL_COLOR_ATTACHMENT11=36075;
u32 GL_COLOR_ATTACHMENT12=36076;
u32 GL_COLOR_ATTACHMENT13=36077;
u32 GL_COLOR_ATTACHMENT14=36078;
u32 GL_COLOR_ATTACHMENT15=36079;
u32 GL_DEPTH_ATTACHMENT=36096;
u32 GL_STENCIL_ATTACHMENT=36128;
u32 GL_RENDERBUFFER=36161;
u32 GL_RENDERBUFFER_WIDTH=36162;
u32 GL_RENDERBUFFER_HEIGHT=36163;
u32 GL_RENDERBUFFER_INTERNAL_FORMAT=36164;
u32 GL_STENCIL_INDEX1=36166;
u32 GL_STENCIL_INDEX4=36167;
u32 GL_STENCIL_INDEX8=36168;
u32 GL_STENCIL_INDEX16=36169;
u32 GL_RENDERBUFFER_RED_SIZE=36176;
u32 GL_RENDERBUFFER_GREEN_SIZE=36177;
u32 GL_RENDERBUFFER_BLUE_SIZE=36178;
u32 GL_RENDERBUFFER_ALPHA_SIZE=36179;
u32 GL_RENDERBUFFER_DEPTH_SIZE=36180;
u32 GL_RENDERBUFFER_STENCIL_SIZE=36181;
u32 GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE=36182;
u32 GL_MAX_SAMPLES=36183;
u32 GL_FRAMEBUFFER_SRGB=36281;
u32 GL_HALF_F32=5131;
u32 GL_MAP_READ_BIT=1;
u32 GL_MAP_WRITE_BIT=2;
u32 GL_MAP_INVALIDATE_RANGE_BIT=4;
u32 GL_MAP_INVALIDATE_BUFFER_BIT=8;
u32 GL_MAP_FLUSH_EXPLICIT_BIT=16;
u32 GL_MAP_UNSYNCHRONIZED_BIT=32;
u32 GL_COMPRESSED_RED_RGTC1=36283;
u32 GL_COMPRESSED_SIGNED_RED_RGTC1=36284;
u32 GL_COMPRESSED_RG_RGTC2=36285;
u32 GL_COMPRESSED_SIGNED_RG_RGTC2=36286;
u32 GL_RG=33319;
u32 GL_RG_INTEGER=33320;
u32 GL_R8=33321;
u32 GL_R16=33322;
u32 GL_RG8=33323;
u32 GL_RG16=33324;
u32 GL_R16F=33325;
u32 GL_R32F=33326;
u32 GL_RG16F=33327;
u32 GL_RG32F=33328;
u32 GL_R8I=33329;
u32 GL_R8UI=33330;
u32 GL_R16I=33331;
u32 GL_R16UI=33332;
u32 GL_R32I=33333;
u32 GL_R32UI=33334;
u32 GL_RG8I=33335;
u32 GL_RG8UI=33336;
u32 GL_RG16I=33337;
u32 GL_RG16UI=33338;
u32 GL_RG32I=33339;
u32 GL_RG32UI=33340;
u32 GL_VERTEX_ARRAY_BINDING=34229;
u32 GL_UNIFORM_BUFFER_BINDING=35368;
u32 GL_UNIFORM_BUFFER_START=35369;
u32 GL_UNIFORM_BUFFER_SIZE=35370;
u32 GL_MAX_VERTEX_UNIFORM_BLOCKS=35371;
u32 GL_MAX_GEOMETRY_UNIFORM_BLOCKS=35372;
u32 GL_MAX_FRAGMENT_UNIFORM_BLOCKS=35373;
u32 GL_MAX_COMBINED_UNIFORM_BLOCKS=35374;
u32 GL_MAX_UNIFORM_BUFFER_BINDINGS=35375;
u32 GL_MAX_UNIFORM_BLOCK_SIZE=35376;
u32 GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS=35377;
u32 GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS=35378;
u32 GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS=35379;
u32 GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT=35380;
u32 GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH=35381;
u32 GL_ACTIVE_UNIFORM_BLOCKS=35382;
u32 GL_UNIFORM_TYPE=35383;
u32 GL_UNIFORM_SIZE=35384;
u32 GL_UNIFORM_NAME_LENGTH=35385;
u32 GL_UNIFORM_BLOCK_INDEX=35386;
u32 GL_UNIFORM_OFFSET=35387;
u32 GL_UNIFORM_ARRAY_STRIDE=35388;
u32 GL_UNIFORM_MATRIX_STRIDE=35389;
u32 GL_UNIFORM_IS_ROW_MAJOR=35390;
u32 GL_UNIFORM_BLOCK_BINDING=35391;
u32 GL_UNIFORM_BLOCK_DATA_SIZE=35392;
u32 GL_UNIFORM_BLOCK_NAME_LENGTH=35393;
u32 GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS=35394;
u32 GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES=35395;
u32 GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER=35396;
u32 GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER=35397;
u32 GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER=35398;
u32 GL_COPY_READ_BUFFER=36662;
u32 GL_COPY_WRITE_BUFFER=36663;
u32 GL_DEPTH_CLAMP=34383;
u32 GL_FIRST_VERTEX_CONVENTION=36429;
u32 GL_LAST_VERTEX_CONVENTION=36430;
u32 GL_PROVOKING_VERTEX=36431;
u32 GL_TEXTURE_CUBE_MAP_SEAMLESS=34895;
u32 GL_MAX_SERVER_WAIT_TIMEOUT=37137;
u32 GL_OBJECT_TYPE=37138;
u32 GL_SYNC_CONDITION=37139;
u32 GL_SYNC_STATUS=37140;
u32 GL_SYNC_FLAGS=37141;
u32 GL_SYNC_FENCE=37142;
u32 GL_SYNC_GPU_COMMANDS_COMPLETE=37143;
u32 GL_UNSIGNALED=37144;
u32 GL_SIGNALED=37145;
u32 GL_ALREADY_SIGNALED=37146;
u32 GL_TIMEOUT_EXPIRED=37147;
u32 GL_CONDITION_SATISFIED=37148;
u32 GL_WAIT_FAILED=37149;
u32 GL_SYNC_FLUSH_COMMANDS_BIT=1;
u32 GL_SAMPLE_POSITION=36432;
u32 GL_SAMPLE_MASK=36433;
u32 GL_SAMPLE_MASK_VALUE=36434;
u32 GL_MAX_SAMPLE_MASK_WORDS=36441;
u32 GL_TEXTURE_2D_MULTISAMPLE=37120;
u32 GL_PROXY_TEXTURE_2D_MULTISAMPLE=37121;
u32 GL_TEXTURE_2D_MULTISAMPLE_ARRAY=37122;
u32 GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY=37123;
u32 GL_TEXTURE_BINDING_2D_MULTISAMPLE=37124;
u32 GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY=37125;
u32 GL_TEXTURE_SAMPLES=37126;
u32 GL_TEXTURE_FIXED_SAMPLE_LOCATIONS=37127;
u32 GL_SAMPLER_2D_MULTISAMPLE=37128;
u32 GL_INT_SAMPLER_2D_MULTISAMPLE=37129;
u32 GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE=37130;
u32 GL_SAMPLER_2D_MULTISAMPLE_ARRAY=37131;
u32 GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY=37132;
u32 GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY=37133;
u32 GL_MAX_COLOR_TEXTURE_SAMPLES=37134;
u32 GL_MAX_DEPTH_TEXTURE_SAMPLES=37135;
u32 GL_MAX_INTEGER_SAMPLES=37136;
u32 GL_SRC1_COLOR=35065;
u32 GL_SRC1_ALPHA=34185;
u32 GL_ONE_MINUS_SRC1_COLOR=35066;
u32 GL_ONE_MINUS_SRC1_ALPHA=35067;
u32 GL_MAX_DUAL_SOURCE_DRAW_BUFFERS=35068;
u32 GL_ANY_SAMPLES_PASSED=35887;
u32 GL_SAMPLER_BINDING=35097;
u32 GL_RGB10_A2UI=36975;
u32 GL_TEXTURE_SWIZZLE_R=36418;
u32 GL_TEXTURE_SWIZZLE_G=36419;
u32 GL_TEXTURE_SWIZZLE_B=36420;
u32 GL_TEXTURE_SWIZZLE_A=36421;
u32 GL_TEXTURE_SWIZZLE_RGBA=36422;
u32 GL_TIME_ELAPSED=35007;
u32 GL_TIMESTAMP=36392;
u32 GL_INT_2_10_10_10_REV=36255;
u32 GL_DRAW_INDIRECT_BUFFER=36671;
u32 GL_DRAW_INDIRECT_BUFFER_BINDING=36675;
u32 GL_GEOMETRY_SHADER_INVOCATIONS=34943;
u32 GL_MAX_GEOMETRY_SHADER_INVOCATIONS=36442;
u32 GL_MIN_FRAGMENT_INTERPOLATION_OFFSET=36443;
u32 GL_MAX_FRAGMENT_INTERPOLATION_OFFSET=36444;
u32 GL_FRAGMENT_INTERPOLATION_OFFSET_BITS=36445;
u32 GL_DOUBLE_VEC2=36860;
u32 GL_DOUBLE_VEC3=36861;
u32 GL_DOUBLE_VEC4=36862;
u32 GL_DOUBLE_MAT2=36678;
u32 GL_DOUBLE_MAT3=36679;
u32 GL_DOUBLE_MAT4=36680;
u32 GL_DOUBLE_MAT2x3=36681;
u32 GL_DOUBLE_MAT2x4=36682;
u32 GL_DOUBLE_MAT3x2=36683;
u32 GL_DOUBLE_MAT3x4=36684;
u32 GL_DOUBLE_MAT4x2=36685;
u32 GL_DOUBLE_MAT4x3=36686;
u32 GL_ACTIVE_SUBROUTINES=36325;
u32 GL_ACTIVE_SUBROUTINE_UNIFORMS=36326;
u32 GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS=36423;
u32 GL_ACTIVE_SUBROUTINE_MAX_LENGTH=36424;
u32 GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH=36425;
u32 GL_MAX_SUBROUTINES=36327;
u32 GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS=36328;
u32 GL_NUM_COMPATIBLE_SUBROUTINES=36426;
u32 GL_COMPATIBLE_SUBROUTINES=36427;
u32 GL_PATCHES=14;
u32 GL_PATCH_VERTICES=36466;
u32 GL_PATCH_DEFAULT_INNER_LEVEL=36467;
u32 GL_PATCH_DEFAULT_OUTER_LEVEL=36468;
u32 GL_TESS_CONTROL_OUTPUT_VERTICES=36469;
u32 GL_TESS_GEN_MODE=36470;
u32 GL_TESS_GEN_SPACING=36471;
u32 GL_TESS_GEN_VERTEX_ORDER=36472;
u32 GL_TESS_GEN_POINT_MODE=36473;
u32 GL_QUADS=7;
u32 GL_ISOLINES=36474;
u32 GL_FRACTIONAL_ODD=36475;
u32 GL_FRACTIONAL_EVEN=36476;
u32 GL_MAX_PATCH_VERTICES=36477;
u32 GL_MAX_TESS_GEN_LEVEL=36478;
u32 GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS=36479;
u32 GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS=36480;
u32 GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS=36481;
u32 GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS=36482;
u32 GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS=36483;
u32 GL_MAX_TESS_PATCH_COMPONENTS=36484;
u32 GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS=36485;
u32 GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS=36486;
u32 GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS=36489;
u32 GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS=36490;
u32 GL_MAX_TESS_CONTROL_INPUT_COMPONENTS=34924;
u32 GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS=34925;
u32 GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS=36382;
u32 GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS=36383;
u32 GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER=34032;
u32 GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER=34033;
u32 GL_TESS_EVALUATION_SHADER=36487;
u32 GL_TESS_CONTROL_SHADER=36488;
u32 GL_TRANSFORM_FEEDBACK=36386;
u32 GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED=36387;
u32 GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE=36388;
u32 GL_TRANSFORM_FEEDBACK_BINDING=36389;
u32 GL_MAX_TRANSFORM_FEEDBACK_BUFFERS=36464;
u32 GL_MAX_VERTEX_STREAMS=36465;
u32 GL_FIXED=5132;
u32 GL_IMPLEMENTATION_COLOR_READ_TYPE=35738;
u32 GL_IMPLEMENTATION_COLOR_READ_FORMAT=35739;
u32 GL_LOW_F32=36336;
u32 GL_MEDIUM_F32=36337;
u32 GL_HIGH_F32=36338;
u32 GL_LOW_INT=36339;
u32 GL_MEDIUM_INT=36340;
u32 GL_HIGH_INT=36341;
u32 GL_SHADER_COMPILER=36346;
u32 GL_SHADER_BINARY_FORMATS=36344;
u32 GL_NUM_SHADER_BINARY_FORMATS=36345;
u32 GL_MAX_VERTEX_UNIFORM_VECTORS=36347;
u32 GL_MAX_VARYING_VECTORS=36348;
u32 GL_MAX_FRAGMENT_UNIFORM_VECTORS=36349;
u32 GL_RGB565=36194;
u32 GL_PROGRAM_BINARY_RETRIEVABLE_HINT=33367;
u32 GL_PROGRAM_BINARY_LENGTH=34625;
u32 GL_NUM_PROGRAM_BINARY_FORMATS=34814;
u32 GL_PROGRAM_BINARY_FORMATS=34815;
u32 GL_VERTEX_SHADER_BIT=1;
u32 GL_FRAGMENT_SHADER_BIT=2;
u32 GL_GEOMETRY_SHADER_BIT=4;
u32 GL_TESS_CONTROL_SHADER_BIT=8;
u32 GL_TESS_EVALUATION_SHADER_BIT=16;
u32 GL_ALL_SHADER_BITS=4294967295;
u32 GL_PROGRAM_SEPARABLE=33368;
u32 GL_ACTIVE_PROGRAM=33369;
u32 GL_PROGRAM_PIPELINE_BINDING=33370;
u32 GL_MAX_VIEWPORTS=33371;
u32 GL_VIEWPORT_SUBPIXEL_BITS=33372;
u32 GL_VIEWPORT_BOUNDS_RANGE=33373;
u32 GL_LAYER_PROVOKING_VERTEX=33374;
u32 GL_VIEWPORT_INDEX_PROVOKING_VERTEX=33375;
u32 GL_UNDEFINED_VERTEX=33376;
u32 GL_VERSION_1_0=1;
u32 GL_VERSION_1_1=1;
u32 GL_VERSION_1_2=1;
u32 GL_VERSION_1_3=1;
u32 GL_VERSION_1_4=1;
u32 GL_VERSION_1_5=1;
u32 GL_VERSION_2_0=1;
u32 GL_VERSION_2_1=1;
u32 GL_VERSION_3_0=1;
u32 GL_VERSION_3_1=1;
u32 GL_VERSION_3_2=1;
u32 GL_VERSION_3_3=1;
u32 GL_VERSION_4_0=1;
u32 GL_VERSION_4_1=1;
u32 BufferVertex=GL_ARRAY_BUFFER;
u32 BufferIndex=GL_ELEMENT_ARRAY_BUFFER;
i8 CharA=65;
i8 CharB=66;
i8 CharC=67;
i8 CharD=68;
i8 CharE=69;
i8 CharF=70;
i8 CharG=71;
i8 CharH=72;
i8 CharI=73;
i8 CharJ=74;
i8 CharK=75;
i8 CharL=76;
i8 CharM=77;
i8 CharN=78;
i8 CharO=79;
i8 CharP=80;
i8 CharQ=81;
i8 CharR=82;
i8 CharS=83;
i8 CharT=84;
i8 CharU=85;
i8 CharV=86;
i8 CharW=87;
i8 CharX=88;
i8 CharY=89;
i8 CharZ=90;
i8 Chara=97;
i8 Charb=98;
i8 Charc=99;
i8 Chard=100;
i8 Chare=101;
i8 Charf=102;
i8 Charg=103;
i8 Charh=104;
i8 Chari=105;
i8 Charj=106;
i8 Chark=107;
i8 Charl=108;
i8 Charm=109;
i8 Charn=110;
i8 Charo=111;
i8 Charp=112;
i8 Charq=113;
i8 Charr=114;
i8 Chars=115;
i8 Chart=116;
i8 Charu=117;
i8 Charv=118;
i8 Charw=119;
i8 Charx=120;
i8 Chary=121;
i8 Charz=122;
i8 Char0=48;
i8 Char1=49;
i8 Char2=50;
i8 Char3=51;
i8 Char4=52;
i8 Char5=53;
i8 Char6=54;
i8 Char7=55;
i8 Char8=56;
i8 Char9=57;
	#line 29 f0__ //FuncDef
		#line 33 f0__ //FuncDef
	void Load97(str file,Scene& scene){
		Archive archive=Unarchive311(file);
		#line 36 f0__ //Call
		Println127(add130(str{5,(i8*)"Size:"},String132(archive.array.length)));
		for(i64 it = i64343(0); it<archive.array.length;it++){
			Entity entity=CreateEntity260();
			#line 41 f0__ //Call
			Editable316(entity);
			#line 43 f0__ //Call
			Println127(add130(str{7,(i8*)"Entity "},String132(entity.id)));
			#line 45 f0__ //If
			if(true){
				Archive arch=OpArray302(OpArray0817(archive.array,it),str{6,(i8*)"Sprite"});
				#line 47 f0__ //If
				if((arch.Type!=ArchiveNone)){
					Sprite* sprite=Sprite431(entity,(*scene.renderer),OpArray302(arch,str{7,(i8*)"Texture"}).string);
					#line 49 f0__ //BinaryOp
					(*sprite).material.shader = Shader277((*scene.renderer),OpArray302(arch,str{6,(i8*)"Vertex"}).string,OpArray302(arch,str{8,(i8*)"Fragment"}).string);
					#line 50 f0__ //Call
					Load292(OpArray302(arch,str{5,(i8*)"Color"}),(*sprite).color);
					#line 51 f0__ //Call
					Color433((*sprite),(*sprite).color);
				};
			};
			#line 54 f0__ //If
			if(true){
				Archive arch=OpArray302(OpArray0817(archive.array,it),str{9,(i8*)"Transform"});
				#line 56 f0__ //If
				if((arch.Type!=ArchiveNone)){
					Transform* transform=Transform439(entity);
					#line 59 f0__ //Call
					Load293(OpArray302(arch,str{8,(i8*)"Position"}),(*transform).position);
					#line 60 f0__ //Call
					Load293(OpArray302(arch,str{5,(i8*)"Scale"}),(*transform).scale);
					#line 61 f0__ //Call
					Recalculate445((*transform));
				};
			};
		};
}
		#line 73 f0__ //FuncDef
	void Test99(voidptr self,i32 t){
		#line 74 f0__ //Call
		Println127(add130(String132(t),str{16,(i8*)"OOH a func pt32r"}));
}
	#line 78 f0__ //FuncDef
	void Test100(voidptr self,Vec2 t){
		#line 79 f0__ //Call
		Println127(add130(str{18,(i8*)"Resized Callback: "},String206(t)));
}
	#line 82 f0__ //FuncDef
	void Resized101(GLFWwindow* glfwwindow,u32 x,u32 y){
		Window* window=(Window*)glfwGetWindowUserPointer(glfwwindow);
		#line 84 f0__ //BinaryOp
		Size458((*window),Vec2220(f32401(x),f32401(y)));
}
	#line 87 f0__ //FuncDef
	void Mouses102(GLFWwindow* glfwwindow,u32 button,u32 action,u32 mods){
		Window* window=(Window*)glfwGetWindowUserPointer(glfwwindow);
		f64 x={0};
		f64 y={0};
		#line 91 f0__ //Call
		glfwGetCursorPos(glfwwindow,(&x),(&y));
		#line 92 f0__ //BinaryOp
		x = (((x/f64414((*window).size.x))-0.5)*2.0);
		#line 93 f0__ //BinaryOp
		y = ((0.5-(y/f64414((*window).size.y)))*2.0);
		#line 94 f0__ //Call
		Mouse457((*window),Vec2220(f32407(x),f32407(y)),i8361(action));
}
	#line 97 f0__ //FuncDef
	void Moved103(GLFWwindow* glfwwindow,f64 x,f64 y){
		Window* window=(Window*)glfwGetWindowUserPointer(glfwwindow);
		#line 99 f0__ //Call
		glfwGetCursorPos(glfwwindow,(&x),(&y));
		#line 100 f0__ //BinaryOp
		x = (((x/f64414((*window).size.x))-0.5)*2.0);
		#line 101 f0__ //BinaryOp
		y = ((0.5-(y/f64414((*window).size.y)))*2.0);
		#line 102 f0__ //BinaryOp
		(*window).mouse = Vec2220(f32407(x),f32407(y));
}
	#line 105 f0__ //FuncDef
	i32 main(){
		#line 107 f0__ //Call
		glfwInit();
		#line 108 f0__ //Call
		glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR,3);
		#line 109 f0__ //Call
		glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR,3);
		#line 110 f0__ //Call
		glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT,1);
		#line 111 f0__ //Call
		glfwWindowHint(GLFW_OPENGL_PROFILE,GLFW_OPENGL_CORE_PROFILE);
		GLFWwindow* glfwwindow=glfwCreateWindow(800,400,str{3,(i8*)"Min"}.chars,(GLFWmonitor*)0,(GLFWwindow*)0);
		#line 114 f0__ //Call
		glfwMakeContextCurrent(glfwwindow);
		#line 115 f0__ //Call
		glfwSetWindowSizeCallback(glfwwindow,(func)Resized101);
		#line 116 f0__ //Call
		glfwSetMouseButtonCallback(glfwwindow,(func)Mouses102);
		#line 117 f0__ //Call
		glfwSetCursorPosCallback(glfwwindow,(func)Moved103);
		#line 119 f0__ //If
		if((chdir(str{30,(i8*)"/Users/Davie/Desktop/Resources"}.chars)!=0)){
			#line 120 f0__ //Call
			Error129(str{24,(i8*)"Couldnt change directory"});
		};
		#line 123 f0__ //Call
		Init247(world);
		Window window={0};
		#line 126 f0__ //Call
		glfwSetWindowUserPointer(glfwwindow,(voidptr)(&window));
		#line 127 f0__ //BinaryOp
		window.size = Vec2220(800,400);
		Callback1 call={0};
		#line 130 f0__ //BinaryOp
		call.func = (func)Test100;
		#line 131 f0__ //Call
		Push2864(window.resized,call);
		Renderer renderer=Renderer279();
		Camera camera=Camera465();
		Scene theScene={0};
		#line 137 f0__ //BinaryOp
		theScene.window = (&window);
		#line 138 f0__ //BinaryOp
		theScene.renderer = (&renderer);
		#line 139 f0__ //BinaryOp
		theScene.camera = (&camera);
		Texture scene=Texture463(mul234(window.size,2.0));
		Texture occlusion=Texture463(mul234(window.size,2.0));
		ShadingPass pass=ShadingPass273();
		#line 145 f0__ //BinaryOp
		pass.clear = 1;
		#line 146 f0__ //Call
		Push3872(pass.out,(&scene));
		#line 147 f0__ //Call
		Push3872(pass.out,(&occlusion));
		#line 148 f0__ //Call
		Refresh275(pass);
		#line 149 f0__ //Call
		Push4879(renderer.passes,pass);
		#line 151 f0__ //If
		if(true){
			Shader post=Shader277(renderer,str{22,(i8*)"Shaders/PostProcess.vs"},str{14,(i8*)"Shaders/Red.fs"});
			Sprite sprite=Sprite432(renderer,str{21,(i8*)"images/GrassSmall.png"});
			#line 155 f0__ //BinaryOp
			sprite.material.texture = scene;
			#line 156 f0__ //BinaryOp
			sprite.material.shader = post;
			ShadingPass pass=PostProcess274(sprite);
			#line 159 f0__ //BinaryOp
			pass.clear = 1;
			#line 160 f0__ //Call
			Refresh275(pass);
			#line 161 f0__ //Call
			Push4879(renderer.passes,pass);
		};
		#line 163 f0__ //If
		if(true){
			Shader post=Shader277(renderer,str{22,(i8*)"shaders/PostProcess.vs"},str{19,(i8*)"shaders/Lighting.fs"});
			Sprite sprite=Sprite432(renderer,str{21,(i8*)"images/GrassSmall.png"});
			#line 167 f0__ //BinaryOp
			sprite.material.texture = occlusion;
			#line 168 f0__ //BinaryOp
			sprite.material.shader = post;
			ShadingPass pass=PostProcess274(sprite);
			#line 171 f0__ //Call
			Push3872(pass.in,(&scene));
			#line 172 f0__ //Call
			Push3872(pass.in,(&occlusion));
			#line 174 f0__ //Call
			Refresh275(pass);
			#line 175 f0__ //Call
			Push4879(renderer.passes,pass);
		};
		#line 178 f0__ //Call
		Load97(str{4,(i8*)"data"},theScene);
		Entity entity=CreateEntity260();
		Transform* transform=Transform439(entity);
		#line 186 f0__ //BinaryOp
		Position443((*transform),Vec3216(1,4,0));
		#line 187 f0__ //BinaryOp
		Scale441((*transform),Vec3217(.015));
		Mesh* mesh=Mesh435(entity,renderer);
		#line 190 f0__ //BinaryOp
		(*mesh).material.shader = Shader277(renderer,str{19,(i8*)"shaders/Position.vs"},str{17,(i8*)"shaders/Shader.fs"});
		Spine spine=Spine329(renderer,mesh,str{14,(i8*)"Character.json"},str{15,(i8*)"Character.atlas"});
		#line 193 f0__ //Call
		glBlendFunc(GL_ONE,GL_ONE_MINUS_SRC_ALPHA);
		#line 194 f0__ //Call
		glBlendFuncSeparatei(1,GL_ONE,GL_ONE,GL_ONE,GL_ONE_MINUS_SRC_ALPHA);
		#line 195 f0__ //Call
		glEnable(GL_BLEND);
		Editor editor=Editor314((&world),(&camera));
		#line 198 f0__ //Call
		AddEditables321(editor,world,renderer,window);
		while((!glfwWindowShouldClose(glfwwindow))){
			#line 202 f0__ //Call
			glClear(GL_COLOR_BUFFER_BIT);
			#line 203 f0__ //Call
			glClearColor(0,0,0,0);
			#line 205 f0__ //BinaryOp
			(*theScene.camera).projection = Perspective467((*theScene.camera).fieldOfView,((*theScene.window).size.x/(*theScene.window).size.y),(*theScene.camera).near,(*theScene.camera).far);
			#line 206 f0__ //BinaryOp
			(*theScene.camera).viewProjection = mul212((*theScene.camera).projection,(*theScene.camera).view);
			#line 208 f0__ //Call
			Update320(editor,window.mouse);
			#line 209 f0__ //Call
			Update330(spine,0.166);
			#line 210 f0__ //Call
			Render289(renderer,world,camera,window);
			#line 212 f0__ //Call
			glfwSwapBuffers(glfwwindow);
			#line 213 f0__ //Call
			glfwPollEvents();
		};
		#line 216 f0__ //Return
		return 5;
}
			#line 15 f1__ //FuncDef
	void Init0815(Array9& array,i64 length){
		#line 16 f1__ //BinaryOp
		array.elements = Alloc0812(length);
		#line 17 f1__ //BinaryOp
		array.length = length;
}
void Init0809(Array1& array,i64 length){
		#line 16 f1__ //BinaryOp
		array.elements = Alloc0810(length);
		#line 17 f1__ //BinaryOp
		array.length = length;
}
void Init2820(Array2& array,i64 length){
		#line 16 f1__ //BinaryOp
		array.elements = Alloc2821(length);
		#line 17 f1__ //BinaryOp
		array.length = length;
}
void Init3822(Array3& array,i64 length){
		#line 16 f1__ //BinaryOp
		array.elements = Alloc3823(length);
		#line 17 f1__ //BinaryOp
		array.length = length;
}
void Init4824(Array4& array,i64 length){
		#line 16 f1__ //BinaryOp
		array.elements = Alloc4825(length);
		#line 17 f1__ //BinaryOp
		array.length = length;
}
void Init5826(Array5& array,i64 length){
		#line 16 f1__ //BinaryOp
		array.elements = Alloc5827(length);
		#line 17 f1__ //BinaryOp
		array.length = length;
}
void Init6828(Array8& array,i64 length){
		#line 16 f1__ //BinaryOp
		array.elements = Alloc6829(length);
		#line 17 f1__ //BinaryOp
		array.length = length;
}
void Init7875(Array11& array,i64 length){
		#line 16 f1__ //BinaryOp
		array.elements = Alloc11876(length);
		#line 17 f1__ //BinaryOp
		array.length = length;
}
void Init8884(Array12& array,i64 length){
		#line 16 f1__ //BinaryOp
		array.elements = Alloc12885(length);
		#line 17 f1__ //BinaryOp
		array.length = length;
}
void Init9886(Array6& array,i64 length){
		#line 16 f1__ //BinaryOp
		array.elements = Alloc13887(length);
		#line 17 f1__ //BinaryOp
		array.length = length;
}
void Init10888(Array7& array,i64 length){
		#line 16 f1__ //BinaryOp
		array.elements = Alloc8841(length);
		#line 17 f1__ //BinaryOp
		array.length = length;
}
	#line 20 f1__ //FuncDef
	i8& OpArray0816(Array9& array,i64 index){
		if((index>=array.length)){
			#line 22 f1__ //Call
			Assert338(0,add130(add130(add130(add130(str{28,(i8*)"Array access out of bounds ["},String132(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String132(array.length)));
		};
		return (*(array.elements+index));
}
i64& OpArray1835(Array1& array,i64 index){
		if((index>=array.length)){
			#line 22 f1__ //Call
			Assert338(0,add130(add130(add130(add130(str{28,(i8*)"Array access out of bounds ["},String132(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String132(array.length)));
		};
		return (*(array.elements+index));
}
Editable& OpArray2837(Array5& array,i64 index){
		if((index>=array.length)){
			#line 22 f1__ //Call
			Assert338(0,add130(add130(add130(add130(str{28,(i8*)"Array access out of bounds ["},String132(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String132(array.length)));
		};
		return (*(array.elements+index));
}
Sprite& OpArray3839(Array4& array,i64 index){
		if((index>=array.length)){
			#line 22 f1__ //Call
			Assert338(0,add130(add130(add130(add130(str{28,(i8*)"Array access out of bounds ["},String132(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String132(array.length)));
		};
		return (*(array.elements+index));
}
u8& OpArray4843(Array10& array,i64 index){
		if((index>=array.length)){
			#line 22 f1__ //Call
			Assert338(0,add130(add130(add130(add130(str{28,(i8*)"Array access out of bounds ["},String132(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String132(array.length)));
		};
		return (*(array.elements+index));
}
u16& OpArray5850(Array7& array,i64 index){
		if((index>=array.length)){
			#line 22 f1__ //Call
			Assert338(0,add130(add130(add130(add130(str{28,(i8*)"Array access out of bounds ["},String132(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String132(array.length)));
		};
		return (*(array.elements+index));
}
Transform& OpArray6858(Array3& array,i64 index){
		if((index>=array.length)){
			#line 22 f1__ //Call
			Assert338(0,add130(add130(add130(add130(str{28,(i8*)"Array access out of bounds ["},String132(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String132(array.length)));
		};
		return (*(array.elements+index));
}
u32& OpArray7878(Array11& array,i64 index){
		if((index>=array.length)){
			#line 22 f1__ //Call
			Assert338(0,add130(add130(add130(add130(str{28,(i8*)"Array access out of bounds ["},String132(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String132(array.length)));
		};
		return (*(array.elements+index));
}
Mesh& OpArray8882(Array8& array,i64 index){
		if((index>=array.length)){
			#line 22 f1__ //Call
			Assert338(0,add130(add130(add130(add130(str{28,(i8*)"Array access out of bounds ["},String132(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String132(array.length)));
		};
		return (*(array.elements+index));
}
PositionTextureColorColor& OpArray9891(Array6& array,i64 index){
		if((index>=array.length)){
			#line 22 f1__ //Call
			Assert338(0,add130(add130(add130(add130(str{28,(i8*)"Array access out of bounds ["},String132(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String132(array.length)));
		};
		return (*(array.elements+index));
}
f32& OpArray10897(Array12& array,i64 index){
		if((index>=array.length)){
			#line 22 f1__ //Call
			Assert338(0,add130(add130(add130(add130(str{28,(i8*)"Array access out of bounds ["},String132(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String132(array.length)));
		};
		return (*(array.elements+index));
}
	#line 28 f1__ //FuncDef
	Archive& OpArray0817(DynamicArray8& array,i64 index){
		if((index>=array.length)){
			#line 30 f1__ //Call
			Assert338(0,add130(add130(add130(add130(str{28,(i8*)"Array access out of bounds ["},String132(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String132(array.length)));
		};
		return (*(array.elements+index));
}
Archive& OpArray0811(DynamicArray8& array,i64 index){
		if((index>=array.length)){
			#line 30 f1__ //Call
			Assert338(0,add130(add130(add130(add130(str{28,(i8*)"Array access out of bounds ["},String132(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String132(array.length)));
		};
		return (*(array.elements+index));
}
TableNode2& OpArray2847(DynamicArray5& array,i64 index){
		if((index>=array.length)){
			#line 30 f1__ //Call
			Assert338(0,add130(add130(add130(add130(str{28,(i8*)"Array access out of bounds ["},String132(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String132(array.length)));
		};
		return (*(array.elements+index));
}
TableNode1& OpArray3854(DynamicArray4& array,i64 index){
		if((index>=array.length)){
			#line 30 f1__ //Call
			Assert338(0,add130(add130(add130(add130(str{28,(i8*)"Array access out of bounds ["},String132(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String132(array.length)));
		};
		return (*(array.elements+index));
}
Transform*& OpArray4860(DynamicArray9& array,i64 index){
		if((index>=array.length)){
			#line 30 f1__ //Call
			Assert338(0,add130(add130(add130(add130(str{28,(i8*)"Array access out of bounds ["},String132(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String132(array.length)));
		};
		return (*(array.elements+index));
}
Callback1& OpArray5861(DynamicArray6& array,i64 index){
		if((index>=array.length)){
			#line 30 f1__ //Call
			Assert338(0,add130(add130(add130(add130(str{28,(i8*)"Array access out of bounds ["},String132(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String132(array.length)));
		};
		return (*(array.elements+index));
}
MouseCallback& OpArray6863(DynamicArray7& array,i64 index){
		if((index>=array.length)){
			#line 30 f1__ //Call
			Assert338(0,add130(add130(add130(add130(str{28,(i8*)"Array access out of bounds ["},String132(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String132(array.length)));
		};
		return (*(array.elements+index));
}
Texture*& OpArray7877(DynamicArray2& array,i64 index){
		if((index>=array.length)){
			#line 30 f1__ //Call
			Assert338(0,add130(add130(add130(add130(str{28,(i8*)"Array access out of bounds ["},String132(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String132(array.length)));
		};
		return (*(array.elements+index));
}
ShadingPass& OpArray8900(DynamicArray3& array,i64 index){
		if((index>=array.length)){
			#line 30 f1__ //Call
			Assert338(0,add130(add130(add130(add130(str{28,(i8*)"Array access out of bounds ["},String132(index)),str{1,(i8*)"]"}),str{11,(i8*)" length is "}),String132(array.length)));
		};
		return (*(array.elements+index));
}
	#line 35 f1__ //FuncDef
	void Init0830(DynamicArray8& array){
		#line 37 f1__ //BinaryOp
		array.capacity = 0;
		#line 38 f1__ //BinaryOp
		array.length = 0;
		#line 39 f1__ //BinaryOp
		array.elements = (Archive*)0;
}
void Init1832(DynamicArray10& array){
		#line 37 f1__ //BinaryOp
		array.capacity = 0;
		#line 38 f1__ //BinaryOp
		array.length = 0;
		#line 39 f1__ //BinaryOp
		array.elements = (i8*)0;
}
void Init2866(DynamicArray3& array){
		#line 37 f1__ //BinaryOp
		array.capacity = 0;
		#line 38 f1__ //BinaryOp
		array.length = 0;
		#line 39 f1__ //BinaryOp
		array.elements = (ShadingPass*)0;
}
void Init3868(DynamicArray4& array){
		#line 37 f1__ //BinaryOp
		array.capacity = 0;
		#line 38 f1__ //BinaryOp
		array.length = 0;
		#line 39 f1__ //BinaryOp
		array.elements = (TableNode1*)0;
}
void Init4870(DynamicArray5& array){
		#line 37 f1__ //BinaryOp
		array.capacity = 0;
		#line 38 f1__ //BinaryOp
		array.length = 0;
		#line 39 f1__ //BinaryOp
		array.elements = (TableNode2*)0;
}
void Init5871(DynamicArray2& array){
		#line 37 f1__ //BinaryOp
		array.capacity = 0;
		#line 38 f1__ //BinaryOp
		array.length = 0;
		#line 39 f1__ //BinaryOp
		array.elements = (Texture**)0;
}
	#line 42 f1__ //FuncDef
	void Push0818(DynamicArray8& array,Archive value){
		if((array.capacity<(array.length+1))){
			i64 capacity=(array.capacity*2);
			if((capacity<10)){
				#line 48 f1__ //Call
				Reserve0819(array,10);
			}else{
				#line 51 f1__ //Call
				Reserve0819(array,capacity);
			};
		};
		#line 54 f1__ //BinaryOp
		(*(array.elements+array.length)) = value;
		#line 55 f1__ //BinaryOp
		array.length = (array.length+1);
}
void Push1833(DynamicArray10& array,i8 value){
		if((array.capacity<(array.length+1))){
			i64 capacity=(array.capacity*2);
			if((capacity<10)){
				#line 48 f1__ //Call
				Reserve1834(array,10);
			}else{
				#line 51 f1__ //Call
				Reserve1834(array,capacity);
			};
		};
		#line 54 f1__ //BinaryOp
		(*(array.elements+array.length)) = value;
		#line 55 f1__ //BinaryOp
		array.length = (array.length+1);
}
void Push2864(DynamicArray6& array,Callback1 value){
		if((array.capacity<(array.length+1))){
			i64 capacity=(array.capacity*2);
			if((capacity<10)){
				#line 48 f1__ //Call
				Reserve2865(array,10);
			}else{
				#line 51 f1__ //Call
				Reserve2865(array,capacity);
			};
		};
		#line 54 f1__ //BinaryOp
		(*(array.elements+array.length)) = value;
		#line 55 f1__ //BinaryOp
		array.length = (array.length+1);
}
void Push3872(DynamicArray2& array,Texture* value){
		if((array.capacity<(array.length+1))){
			i64 capacity=(array.capacity*2);
			if((capacity<10)){
				#line 48 f1__ //Call
				Reserve3873(array,10);
			}else{
				#line 51 f1__ //Call
				Reserve3873(array,capacity);
			};
		};
		#line 54 f1__ //BinaryOp
		(*(array.elements+array.length)) = value;
		#line 55 f1__ //BinaryOp
		array.length = (array.length+1);
}
void Push4879(DynamicArray3& array,ShadingPass value){
		if((array.capacity<(array.length+1))){
			i64 capacity=(array.capacity*2);
			if((capacity<10)){
				#line 48 f1__ //Call
				Reserve4880(array,10);
			}else{
				#line 51 f1__ //Call
				Reserve4880(array,capacity);
			};
		};
		#line 54 f1__ //BinaryOp
		(*(array.elements+array.length)) = value;
		#line 55 f1__ //BinaryOp
		array.length = (array.length+1);
}
void Push5893(DynamicArray7& array,MouseCallback value){
		if((array.capacity<(array.length+1))){
			i64 capacity=(array.capacity*2);
			if((capacity<10)){
				#line 48 f1__ //Call
				Reserve5894(array,10);
			}else{
				#line 51 f1__ //Call
				Reserve5894(array,capacity);
			};
		};
		#line 54 f1__ //BinaryOp
		(*(array.elements+array.length)) = value;
		#line 55 f1__ //BinaryOp
		array.length = (array.length+1);
}
void Push6895(DynamicArray9& array,Transform* value){
		if((array.capacity<(array.length+1))){
			i64 capacity=(array.capacity*2);
			if((capacity<10)){
				#line 48 f1__ //Call
				Reserve6896(array,10);
			}else{
				#line 51 f1__ //Call
				Reserve6896(array,capacity);
			};
		};
		#line 54 f1__ //BinaryOp
		(*(array.elements+array.length)) = value;
		#line 55 f1__ //BinaryOp
		array.length = (array.length+1);
}
	#line 58 f1__ //FuncDef
	void Reserve0819(DynamicArray8& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64345(typeinfo2.size)*size);
			#line 63 f1__ //BinaryOp
			array.elements = (Archive*)realloc((voidptr)array.elements,u64397(bytes));
			#line 64 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64397((i64345(typeinfo2.size)*(size-array.capacity))));
			#line 65 f1__ //BinaryOp
			array.capacity = size;
		};
}
void Reserve1834(DynamicArray10& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64345(typeinfo1.size)*size);
			#line 63 f1__ //BinaryOp
			array.elements = (i8*)realloc((voidptr)array.elements,u64397(bytes));
			#line 64 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64397((i64345(typeinfo1.size)*(size-array.capacity))));
			#line 65 f1__ //BinaryOp
			array.capacity = size;
		};
}
void Reserve2865(DynamicArray6& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64345(typeinfo15.size)*size);
			#line 63 f1__ //BinaryOp
			array.elements = (Callback1*)realloc((voidptr)array.elements,u64397(bytes));
			#line 64 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64397((i64345(typeinfo15.size)*(size-array.capacity))));
			#line 65 f1__ //BinaryOp
			array.capacity = size;
		};
}
void Reserve3873(DynamicArray2& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64345(typeinfo16.size)*size);
			#line 63 f1__ //BinaryOp
			array.elements = (Texture**)realloc((voidptr)array.elements,u64397(bytes));
			#line 64 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64397((i64345(typeinfo16.size)*(size-array.capacity))));
			#line 65 f1__ //BinaryOp
			array.capacity = size;
		};
}
void Reserve4880(DynamicArray3& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64345(typeinfo18.size)*size);
			#line 63 f1__ //BinaryOp
			array.elements = (ShadingPass*)realloc((voidptr)array.elements,u64397(bytes));
			#line 64 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64397((i64345(typeinfo18.size)*(size-array.capacity))));
			#line 65 f1__ //BinaryOp
			array.capacity = size;
		};
}
void Reserve5894(DynamicArray7& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64345(typeinfo20.size)*size);
			#line 63 f1__ //BinaryOp
			array.elements = (MouseCallback*)realloc((voidptr)array.elements,u64397(bytes));
			#line 64 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64397((i64345(typeinfo20.size)*(size-array.capacity))));
			#line 65 f1__ //BinaryOp
			array.capacity = size;
		};
}
void Reserve6896(DynamicArray9& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64345(typeinfo21.size)*size);
			#line 63 f1__ //BinaryOp
			array.elements = (Transform**)realloc((voidptr)array.elements,u64397(bytes));
			#line 64 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64397((i64345(typeinfo21.size)*(size-array.capacity))));
			#line 65 f1__ //BinaryOp
			array.capacity = size;
		};
}
	#line 69 f1__ //FuncDef
	void Resize0846(DynamicArray5& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64345(typeinfo10.size)*size);
			#line 74 f1__ //BinaryOp
			array.elements = (TableNode2*)realloc((voidptr)array.elements,u64397(bytes));
			#line 75 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64397((i64345(typeinfo10.size)*(size-array.capacity))));
			#line 76 f1__ //BinaryOp
			array.capacity = size;
		};
		#line 78 f1__ //BinaryOp
		array.length = size;
}
void Resize1853(DynamicArray4& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64345(typeinfo13.size)*size);
			#line 74 f1__ //BinaryOp
			array.elements = (TableNode1*)realloc((voidptr)array.elements,u64397(bytes));
			#line 75 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64397((i64345(typeinfo13.size)*(size-array.capacity))));
			#line 76 f1__ //BinaryOp
			array.capacity = size;
		};
		#line 78 f1__ //BinaryOp
		array.length = size;
}
void Resize2905(DynamicArray8& array,i64 size){
		if((array.capacity<size)){
			i64 bytes=(i64345(typeinfo2.size)*size);
			#line 74 f1__ //BinaryOp
			array.elements = (Archive*)realloc((voidptr)array.elements,u64397(bytes));
			#line 75 f1__ //Call
			memset((voidptr)(array.elements+array.capacity),0,u64397((i64345(typeinfo2.size)*(size-array.capacity))));
			#line 76 f1__ //BinaryOp
			array.capacity = size;
		};
		#line 78 f1__ //BinaryOp
		array.length = size;
}
	#line 81 f1__ //FuncDef
		#line 86 f1__ //FuncDef
				#line 116 f1__ //FuncDef
	void Init0867(Table1& table){
		#line 118 f1__ //BinaryOp
		table.length = 0;
		#line 119 f1__ //BinaryOp
		table.capacity = 16;
		#line 121 f1__ //Call
		Init3868(table.data);
		#line 122 f1__ //Call
		Resize1853(table.data,16);
}
void Init1869(Table2& table){
		#line 118 f1__ //BinaryOp
		table.length = 0;
		#line 119 f1__ //BinaryOp
		table.capacity = 16;
		#line 121 f1__ //Call
		Init4870(table.data);
		#line 122 f1__ //Call
		Resize0846(table.data,16);
}
	#line 125 f1__ //FuncDef
	void Resize0845(Table2& table){
		DynamicArray5 data={0};
		#line 128 f1__ //Call
		Resize0846(data,(table.capacity*2));
		for(i64 it = i64343(0); it<table.data.length;it++){
			i64 index=(OpArray2847(table.data,it).hash%data.length);
			#line 133 f1__ //BinaryOp
			OpArray2847(data,index) = OpArray2847(table.data,it);
		};
		#line 136 f1__ //BinaryOp
		table.data = data;
}
void Resize1852(Table1& table){
		DynamicArray4 data={0};
		#line 128 f1__ //Call
		Resize1853(data,(table.capacity*2));
		for(i64 it = i64343(0); it<table.data.length;it++){
			i64 index=(OpArray3854(table.data,it).hash%data.length);
			#line 133 f1__ //BinaryOp
			OpArray3854(data,index) = OpArray3854(table.data,it);
		};
		#line 136 f1__ //BinaryOp
		table.data = data;
}
	#line 140 f1__ //FuncDef
	Texture*& OpArray0844(Table2& table,str key){
		if(((table.length+(table.length/2))>table.capacity)){
			#line 144 f1__ //Call
			Resize0845(table);
		};
		i64 length=table.capacity;
		i64 hash=Hash135(key);
		i64 at=((hash%(length-1))+1);
		while(1){
			if((OpArray2847(table.data,at).hash==0)){
				#line 153 f1__ //BinaryOp
				OpArray2847(table.data,at).key = key;
				#line 154 f1__ //BinaryOp
				OpArray2847(table.data,at).hash = 1;
				return OpArray2847(table.data,at).value;
			}else{
				if(Equal134(key,OpArray2847(table.data,at).key)){
					return OpArray2847(table.data,at).value;
				};
				#line 162 f1__ //BinaryOp
				at = (at+1);
			};
		};
}
Shader*& OpArray1851(Table1& table,str key){
		if(((table.length+(table.length/2))>table.capacity)){
			#line 144 f1__ //Call
			Resize1852(table);
		};
		i64 length=table.capacity;
		i64 hash=Hash135(key);
		i64 at=((hash%(length-1))+1);
		while(1){
			if((OpArray3854(table.data,at).hash==0)){
				#line 153 f1__ //BinaryOp
				OpArray3854(table.data,at).key = key;
				#line 154 f1__ //BinaryOp
				OpArray3854(table.data,at).hash = 1;
				return OpArray3854(table.data,at).value;
			}else{
				if(Equal134(key,OpArray3854(table.data,at).key)){
					return OpArray3854(table.data,at).value;
				};
				#line 162 f1__ //BinaryOp
				at = (at+1);
			};
		};
}
	#line 13 f2__ //FuncDef
		#line 14 f2__ //FuncDef
		#line 15 f2__ //FuncDef
		#line 16 f2__ //FuncDef
		;
	;
		#line 28 f2__ //FuncDef
	void Print126(str string){
		for(i64 it = (i64)0; it<string.length;it++){
			#line 30 f2__ //Call
			putchar((i32)(*(string.chars+it)));
		};
		#line 32 f2__ //Call
		FileFlush(FileOut());
}
	#line 35 f2__ //FuncDef
	void Println127(str string){
		#line 36 f2__ //Call
		Print126(add130(string,str{1,(i8*)"\n"}));
}
	#line 39 f2__ //FuncDef
	str String128(i8* string){
		str out={0};
		#line 41 f2__ //BinaryOp
		out.length = strlen(string);
		#line 42 f2__ //BinaryOp
		out.chars = Alloc0812((out.length+1));
		#line 43 f2__ //Call
		strcpy(out.chars,string);
		#line 44 f2__ //Return
		return out;
}
	#line 47 f2__ //FuncDef
	void Error129(str string){
		#line 49 f2__ //Call
		Print126(add130(add130(str{6,(i8*)"\33[31m"},string),str{1,(i8*)"\n"}));
		#line 50 f2__ //Call
		Print126(str{5,(i8*)"\33[0m"});
}
	#line 54 f2__ //FuncDef
	str add130(str a,str b){
		str v={0};
		#line 57 f2__ //BinaryOp
		v.chars = Alloc0812(((a.length+b.length)+1));
		#line 58 f2__ //Call
		CopyPtr0813(a.chars,v.chars,a.length);
		#line 59 f2__ //Call
		CopyPtr0813(b.chars,(v.chars+a.length),b.length);
		#line 61 f2__ //BinaryOp
		v.length = (a.length+b.length);
		#line 62 f2__ //BinaryOp
		(*(v.chars+v.length)) = 0;
		#line 63 f2__ //Return
		return v;
}
	#line 66 f2__ //FuncDef
	str String131(i8* chars,i64 length){
		str string={0};
		#line 69 f2__ //BinaryOp
		string.chars = chars;
		#line 70 f2__ //BinaryOp
		string.length = length;
		#line 71 f2__ //Return
		return string;
}
	#line 74 f2__ //FuncDef
	str String132(i64 number){
		#line 76 f2__ //If
		if((number==0)){
			#line 77 f2__ //Return
			return str{1,(i8*)"0"};
		};
		i8 negative=0;
		#line 81 f2__ //If
		if((number<0)){
			#line 82 f2__ //BinaryOp
			negative = 1;
			#line 83 f2__ //BinaryOp
			number = (0-number);
		};
		i64 n=number;
		i64 count=0;
		while(n){
			#line 89 f2__ //BinaryOp
			n = (n/10);
			#line 90 f2__ //BinaryOp
			count = (count+1);
		};
		Array9 characters={0};
		#line 94 f2__ //Call
		Init0815(characters,(count+1));
		i64 i={0};
		while(number){
			#line 98 f2__ //BinaryOp
			OpArray0816(characters,((count-i)-1)) = i8365(((number%10)+48));
			#line 99 f2__ //BinaryOp
			number = (number/10);
			#line 100 f2__ //BinaryOp
			i = (i+1);
		};
		#line 103 f2__ //BinaryOp
		OpArray0816(characters,count) = 0;
		str r={0};
		#line 105 f2__ //BinaryOp
		r.length = count;
		#line 106 f2__ //BinaryOp
		r.chars = characters.elements;
		#line 108 f2__ //If
		if(negative){
			#line 109 f2__ //Return
			return add130(str{1,(i8*)"-"},r);
		};
		#line 111 f2__ //Return
		return r;
}
	#line 114 f2__ //FuncDef
	str String133(f32 number){
		i64 top=i64350(number);
		f32 fnumber=number;
		#line 118 f2__ //If
		if((top<0)){
			#line 119 f2__ //BinaryOp
			fnumber = (0.0-fnumber);
		};
		i64 bottom=i64350(((fnumber-f32405(i64350(fnumber)))*1000));
		str r=String132(top);
		#line 124 f2__ //If
		if(bottom){
			#line 125 f2__ //BinaryOp
			r = add130(add130(r,str{1,(i8*)"."}),String132(bottom));
		};
		#line 127 f2__ //Return
		return r;
}
	#line 130 f2__ //FuncDef
	i64 Equal134(str l,str r){
		#line 132 f2__ //If
		if((l.length!=r.length)){
			#line 134 f2__ //Return
			return 0;
		};
		for(i64 it = i64343(0); it<l.length;it++){
			i8 ll=(*(l.chars+it));
			i8 rr=(*(r.chars+it));
			#line 141 f2__ //If
			if((i64347(ll)!=i64347(rr))){
				#line 143 f2__ //Return
				return 0;
			};
		};
		#line 146 f2__ //Return
		return 1;
}
	#line 149 f2__ //FuncDef
	i64 Hash135(str string){
		i64 hash=5381;
		for(i64 it = i64343(0); it<string.length;it++){
			#line 154 f2__ //BinaryOp
			hash = (((hash+5)+hash)+i64347((*(string.chars+it))));
		};
		#line 156 f2__ //Return
		return hash;
}
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
							#line 252 f3__ //FuncDef
		#line 269 f3__ //FuncDef
		#line 270 f3__ //FuncDef
		#line 272 f3__ //FuncDef
		#line 293 f3__ //FuncDef
		#line 294 f3__ //FuncDef
		#line 296 f3__ //FuncDef
		#line 302 f3__ //FuncDef
		#line 311 f3__ //FuncDef
		#line 320 f3__ //FuncDef
		#line 321 f3__ //FuncDef
		#line 336 f3__ //FuncDef
		#line 338 f3__ //FuncDef
		;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	#line 939 f4__ //FuncDef
		#line 942 f4__ //FuncDef
		#line 944 f4__ //FuncDef
		#line 945 f4__ //FuncDef
		#line 952 f4__ //FuncDef
		#line 955 f4__ //FuncDef
		#line 966 f4__ //FuncDef
		#line 977 f4__ //FuncDef
		#line 979 f4__ //FuncDef
		#line 987 f4__ //FuncDef
		#line 989 f4__ //FuncDef
		#line 997 f4__ //FuncDef
		#line 1021 f4__ //FuncDef
		#line 1023 f4__ //FuncDef
		#line 1025 f4__ //FuncDef
		#line 1029 f4__ //FuncDef
		#line 1033 f4__ //FuncDef
		#line 1037 f4__ //FuncDef
		#line 1039 f4__ //FuncDef
		#line 1040 f4__ //FuncDef
		#line 1041 f4__ //FuncDef
		#line 1042 f4__ //FuncDef
		#line 1043 f4__ //FuncDef
		#line 1046 f4__ //FuncDef
		#line 1048 f4__ //FuncDef
		#line 1051 f4__ //FuncDef
		#line 1053 f4__ //FuncDef
		#line 1054 f4__ //FuncDef
		#line 1056 f4__ //FuncDef
		#line 1065 f4__ //FuncDef
		#line 1066 f4__ //FuncDef
		#line 1067 f4__ //FuncDef
		#line 1124 f4__ //FuncDef
		#line 1140 f4__ //FuncDef
		#line 1209 f4__ //FuncDef
		#line 1211 f4__ //FuncDef
		#line 1212 f4__ //FuncDef
		#line 1214 f4__ //FuncDef
		#line 1222 f4__ //FuncDef
		#line 1224 f4__ //FuncDef
		#line 1226 f4__ //FuncDef
		#line 1231 f4__ //FuncDef
		#line 1234 f4__ //FuncDef
		#line 1336 f4__ //FuncDef
		#line 1408 f4__ //FuncDef
						#line 28 f5__ //FuncDef
	str String204(Vec4 v){
		#line 30 f5__ //Return
		return add130(add130(add130(add130(add130(add130(add130(add130(str{1,(i8*)"("},String133(v.x)),str{1,(i8*)","}),String133(v.y)),str{1,(i8*)","}),String133(v.z)),str{1,(i8*)","}),String133(v.w)),str{1,(i8*)")"});
}
	#line 32 f5__ //FuncDef
	str String205(Vec3 v){
		#line 34 f5__ //Return
		return add130(add130(add130(add130(add130(add130(str{1,(i8*)"("},String133(v.x)),str{1,(i8*)","}),String133(v.y)),str{1,(i8*)","}),String133(v.z)),str{1,(i8*)")"});
}
	#line 36 f5__ //FuncDef
	str String206(Vec2 v){
		#line 38 f5__ //Return
		return add130(add130(add130(add130(str{1,(i8*)"("},String133(v.x)),str{1,(i8*)","}),String133(v.y)),str{1,(i8*)")"});
}
	#line 41 f5__ //FuncDef
	Vec4& OpArray207(Mat4& matrix,i64 index){
		#line 42 f5__ //Return
		return (*((Vec4*)(&matrix)+index));
}
	#line 45 f5__ //FuncDef
	f32& OpArray208(Vec4& v,i64 index){
		#line 46 f5__ //Return
		return (*((f32*)(&v)+index));
}
	#line 49 f5__ //FuncDef
	Mat4 Mat4209(f32 v){
		Mat4 r={0};
		#line 51 f5__ //BinaryOp
		r.x = Vec4213(v,0,0,0);
		#line 52 f5__ //BinaryOp
		r.y = Vec4213(0,v,0,0);
		#line 53 f5__ //BinaryOp
		r.z = Vec4213(0,0,v,0);
		#line 54 f5__ //BinaryOp
		r.w = Vec4213(0,0,0,1);
		#line 55 f5__ //Return
		return r;
}
	#line 58 f5__ //FuncDef
	Mat4 Mat4Scale210(Vec3 scale){
		Mat4 r={0};
		#line 60 f5__ //BinaryOp
		r.x = Vec4213(scale.x,0,0,0);
		#line 61 f5__ //BinaryOp
		r.y = Vec4213(0,scale.y,0,0);
		#line 62 f5__ //BinaryOp
		r.z = Vec4213(0,0,scale.z,0);
		#line 63 f5__ //BinaryOp
		r.w = Vec4213(0,0,0,1);
		#line 64 f5__ //Return
		return r;
}
	#line 67 f5__ //FuncDef
	Mat4 Mat4Transform211(Vec3 v){
		Mat4 r={0};
		#line 69 f5__ //BinaryOp
		r.x = Vec4213(1,0,0,0);
		#line 70 f5__ //BinaryOp
		r.y = Vec4213(0,1,0,0);
		#line 71 f5__ //BinaryOp
		r.z = Vec4213(0,0,1,0);
		#line 72 f5__ //BinaryOp
		r.w = Vec4213(v.x,v.y,v.z,1);
		#line 73 f5__ //Return
		return r;
}
	#line 76 f5__ //FuncDef
	Mat4 mul212(Mat4 lhs,Mat4 rhs){
		Mat4 v={0};
		i64 r={0};
		while((r<4)){
			i64 c={0};
			while((c<4)){
				i64 k={0};
				#line 85 f5__ //BinaryOp
				OpArray208(OpArray207(v,c),r) = 0;
				while((k<4)){
					#line 88 f5__ //BinaryOp
					OpArray208(OpArray207(v,c),r) = (OpArray208(OpArray207(v,c),r)+(OpArray208(OpArray207(lhs,k),r)*OpArray208(OpArray207(rhs,c),k)));
					#line 89 f5__ //BinaryOp
					k = (k+1);
				};
				#line 91 f5__ //BinaryOp
				c = (c+1);
			};
			#line 93 f5__ //BinaryOp
			r = (r+1);
		};
		#line 95 f5__ //Return
		return v;
}
	#line 98 f5__ //FuncDef
	Vec4 Vec4213(f32 x,f32 y,f32 z,f32 w){
		Vec4 v={0};
		#line 100 f5__ //BinaryOp
		v.x = x;
		#line 101 f5__ //BinaryOp
		v.y = y;
		#line 102 f5__ //BinaryOp
		v.z = z;
		#line 103 f5__ //BinaryOp
		v.w = w;
		#line 104 f5__ //Return
		return v;
}
	#line 106 f5__ //FuncDef
	Vec4 Vec4214(Vec3 v,f32 w){
		Vec4 r={0};
		#line 108 f5__ //BinaryOp
		r.x = v.x;
		#line 109 f5__ //BinaryOp
		r.y = v.y;
		#line 110 f5__ //BinaryOp
		r.z = v.z;
		#line 111 f5__ //BinaryOp
		r.w = w;
		#line 112 f5__ //Return
		return r;
}
	#line 114 f5__ //FuncDef
	Vec4 Vec4215(f32 v){
		#line 115 f5__ //Return
		return Vec4213(v,v,v,v);
}
	#line 117 f5__ //FuncDef
	Vec3 Vec3216(f32 x,f32 y,f32 z){
		Vec3 v={0};
		#line 119 f5__ //BinaryOp
		v.x = x;
		#line 120 f5__ //BinaryOp
		v.y = y;
		#line 121 f5__ //BinaryOp
		v.z = z;
		#line 122 f5__ //Return
		return v;
}
	#line 125 f5__ //FuncDef
	Vec3 Vec3217(f32 value){
		Vec3 v={0};
		#line 127 f5__ //BinaryOp
		v.x = value;
		#line 128 f5__ //BinaryOp
		v.y = value;
		#line 129 f5__ //BinaryOp
		v.z = value;
		#line 130 f5__ //Return
		return v;
}
	#line 133 f5__ //FuncDef
	Vec3 Vec3218(Vec2 v){
		Vec3 r={0};
		#line 135 f5__ //BinaryOp
		r.x = v.x;
		#line 136 f5__ //BinaryOp
		r.y = v.y;
		#line 137 f5__ //BinaryOp
		r.z = 0;
		#line 138 f5__ //Return
		return r;
}
	#line 141 f5__ //FuncDef
	Vec2 Vec2219(Vec3 v){
		Vec2 r={0};
		#line 143 f5__ //BinaryOp
		r.x = v.x;
		#line 144 f5__ //BinaryOp
		r.y = v.y;
		#line 145 f5__ //Return
		return r;
}
	#line 147 f5__ //FuncDef
	Vec2 Vec2220(f32 x,f32 y){
		Vec2 v={0};
		#line 149 f5__ //BinaryOp
		v.x = x;
		#line 150 f5__ //BinaryOp
		v.y = y;
		#line 151 f5__ //Return
		return v;
}
	#line 154 f5__ //FuncDef
	Vec2 Vec2221(f32 v){
		#line 156 f5__ //Return
		return Vec2220(v,v);
}
	#line 158 f5__ //FuncDef
	Vec3 sub222(Vec3 lhs,Vec3 rhs){
		Vec3 v={0};
		#line 160 f5__ //BinaryOp
		v.x = (lhs.x-rhs.x);
		#line 161 f5__ //BinaryOp
		v.y = (lhs.y-rhs.y);
		#line 162 f5__ //BinaryOp
		v.z = (lhs.z-rhs.z);
		#line 163 f5__ //Return
		return v;
}
	#line 165 f5__ //FuncDef
	Vec3 sub223(Vec3 lhs,Vec2 rhs){
		Vec3 v={0};
		#line 167 f5__ //BinaryOp
		v.x = (lhs.x-rhs.x);
		#line 168 f5__ //BinaryOp
		v.y = (lhs.y-rhs.y);
		#line 169 f5__ //BinaryOp
		v.z = lhs.z;
		#line 170 f5__ //Return
		return v;
}
	#line 172 f5__ //FuncDef
	Vec2 sub224(Vec2 lhs,Vec2 rhs){
		Vec2 v={0};
		#line 174 f5__ //BinaryOp
		v.x = (lhs.x-rhs.x);
		#line 175 f5__ //BinaryOp
		v.y = (lhs.y-rhs.y);
		#line 176 f5__ //Return
		return v;
}
	#line 178 f5__ //FuncDef
	Vec3 add225(Vec3 lhs,Vec3 rhs){
		Vec3 v={0};
		#line 180 f5__ //BinaryOp
		v.x = (lhs.x+rhs.x);
		#line 181 f5__ //BinaryOp
		v.y = (lhs.y+rhs.y);
		#line 182 f5__ //BinaryOp
		v.z = (lhs.z+rhs.z);
		#line 183 f5__ //Return
		return v;
}
	#line 185 f5__ //FuncDef
	Vec3 add226(Vec3 lhs,Vec2 rhs){
		Vec3 v={0};
		#line 187 f5__ //BinaryOp
		v.x = (lhs.x+rhs.x);
		#line 188 f5__ //BinaryOp
		v.y = (lhs.y+rhs.y);
		#line 189 f5__ //BinaryOp
		v.z = lhs.z;
		#line 190 f5__ //Return
		return v;
}
	#line 192 f5__ //FuncDef
	Vec2 add227(Vec2 lhs,Vec2 rhs){
		Vec2 v={0};
		#line 194 f5__ //BinaryOp
		v.x = (lhs.x+rhs.x);
		#line 195 f5__ //BinaryOp
		v.y = (lhs.y+rhs.y);
		#line 196 f5__ //Return
		return v;
}
	#line 198 f5__ //FuncDef
	Vec3 mul228(Vec3 lhs,Vec3 rhs){
		Vec3 v={0};
		#line 200 f5__ //BinaryOp
		v.x = (lhs.x*rhs.x);
		#line 201 f5__ //BinaryOp
		v.y = (lhs.y*rhs.y);
		#line 202 f5__ //BinaryOp
		v.z = (lhs.z*rhs.z);
		#line 203 f5__ //Return
		return v;
}
	#line 206 f5__ //FuncDef
	Vec4 mul229(f32 l,Vec4 r){
		#line 206 f5__ //Return
		return mul230(r,l);
}
	#line 207 f5__ //FuncDef
	Vec4 mul230(Vec4 l,f32 r){
		Vec4 v={0};
		#line 209 f5__ //BinaryOp
		v.x = (l.x*r);
		#line 210 f5__ //BinaryOp
		v.y = (l.y*r);
		#line 211 f5__ //BinaryOp
		v.z = (l.z*r);
		#line 212 f5__ //BinaryOp
		v.w = (l.w*r);
		#line 213 f5__ //Return
		return v;
}
	#line 215 f5__ //FuncDef
	Vec3 mul231(f32 l,Vec3 r){
		#line 215 f5__ //Return
		return mul232(r,l);
}
	#line 216 f5__ //FuncDef
	Vec3 mul232(Vec3 l,f32 r){
		Vec3 v={0};
		#line 218 f5__ //BinaryOp
		v.x = (l.x*r);
		#line 219 f5__ //BinaryOp
		v.y = (l.y*r);
		#line 220 f5__ //BinaryOp
		v.z = (l.z*r);
		#line 221 f5__ //Return
		return v;
}
	#line 224 f5__ //FuncDef
	Vec2 mul233(f32 l,Vec2 r){
		#line 224 f5__ //Return
		return mul234(r,l);
}
	#line 225 f5__ //FuncDef
	Vec2 mul234(Vec2 l,f32 r){
		Vec2 v={0};
		#line 227 f5__ //BinaryOp
		v.x = (l.x*r);
		#line 228 f5__ //BinaryOp
		v.y = (l.y*r);
		#line 229 f5__ //Return
		return v;
}
	#line 232 f5__ //FuncDef
	Vec2 div235(Vec2 l,f32 r){
		#line 233 f5__ //Return
		return mul234(l,(1.0/r));
}
	#line 235 f5__ //FuncDef
	Vec3 div236(Vec3 l,f32 r){
		#line 236 f5__ //Return
		return mul232(l,(1.0/r));
}
	#line 238 f5__ //FuncDef
	Vec4 div237(Vec4 l,f32 r){
		#line 239 f5__ //Return
		return mul230(l,(1.0/r));
}
	#line 242 f5__ //FuncDef
	f32 Dot238(Vec3 l,Vec3 r){
		#line 244 f5__ //Return
		return (((l.x*r.x)+(l.y*r.y))+(l.z*r.z));
}
	#line 246 f5__ //FuncDef
	f32 Dot239(Vec2 l,Vec2 r){
		#line 248 f5__ //Return
		return ((l.x*r.x)+(l.y*r.y));
}
	#line 250 f5__ //FuncDef
	Vec3 Cross240(Vec3 l,Vec3 r){
		#line 252 f5__ //Return
		return Vec3216(((l.y*r.z)-(l.z*r.y)),((l.z*r.x)-(l.x*r.z)),((l.x*r.y)-(l.y*r.x)));
}
	#line 255 f5__ //FuncDef
	f32 Length241(Vec3 v){
		#line 257 f5__ //Return
		return sqrt421((((v.x*v.x)+(v.y*v.y))+(v.z*v.z)));
}
	#line 259 f5__ //FuncDef
	f32 Length242(Vec2 v){
		#line 261 f5__ //Return
		return sqrt421(((v.x*v.x)+(v.y*v.y)));
}
	#line 264 f5__ //FuncDef
	Vec3 Normalize243(Vec3 v){
		#line 266 f5__ //Return
		return div236(mul232(v,1.0),Length241(v));
}
	#line 268 f5__ //FuncDef
	Vec2 Normalize244(Vec2 v){
		#line 270 f5__ //Return
		return div235(mul234(v,1.0),Length242(v));
}
			;
	#line 28 f6__ //FuncDef
	void Init247(World& world){
		i64 size=1000;
		#line 30 f6__ //Call
		Init0809(world.components,size);
		#line 31 f6__ //Call
		Init2820(world.entities,size);
		#line 32 f6__ //Call
		Init3822(world.transforms,size);
		#line 33 f6__ //Call
		Init4824(world.sprites,size);
		#line 34 f6__ //Call
		Init5826(world.editables,size);
		#line 35 f6__ //Call
		Init6828(world.meshes,size);
		#line 36 f6__ //BinaryOp
		world.count = 1;
}
	#line 39 f6__ //FuncDef
	i64 Bits248(){
		#line 40 f6__ //Return
		return (1<<0);
}
	#line 43 f6__ //FuncDef
	i64 Bits249(){
		#line 44 f6__ //Return
		return (1<<1);
}
	#line 47 f6__ //FuncDef
	i64 Bits250(){
		#line 48 f6__ //Return
		return (1<<2);
}
	#line 51 f6__ //FuncDef
	i64 Bits251(){
		#line 52 f6__ //Return
		return (1<<3);
}
	#line 55 f6__ //FuncDef
	Array3& Components252(){
		#line 56 f6__ //Return
		return world.transforms;
}
	#line 58 f6__ //FuncDef
	Array4& Components253(){
		#line 59 f6__ //Return
		return world.sprites;
}
	#line 61 f6__ //FuncDef
	Array5& Components254(){
		#line 62 f6__ //Return
		return world.editables;
}
	#line 64 f6__ //FuncDef
	Array8& Components255(){
		#line 65 f6__ //Return
		return world.meshes;
}
	#line 68 f6__ //FuncDef
		#line 79 f6__ //FuncDef
	i8 Retrieve0889(i64 i,Transform*& a,Editable*& b){
		if(((OpArray1835(world.components,i)&(Bits248()|Bits250()))==(Bits248()|Bits250()))){
			#line 82 f6__ //BinaryOp
			a = (&OpArray6858(Components252(),i));
			#line 83 f6__ //BinaryOp
			b = (&OpArray2837(Components254(),i));
			return true;
		};
		return false;
}
i8 Retrieve1902(i64 i,Transform*& a,Sprite*& b){
		if(((OpArray1835(world.components,i)&(Bits248()|Bits249()))==(Bits248()|Bits249()))){
			#line 82 f6__ //BinaryOp
			a = (&OpArray6858(Components252(),i));
			#line 83 f6__ //BinaryOp
			b = (&OpArray3839(Components253(),i));
			return true;
		};
		return false;
}
i8 Retrieve2904(i64 i,Transform*& a,Mesh*& b){
		if(((OpArray1835(world.components,i)&(Bits248()|Bits251()))==(Bits248()|Bits251()))){
			#line 82 f6__ //BinaryOp
			a = (&OpArray6858(Components252(),i));
			#line 83 f6__ //BinaryOp
			b = (&OpArray8882(Components255(),i));
			return true;
		};
		return false;
}
	#line 89 f6__ //FuncDef
		#line 98 f6__ //FuncDef
	Editable& AddComponent0836(Entity entity){
		#line 100 f6__ //BinaryOp
		OpArray1835(world.components,entity.id) = (OpArray1835(world.components,entity.id)|Bits250());
		return OpArray2837(Components254(),entity.id);
}
Sprite& AddComponent1838(Entity entity){
		#line 100 f6__ //BinaryOp
		OpArray1835(world.components,entity.id) = (OpArray1835(world.components,entity.id)|Bits249());
		return OpArray3839(Components253(),entity.id);
}
Transform& AddComponent2857(Entity entity){
		#line 100 f6__ //BinaryOp
		OpArray1835(world.components,entity.id) = (OpArray1835(world.components,entity.id)|Bits248());
		return OpArray6858(Components252(),entity.id);
}
Mesh& AddComponent3881(Entity entity){
		#line 100 f6__ //BinaryOp
		OpArray1835(world.components,entity.id) = (OpArray1835(world.components,entity.id)|Bits251());
		return OpArray8882(Components255(),entity.id);
}
	#line 104 f6__ //FuncDef
	Entity CreateEntity260(){
		Entity entity={0};
		#line 107 f6__ //BinaryOp
		entity.id = world.count;
		#line 108 f6__ //BinaryOp
		OpArray1835(world.components,entity.id) = 0;
		#line 109 f6__ //BinaryOp
		world.count = (world.count+1);
		#line 110 f6__ //Return
		return entity;
}
	#line 113 f6__ //FuncDef
	Mesh* Get0890(Entity entity){
		return (&OpArray8882(Components255(),entity.id));
}
		#line 125 f6__ //FuncDef
	Transform& Transform263(Index1 index){
		#line 127 f6__ //Return
		return (*index.item);
}
	#line 130 f6__ //FuncDef
		#line 137 f6__ //FuncDef
				#line 27 f7__ //FuncDef
	RenderTarget RenderTarget268(){
		RenderTarget target={0};
		#line 30 f7__ //BinaryOp
		target.position = Vec2220(0,0);
		#line 31 f7__ //BinaryOp
		target.size = Vec2220(1,1);
		#line 32 f7__ //BinaryOp
		target.framebuffer = 0;
		#line 33 f7__ //Return
		return target;
}
	#line 35 f7__ //FuncDef
	void GenerateFrameBuffer269(RenderTarget& target,DynamicArray2& textures){
		#line 37 f7__ //If
		if((textures.length!=0)){
			#line 39 f7__ //Call
			Println127(String132(textures.length));
			#line 40 f7__ //Call
			Print126(str{26,(i8*)"Frame buffer with textures"});
			#line 41 f7__ //Call
			glGenFramebuffers(1,(&target.framebuffer));
			#line 42 f7__ //Call
			glBindFramebuffer(GL_FRAMEBUFFER,target.framebuffer);
			Array11 drawBuffers={0};
			#line 45 f7__ //Call
			Init7875(drawBuffers,textures.length);
			#line 46 f7__ //BinaryOp
			target.size = (*OpArray7877(textures,0)).size;
			for(i64 it = i64343(0); it<textures.length;it++){
				#line 51 f7__ //Call
				glFramebufferTexture2D(GL_FRAMEBUFFER,(u32389(it)+GL_COLOR_ATTACHMENT0),GL_TEXTURE_2D,(*OpArray7877(textures,it)).id,0);
				#line 52 f7__ //BinaryOp
				OpArray7878(drawBuffers,it) = (GL_COLOR_ATTACHMENT0+u32389(it));
			};
			#line 54 f7__ //Call
			glDrawBuffers(i32357(drawBuffers.length),drawBuffers.elements);
			u32 status=glCheckFramebufferStatus(GL_FRAMEBUFFER);
			#line 57 f7__ //If
			if((status!=GL_FRAMEBUFFER_COMPLETE)){
				#line 58 f7__ //Call
				Error129(str{24,(i8*)"Error: Framebuffer error"});
			};
		};
}
	#line 63 f7__ //FuncDef
	void Bind270(RenderTarget target,Window window){
		#line 65 f7__ //If
		if(target.framebuffer){
			#line 66 f7__ //Call
			glViewport(0,0,i32358(target.size.x),i32358(target.size.y));
		}else{
			#line 69 f7__ //Call
			glViewport(0,0,i32358(window.size.x),i32358(window.size.y));
		};
		#line 71 f7__ //Call
		glBindFramebuffer(GL_FRAMEBUFFER,target.framebuffer);
}
	#line 73 f7__ //FuncDef
	void BindScreen271(){
		#line 75 f7__ //Call
		glBindFramebuffer(GL_FRAMEBUFFER,0);
}
		#line 88 f7__ //FuncDef
	ShadingPass ShadingPass273(){
		ShadingPass pass={0};
		#line 91 f7__ //BinaryOp
		pass.render = 1;
		#line 92 f7__ //BinaryOp
		pass.target = RenderTarget268();
		#line 93 f7__ //BinaryOp
		pass.clear = 0;
		#line 94 f7__ //Call
		Init5871(pass.in);
		#line 95 f7__ //Call
		Init5871(pass.out);
		#line 96 f7__ //Return
		return pass;
}
	#line 99 f7__ //FuncDef
	ShadingPass PostProcess274(Sprite& sprite){
		ShadingPass pass=ShadingPass273();
		#line 102 f7__ //BinaryOp
		pass.render = 0;
		#line 103 f7__ //BinaryOp
		pass.sprite = sprite;
		#line 104 f7__ //Return
		return pass;
}
	#line 107 f7__ //FuncDef
	void Refresh275(ShadingPass& pass){
		#line 109 f7__ //Call
		GenerateFrameBuffer269(pass.target,pass.out);
}
		#line 119 f7__ //FuncDef
	Shader& Shader277(Renderer& renderer,str vs,str fs){
		#line 121 f7__ //If
		if((!OpArray1851(renderer.shaders,add130(vs,fs)))){
			#line 123 f7__ //BinaryOp
			OpArray1851(renderer.shaders,add130(vs,fs)) = new1855(Shader764(vs,fs));
		};
		#line 125 f7__ //Return
		return (*OpArray1851(renderer.shaders,add130(vs,fs)));
}
	#line 128 f7__ //FuncDef
	Texture& Texture278(Renderer& renderer,str file){
		#line 130 f7__ //If
		if((!OpArray0844(renderer.textures,file))){
			#line 132 f7__ //BinaryOp
			OpArray0844(renderer.textures,file) = new0848(Texture462(file));
		};
		#line 134 f7__ //Return
		return (*OpArray0844(renderer.textures,file));
}
	#line 137 f7__ //FuncDef
	Renderer Renderer279(){
		Renderer renderer={0};
		#line 140 f7__ //Call
		Init2866(renderer.passes);
		#line 141 f7__ //Call
		Init0867(renderer.shaders);
		#line 142 f7__ //Call
		Init1869(renderer.textures);
		#line 143 f7__ //Return
		return renderer;
}
	#line 146 f7__ //FuncDef
	void Draw280(Sprite& sprite,Transform& transform){
		#line 148 f7__ //Call
		Bind430(sprite.material);
		#line 149 f7__ //Call
		GLError765(str{13,(i8*)"1 Bind Error\n"});
		i32 loc=glGetUniformLocation(sprite.material.shader.id,str{8,(i8*)"texture0"}.chars);
		#line 152 f7__ //Call
		glProgramUniform1i(sprite.material.shader.id,loc,0);
		#line 154 f7__ //Call
		glBindVertexArray(sprite.vao);
		#line 155 f7__ //Call
		glDrawElements(GL_TRIANGLES,6,GL_UNSIGNED_SHORT,(voidptr)0);
		#line 156 f7__ //Call
		glBindVertexArray(0);
		#line 157 f7__ //Call
		GLError765(str{10,(i8*)"Draw Error"});
}
	#line 160 f7__ //FuncDef
	void Draw281(Mesh& sprite,Transform& transform){
		#line 162 f7__ //Call
		Bind430(sprite.material);
		#line 163 f7__ //Call
		GLError765(str{13,(i8*)"1 Bind Error\n"});
		i32 loc=glGetUniformLocation(sprite.material.shader.id,str{8,(i8*)"texture0"}.chars);
		#line 166 f7__ //Call
		glProgramUniform1i(sprite.material.shader.id,loc,0);
		#line 168 f7__ //Call
		glBindVertexArray(sprite.vao);
		#line 169 f7__ //Call
		glDrawElements(GL_TRIANGLES,i32353(sprite.count),GL_UNSIGNED_SHORT,(voidptr)0);
		#line 170 f7__ //Call
		glBindVertexArray(0);
		#line 171 f7__ //Call
		GLError765(str{10,(i8*)"Draw Error"});
}
			#line 187 f7__ //FuncDef
	u32 InterfaceBinding284(){
		#line 189 f7__ //Return
		return 0;
}
	#line 191 f7__ //FuncDef
	u32 InterfaceBinding285(){
		#line 193 f7__ //Return
		return 1;
}
	#line 196 f7__ //FuncDef
	Buffer CreateInterfaceBlock0898(CameraBlock block,i64 count){
		return Buffer448(BufferInterface,(i64345(typeinfo22.size)*count));
}
Buffer CreateInterfaceBlock1901(TransformBlock block,i64 count){
		return Buffer448(BufferInterface,(i64345(typeinfo23.size)*count));
}
	#line 201 f7__ //FuncDef
	void LoadInterfaceBlock0899(Buffer buffer,CameraBlock block){
		#line 203 f7__ //Call
		glBindBufferBase(GL_UNIFORM_BUFFER,InterfaceBinding284(),buffer.id);
		#line 204 f7__ //Call
		glBufferData(buffer.buffertype,i64345(typeinfo22.size),(voidptr)(&block),GL_DYNAMIC_DRAW);
}
void LoadInterfaceBlock1903(Buffer buffer,TransformBlock block){
		#line 203 f7__ //Call
		glBindBufferBase(GL_UNIFORM_BUFFER,InterfaceBinding285(),buffer.id);
		#line 204 f7__ //Call
		glBufferData(buffer.buffertype,i64345(typeinfo23.size),(voidptr)(&block),GL_DYNAMIC_DRAW);
}
	#line 207 f7__ //FuncDef
	void Draw288(Renderer& renderer,World& world){
		TransformBlock transformBlock={0};
		Buffer blockBuffer=CreateInterfaceBlock1901(transformBlock,1);
		for(i64 it = i64343(0); it<world.count;it++){
			Transform* transform={0};
			Sprite* sprite={0};
			Mesh* mesh={0};
			#line 218 f7__ //If
			if(Retrieve1902(it,transform,sprite)){
				#line 219 f7__ //BinaryOp
				transformBlock.matrix = (*transform).matrix;
				#line 220 f7__ //Call
				LoadInterfaceBlock1903(blockBuffer,transformBlock);
				#line 221 f7__ //Call
				Draw280((*sprite),(*transform));
			};
			#line 223 f7__ //If
			if(Retrieve2904(it,transform,mesh)){
				#line 224 f7__ //BinaryOp
				transformBlock.matrix = (*transform).matrix;
				#line 225 f7__ //Call
				LoadInterfaceBlock1903(blockBuffer,transformBlock);
				#line 226 f7__ //Call
				Draw281((*mesh),(*transform));
			};
		};
}
	#line 231 f7__ //FuncDef
	void Render289(Renderer& renderer,World& world,Camera camera,Window window){
		CameraBlock cameraBlock={0};
		Buffer cameraBuffer=CreateInterfaceBlock0898(cameraBlock,1);
		#line 236 f7__ //BinaryOp
		cameraBlock.viewProjection = camera.viewProjection;
		#line 237 f7__ //BinaryOp
		cameraBlock.windowSize = Vec2220(window.size.x,window.size.y);
		#line 238 f7__ //BinaryOp
		cameraBlock.pixelSize = Vec2220((1.0/window.size.x),(1.0/window.size.y));
		#line 239 f7__ //BinaryOp
		cameraBlock.time = window.time;
		#line 240 f7__ //Call
		LoadInterfaceBlock0899(cameraBuffer,cameraBlock);
		for(i64 it = i64343(0); it<renderer.passes.length;it++){
			#line 244 f7__ //Call
			Bind270(OpArray8900(renderer.passes,it).target,window);
			u32 j={0};
			while((i64345(j)<OpArray8900(renderer.passes,it).in.length)){
				#line 248 f7__ //Call
				glActiveTexture(((GL_TEXTURE0+10)+j));
				#line 249 f7__ //Call
				glBindTexture(GL_TEXTURE_2D,(*OpArray7877(OpArray8900(renderer.passes,it).in,i64345(j))).id);
				#line 250 f7__ //BinaryOp
				j = (j+1);
			};
			#line 253 f7__ //Call
			glActiveTexture(GL_TEXTURE0);
			#line 255 f7__ //If
			if(OpArray8900(renderer.passes,it).clear){
				#line 256 f7__ //Call
				glClear(GL_COLOR_BUFFER_BIT);
			};
			#line 258 f7__ //If
			if(OpArray8900(renderer.passes,it).render){
				#line 259 f7__ //Call
				Draw288(renderer,world);
			}else{
				#line 264 f7__ //Call
				GLError765(str{12,(i8*)"Pass error 2"});
				#line 266 f7__ //Call
				Bind430(OpArray8900(renderer.passes,it).sprite.material);
				#line 267 f7__ //Call
				GLError765(str{12,(i8*)"Pass error 1"});
				#line 269 f7__ //Call
				glBindVertexArray(OpArray8900(renderer.passes,it).sprite.vao);
				#line 270 f7__ //Call
				GLError765(str{12,(i8*)"Pass error 1"});
				#line 271 f7__ //Call
				glDrawElements(GL_TRIANGLES,6,GL_UNSIGNED_SHORT,(voidptr)0);
			};
		};
		#line 275 f7__ //Call
		glBindVertexArray(0);
}
	;
	;
	;
	;
	;
		#line 25 f8__ //FuncDef
	Archive Archive291(){
		Archive self={0};
		#line 28 f8__ //Call
		Init0830(self.array);
		#line 29 f8__ //BinaryOp
		self.Type = ArchiveNone;
		#line 30 f8__ //BinaryOp
		self.id = str{0,(i8*)""};
		#line 31 f8__ //BinaryOp
		self.string = str{0,(i8*)""};
		#line 32 f8__ //Return
		return self;
}
	#line 35 f8__ //FuncDef
	void Load292(Archive self,Vec4& v){
		#line 36 f8__ //BinaryOp
		v.x = f32407(OpArray0817(self.array,0).number);
		#line 37 f8__ //BinaryOp
		v.y = f32407(OpArray0817(self.array,1).number);
		#line 38 f8__ //BinaryOp
		v.z = f32407(OpArray0817(self.array,2).number);
		#line 39 f8__ //BinaryOp
		v.w = f32407(OpArray0817(self.array,3).number);
}
	#line 41 f8__ //FuncDef
	void Load293(Archive self,Vec3& v){
		#line 42 f8__ //BinaryOp
		v.x = f32407(OpArray0817(self.array,0).number);
		#line 43 f8__ //BinaryOp
		v.y = f32407(OpArray0817(self.array,1).number);
		#line 44 f8__ //BinaryOp
		v.z = f32407(OpArray0817(self.array,2).number);
}
	#line 46 f8__ //FuncDef
	void Save294(Archive& self,u64 v){
		#line 47 f8__ //BinaryOp
		self.Type = ArchiveNumber;
		#line 48 f8__ //BinaryOp
		self.number = f64410(v);
}
	#line 50 f8__ //FuncDef
	void Save295(Archive& self,i64 v){
		#line 51 f8__ //BinaryOp
		self.Type = ArchiveNumber;
		#line 52 f8__ //BinaryOp
		self.number = f64413(v);
}
	#line 54 f8__ //FuncDef
	void Save296(Archive& self,f64 v){
		#line 55 f8__ //BinaryOp
		self.Type = ArchiveNumber;
		#line 56 f8__ //BinaryOp
		self.number = v;
}
	#line 58 f8__ //FuncDef
	void Save297(Archive& self,f32 v){
		#line 59 f8__ //BinaryOp
		self.Type = ArchiveNumber;
		#line 60 f8__ //BinaryOp
		self.number = f64414(v);
}
	#line 62 f8__ //FuncDef
	void Save298(Archive& self,str string){
		#line 63 f8__ //BinaryOp
		self.Type = ArchiveString;
		#line 64 f8__ //BinaryOp
		self.string = string;
}
	#line 66 f8__ //FuncDef
	void Save299(Archive& self,Vec4 v){
		#line 68 f8__ //BinaryOp
		self.Type = ArchiveArray;
		#line 69 f8__ //Call
		Resize2905(self.array,4);
		#line 70 f8__ //Call
		Save297(OpArray0817(self.array,0),v.x);
		#line 71 f8__ //Call
		Save297(OpArray0817(self.array,1),v.y);
		#line 72 f8__ //Call
		Save297(OpArray0817(self.array,2),v.z);
		#line 73 f8__ //Call
		Save297(OpArray0817(self.array,3),v.w);
}
	#line 75 f8__ //FuncDef
	void Save300(Archive& self,Vec3 v){
		#line 77 f8__ //BinaryOp
		self.Type = ArchiveArray;
		#line 78 f8__ //Call
		Resize2905(self.array,3);
		#line 79 f8__ //Call
		Save297(OpArray0817(self.array,0),v.x);
		#line 80 f8__ //Call
		Save297(OpArray0817(self.array,1),v.y);
		#line 81 f8__ //Call
		Save297(OpArray0817(self.array,2),v.z);
}
	#line 83 f8__ //FuncDef
	void Save301(Archive& self,Vec2 v){
		#line 85 f8__ //BinaryOp
		self.Type = ArchiveArray;
		#line 86 f8__ //Call
		Resize2905(self.array,2);
		#line 87 f8__ //Call
		Save297(OpArray0817(self.array,0),v.x);
		#line 88 f8__ //Call
		Save297(OpArray0817(self.array,1),v.y);
}
	#line 91 f8__ //FuncDef
	Archive& OpArray302(Archive& self,str field){
		for(i64 it = i64343(0); it<self.array.length;it++){
			#line 94 f8__ //If
			if(Equal134(OpArray0811(self.array,it).id,field)){
				#line 95 f8__ //Return
				return OpArray0817(self.array,it);
			};
		};
		#line 98 f8__ //Call
		Push0818(self.array,Archive291());
		#line 99 f8__ //BinaryOp
		OpArray0817(self.array,(self.array.length-1)).id = field;
		#line 100 f8__ //Return
		return OpArray0817(self.array,(self.array.length-1));
}
	#line 103 f8__ //FuncDef
	void Save303(Archive& self,Transform transform){
		#line 105 f8__ //BinaryOp
		self.Type = ArchiveTable;
		#line 106 f8__ //Call
		Save300(OpArray302(self,str{8,(i8*)"Position"}),Position442(transform));
		#line 107 f8__ //Call
		Save300(OpArray302(self,str{5,(i8*)"Scale"}),Scale440(transform));
}
	#line 110 f8__ //FuncDef
	void Save304(Archive& self,Sprite sprite){
		#line 112 f8__ //BinaryOp
		self.Type = ArchiveTable;
		#line 113 f8__ //Call
		Save298(OpArray302(self,str{7,(i8*)"Texture"}),sprite.material.texture.file);
		#line 114 f8__ //Call
		Save298(OpArray302(self,str{6,(i8*)"Vertex"}),sprite.material.shader.vs);
		#line 115 f8__ //Call
		Save298(OpArray302(self,str{8,(i8*)"Fragment"}),sprite.material.shader.fs);
		#line 116 f8__ //Call
		Save299(OpArray302(self,str{5,(i8*)"Color"}),sprite.color);
}
	#line 119 f8__ //FuncDef
	void PrintDepth305(i64 depth){
		for(i64 it = i64343(0); it<depth;it++){
			#line 123 f8__ //Call
			Print126(str{1,(i8*)"\t"});
		};
}
	#line 127 f8__ //FuncDef
	void WriteDepth306(File* file,i64 depth){
		for(i64 it = i64343(0); it<depth;it++){
			#line 131 f8__ //Call
			Write308(file,str{1,(i8*)"\t"});
		};
}
	#line 135 f8__ //FuncDef
	void Print307(Archive& self,i64& depth){
		#line 137 f8__ //If
		if((self.Type==ArchiveArray)){
			for(i64 it = i64343(0); it<self.array.length;it++){
				#line 141 f8__ //Call
				Print307(OpArray0817(self.array,it),depth);
				#line 142 f8__ //Call
				Print126(str{1,(i8*)" "});
			};
		};
		#line 145 f8__ //If
		if((self.Type==ArchiveTable)){
			#line 147 f8__ //BinaryOp
			depth = (depth+1);
			for(i64 it = i64343(0); it<self.array.length;it++){
				#line 151 f8__ //Call
				PrintDepth305(depth);
				#line 152 f8__ //Call
				Print126(OpArray0817(self.array,it).id);
				#line 153 f8__ //Call
				Print126(str{1,(i8*)" "});
				#line 154 f8__ //Call
				Print307(OpArray0817(self.array,it),depth);
				#line 155 f8__ //Call
				Print126(str{1,(i8*)"\n"});
			};
			#line 157 f8__ //If
			if((depth>0)){
				#line 158 f8__ //Call
				PrintDepth305(depth);
				#line 159 f8__ //Call
				Print126(str{2,(i8*)"}\n"});
			};
			#line 161 f8__ //BinaryOp
			depth = (depth-1);
		};
		#line 163 f8__ //If
		if((self.Type==ArchiveString)){
			#line 165 f8__ //Call
			Print126(self.string);
		};
		#line 167 f8__ //If
		if((self.Type==ArchiveNumber)){
			#line 169 f8__ //Call
			Print126(String133(f32407(self.number)));
		};
		#line 171 f8__ //If
		if((self.Type==ArchiveNone)){
			#line 173 f8__ //Call
			Print126(str{3,(i8*)"nil"});
		};
}
	#line 177 f8__ //FuncDef
	void Write308(File* file,str string){
		#line 179 f8__ //Call
		FileWrite((voidptr)string.chars,1,u64397(string.length),file);
}
	#line 181 f8__ //FuncDef
	void ArchiveFile309(Archive& self,File* file,i64 depth){
		#line 183 f8__ //If
		if((self.Type==ArchiveArray)){
			#line 185 f8__ //Call
			Write308(file,str{1,(i8*)"("});
			for(i64 it = i64343(0); it<self.array.length;it++){
				#line 188 f8__ //Call
				ArchiveFile309(OpArray0817(self.array,it),file,depth);
				#line 189 f8__ //Call
				Write308(file,str{1,(i8*)" "});
			};
			#line 191 f8__ //Call
			Write308(file,str{1,(i8*)")"});
		};
		#line 193 f8__ //If
		if((self.Type==ArchiveTable)){
			#line 195 f8__ //BinaryOp
			depth = (depth+1);
			#line 197 f8__ //If
			if((depth>0)){
				#line 198 f8__ //Call
				Write308(file,str{2,(i8*)"{\n"});
			};
			for(i64 it = i64343(0); it<self.array.length;it++){
				#line 202 f8__ //Call
				WriteDepth306(file,depth);
				#line 203 f8__ //Call
				Write308(file,OpArray0817(self.array,it).id);
				#line 204 f8__ //Call
				Write308(file,str{1,(i8*)" "});
				#line 205 f8__ //Call
				ArchiveFile309(OpArray0817(self.array,it),file,depth);
				#line 206 f8__ //Call
				Write308(file,str{1,(i8*)"\n"});
			};
			#line 208 f8__ //BinaryOp
			depth = (depth-1);
			#line 210 f8__ //If
			if((depth>=0)){
				#line 211 f8__ //Call
				WriteDepth306(file,depth);
				#line 212 f8__ //Call
				Write308(file,str{1,(i8*)"}"});
			};
		};
		#line 215 f8__ //If
		if((self.Type==ArchiveString)){
			#line 217 f8__ //Call
			Write308(file,str{1,(i8*)"\'"});
			#line 218 f8__ //Call
			Write308(file,self.string);
			#line 219 f8__ //Call
			Write308(file,str{1,(i8*)"\'"});
		};
		#line 221 f8__ //If
		if((self.Type==ArchiveNumber)){
			#line 223 f8__ //Call
			Write308(file,String133(f32407(self.number)));
		};
		#line 225 f8__ //If
		if((self.Type==ArchiveNone)){
			#line 227 f8__ //Call
			Write308(file,str{3,(i8*)"nil"});
		};
}
	#line 230 f8__ //FuncDef
	void ArchiveFile310(Archive& self,str file){
		File* f=FileOpen(file.chars,str{1,(i8*)"w"}.chars);
		#line 233 f8__ //Call
		ArchiveFile309(self,f,(-1));
}
	#line 235 f8__ //FuncDef
	Archive Unarchive311(str file){
		Archive archive=Archive291();
		#line 238 f8__ //BinaryOp
		archive.Type = ArchiveTable;
		Lexer lexer=Lexer481(file);
		#line 240 f8__ //Call
		Unarchive312(archive,lexer);
		#line 241 f8__ //Return
		return archive;
}
	#line 243 f8__ //FuncDef
	i8 Unarchive312(Archive& archive,Lexer& lexer){
		#line 245 f8__ //If
		if((archive.Type==ArchiveNone)){
			#line 247 f8__ //If
			if((lexer.token.Type==Char480(str{1,(i8*)"{"}))){
				#line 249 f8__ //Call
				Consume488(lexer);
				#line 251 f8__ //BinaryOp
				archive.Type = ArchiveTable;
				#line 252 f8__ //Call
				Unarchive312(archive,lexer);
				#line 254 f8__ //If
				if((lexer.token.Type!=Char480(str{1,(i8*)"}"}))){
					#line 256 f8__ //Call
					Print126(str{10,(i8*)"Expected }"});
				};
				#line 258 f8__ //Call
				Consume488(lexer);
				#line 259 f8__ //Return
				return true;
			};
			#line 261 f8__ //If
			if((lexer.token.Type==Char480(str{1,(i8*)"("}))){
				#line 263 f8__ //Call
				Consume488(lexer);
				#line 264 f8__ //BinaryOp
				archive.Type = ArchiveArray;
				#line 265 f8__ //Call
				Unarchive312(archive,lexer);
				#line 266 f8__ //If
				if((lexer.token.Type!=Char480(str{1,(i8*)")"}))){
					#line 268 f8__ //Call
					Print126(str{10,(i8*)"Expected )"});
				};
				#line 270 f8__ //Call
				Consume488(lexer);
				#line 271 f8__ //Return
				return true;
			};
			#line 273 f8__ //If
			if((lexer.token.Type==LexerNumber)){
				#line 275 f8__ //BinaryOp
				archive.Type = ArchiveNumber;
				#line 276 f8__ //BinaryOp
				archive.number = lexer.token.number;
				#line 277 f8__ //Call
				Consume488(lexer);
				#line 278 f8__ //Return
				return true;
			};
			#line 280 f8__ //If
			if((lexer.token.Type==LexerString)){
				#line 282 f8__ //BinaryOp
				archive.Type = ArchiveString;
				#line 283 f8__ //BinaryOp
				archive.string = lexer.token.string;
				#line 284 f8__ //Call
				Consume488(lexer);
				#line 285 f8__ //Return
				return true;
			};
			#line 287 f8__ //Return
			return false;
		}else{
			#line 289 f8__ //If
			if((archive.Type==ArchiveTable)){
				while((lexer.token.Type==LexerIdentifier)){
					Token t=lexer.token;
					#line 293 f8__ //Call
					Consume488(lexer);
					#line 294 f8__ //Call
					Unarchive312(OpArray302(archive,t.string),lexer);
				};
			}else{
				#line 297 f8__ //If
				if((archive.Type==ArchiveArray)){
					Archive a=Archive291();
					while(Unarchive312(a,lexer)){
						#line 301 f8__ //Call
						Push0818(archive.array,a);
						#line 302 f8__ //BinaryOp
						a = Archive291();
					};
				}else{
					#line 306 f8__ //Return
					return false;
				};
			};
		};
		#line 308 f8__ //Return
		return true;
}
		#line 15 f9__ //FuncDef
	Editor Editor314(World* world,Camera* camera){
		Editor editor={0};
		#line 18 f9__ //BinaryOp
		editor.world = world;
		#line 19 f9__ //BinaryOp
		editor.camera = camera;
		#line 20 f9__ //Return
		return editor;
}
		#line 30 f9__ //FuncDef
	Editable* Editable316(Entity entity){
		Editable* editable=(&AddComponent0836(entity));
		#line 33 f9__ //Return
		return editable;
}
	#line 36 f9__ //FuncDef
	void Selected317(Editable& editable,i8 selected){
		#line 38 f9__ //BinaryOp
		editable.selected = selected;
		#line 39 f9__ //If
		if(selected){
			#line 41 f9__ //Call
			MeshScreenSpaceCircle437((*Get0890(editable.transform)),Vec3217(0),10,Vec4215(1));
		}else{
			#line 45 f9__ //Call
			MeshScreenSpaceCircle437((*Get0890(editable.transform)),Vec3217(0),7,Vec4215(1));
		};
}
	#line 49 f9__ //FuncDef
	i8 MouseDown318(Editor& editor,Vec2 position){
		Ray ray=ScreenToRay475((*editor.camera),position);
		for(i64 it = i64343(0); it<(*editor.world).count;it++){
			Transform* transform={0};
			Editable* editable={0};
			#line 57 f9__ //If
			if(Retrieve0889(it,transform,editable)){
				Vec3 at=WorldPosition444((*transform));
				#line 60 f9__ //If
				if(IntersectsSphere473(ray,at,5)){
					#line 62 f9__ //Call
					Println127(str{13,(i8*)"Hit transform"});
					#line 63 f9__ //BinaryOp
					Selected317((*editable),true);
				};
			};
		};
		#line 67 f9__ //Return
		return true;
}
	#line 70 f9__ //FuncDef
	void MouseUp319(Editor& editor,Vec2 position){
		Ray ray=ScreenToRay475((*editor.camera),position);
		Ray viewRay=ScreenToRay475((*editor.camera),Vec2221(0));
		for(i64 it = i64343(0); it<(*editor.world).count;it++){
			Transform* transform={0};
			Editable* editable={0};
			#line 80 f9__ //If
			if(Retrieve0889(it,transform,editable)){
				#line 82 f9__ //If
				if((*editable).selected){
					#line 84 f9__ //BinaryOp
					Selected317((*editable),false);
					Plane plane={0};
					#line 87 f9__ //BinaryOp
					plane.orgin = WorldPosition444((*transform));
					#line 88 f9__ //BinaryOp
					plane.normal = viewRay.direction;
					f32 t=IntersectsPlane471(ray,plane);
					#line 91 f9__ //BinaryOp
					Position443((*transform),PointAt472(ray,t));
				};
			};
		};
}
	#line 98 f9__ //FuncDef
	void Update320(Editor& editor,Vec2 position){
		Ray ray=ScreenToRay475((*editor.camera),position);
		Ray viewRay=ScreenToRay475((*editor.camera),Vec2221(0));
		for(i64 it = i64343(0); it<(*editor.world).count;it++){
			Transform* transform={0};
			Editable* editable={0};
			#line 108 f9__ //If
			if(Retrieve0889(it,transform,editable)){
				#line 110 f9__ //If
				if((*editable).selected){
					Plane plane={0};
					#line 113 f9__ //BinaryOp
					plane.orgin = WorldPosition444((*transform));
					#line 114 f9__ //BinaryOp
					plane.normal = viewRay.direction;
					f32 t=IntersectsPlane471(ray,plane);
					#line 117 f9__ //BinaryOp
					Position443((*transform),PointAt472(ray,t));
				};
			};
		};
}
	#line 123 f9__ //FuncDef
	void AddEditables321(Editor& editor,World& world,Renderer& renderer,Window& window){
		#line 125 f9__ //Call
		RegisterMouse0892(window,editor,(func)MouseDown318,(func)MouseUp319);
		Transform* transform={0};
		Editable* editable={0};
		for(i64 it = i64343(0); it<world.count;it++){
			#line 132 f9__ //If
			if(Retrieve0889(it,transform,editable)){
				#line 134 f9__ //Call
				Println127(str{11,(i8*)"Add Ediable"});
				#line 135 f9__ //BinaryOp
				(*editable).transform = CreateEntity260();
				Entity entity=(*editable).transform;
				#line 139 f9__ //BinaryOp
				Scale441((*Transform439(entity)),Vec3217(1.0));
				#line 140 f9__ //BinaryOp
				Parent446((*Transform439(entity)),(*transform));
				Mesh* mesh=Mesh435(entity,renderer);
				#line 143 f9__ //Call
				MeshScreenSpaceCircle437((*mesh),Vec3217(0),7,Vec4215(1));
			};
		};
}
		#line 13 f10__ //FuncDef
		#line 14 f10__ //FuncDef
		#line 16 f10__ //FuncDef
	extern "C" void _spAtlasPage_createTexture(spAtlasPage* self,i8* path){
		Renderer* renderer=(Renderer*)(*(*self).atlas).rendererObject;
		Texture* texture=(&Texture278((*renderer),String128(path)));
		#line 20 f10__ //BinaryOp
		(*self).rendererObject = (voidptr)texture;
		#line 23 f10__ //BinaryOp
		(*self).width = i32358((*texture).size.x);
		#line 24 f10__ //BinaryOp
		(*self).height = i32358((*texture).size.y);
}
	#line 27 f10__ //FuncDef
	extern "C" void _spAtlasPage_disposeTexture(spAtlasPage* self){
}
	#line 32 f10__ //FuncDef
	extern "C" i8* _spUtil_readFile(i8* path,i32* length){
		#line 34 f10__ //Return
		return _readFile(path,length);
}
		#line 50 f10__ //FuncDef
	Spine Spine329(Renderer& renderer,Mesh* mesh,str spineFile,str atlasFile){
		Spine spine={0};
		#line 53 f10__ //BinaryOp
		spine.spineFile = spineFile;
		#line 54 f10__ //BinaryOp
		spine.atlasFile = atlasFile;
		spAtlas* atlas=spAtlas_createFromFile(atlasFile.chars,(voidptr)(&renderer));
		spSkeletonJson* json=spSkeletonJson_create(atlas);
		spSkeletonData* skeletonData=spSkeletonJson_readSkeletonDataFile(json,spineFile.chars);
		#line 58 f10__ //BinaryOp
		spine.skeleton = spSkeleton_create(skeletonData);
		#line 59 f10__ //Call
		spSkeleton_updateWorldTransform(spine.skeleton);
		#line 60 f10__ //BinaryOp
		spine.state = spAnimationState_create(spAnimationStateData_create((*spine.skeleton).data));
		#line 61 f10__ //Call
		Init8884(spine.data,1000);
		#line 62 f10__ //Call
		Init9886((*mesh).vertices,2000);
		#line 63 f10__ //Call
		Init10888((*mesh).indices,2000);
		#line 64 f10__ //BinaryOp
		spine.mesh = mesh;
		spAnimation* animation=spSkeletonData_findAnimation((*spine.skeleton).data,str{3,(i8*)"Run"}.chars);
		#line 67 f10__ //Call
		spAnimationState_setAnimation(spine.state,0,animation,1);
		#line 68 f10__ //Return
		return spine;
}
	#line 71 f10__ //FuncDef
	void Update330(Spine& self,f32 delta){
		#line 73 f10__ //Call
		spSkeleton_update(self.skeleton,(delta*0.1));
		#line 74 f10__ //Call
		spAnimationState_update(self.state,(delta*0.1));
		#line 75 f10__ //Call
		spAnimationState_apply(self.state,self.skeleton);
		#line 76 f10__ //Call
		spSkeleton_updateWorldTransform(self.skeleton);
		f32* uvs={0};
		u16* triangles={0};
		i32 verticesCount={0};
		i32 trianglesCount={0};
		Texture* texture={0};
		i32 count={0};
		i32 icount={0};
		u16 quadTriangles[6]={0};
		#line 88 f10__ //BinaryOp
		(*((u16*)quadTriangles+0)) = 0;
		#line 89 f10__ //BinaryOp
		(*((u16*)quadTriangles+1)) = 1;
		#line 90 f10__ //BinaryOp
		(*((u16*)quadTriangles+2)) = 2;
		#line 91 f10__ //BinaryOp
		(*((u16*)quadTriangles+3)) = 2;
		#line 92 f10__ //BinaryOp
		(*((u16*)quadTriangles+4)) = 3;
		#line 93 f10__ //BinaryOp
		(*((u16*)quadTriangles+5)) = 0;
		for(i64 it = i64343(0); it<(*self.skeleton).slotsCount;it++){
			Vec4 color=Vec4215(1);
			spSlot* slot=(*((*self.skeleton).drawOrder+it));
			#line 102 f10__ //If
			if((*slot).attachment){
				#line 106 f10__ //If
				if(((i32)(*(*slot).attachment).kind==0)){
					spRegionAttachment* attachment=(spRegionAttachment*)(*slot).attachment;
					#line 110 f10__ //Call
					spRegionAttachment_computeWorldVertices(attachment,(*slot).bone,self.data.elements);
					#line 112 f10__ //BinaryOp
					texture = (Texture*)(*(*(spAtlasRegion*)(*attachment).rendererObject).page).rendererObject;
					#line 113 f10__ //BinaryOp
					uvs = (f32*)(*attachment).uvs;
					#line 114 f10__ //BinaryOp
					verticesCount = 8;
					#line 115 f10__ //BinaryOp
					triangles = (u16*)quadTriangles;
					#line 116 f10__ //BinaryOp
					trianglesCount = 6;
					#line 118 f10__ //BinaryOp
					color.w = ((*slot).a*(*attachment).a);
					#line 119 f10__ //BinaryOp
					color.x = (((*slot).r*(*attachment).r)*color.w);
					#line 120 f10__ //BinaryOp
					color.y = (((*slot).g*(*attachment).g)*color.w);
					#line 121 f10__ //BinaryOp
					color.z = (((*slot).b*(*attachment).b)*color.w);
				};
				#line 124 f10__ //If
				if(((i32)(*(*slot).attachment).kind==2)){
					spMeshAttachment* attachment=(spMeshAttachment*)(*slot).attachment;
					#line 127 f10__ //Call
					spMeshAttachment_computeWorldVertices(attachment,slot,self.data.elements);
					#line 128 f10__ //If
					if(((i32)(*(*slot).data).blendMode==1)){
						#line 130 f10__ //BinaryOp
						color.w = 0;
					};
					#line 133 f10__ //BinaryOp
					texture = (Texture*)(*(*(spAtlasRegion*)(*attachment).rendererObject).page).rendererObject;
					#line 134 f10__ //BinaryOp
					uvs = (*attachment).uvs;
					#line 135 f10__ //BinaryOp
					verticesCount = (*attachment).super.worldVerticesLength;
					#line 136 f10__ //BinaryOp
					triangles = (*attachment).triangles;
					#line 137 f10__ //BinaryOp
					trianglesCount = (*attachment).trianglesCount;
					#line 139 f10__ //BinaryOp
					color.w = ((*slot).a*(*attachment).a);
					#line 140 f10__ //BinaryOp
					color.x = (((*slot).r*(*attachment).r)*color.w);
					#line 141 f10__ //BinaryOp
					color.y = (((*slot).g*(*attachment).g)*color.w);
					#line 142 f10__ //BinaryOp
					color.z = (((*slot).b*(*attachment).b)*color.w);
				};
				i64 offset=count;
				for(i64 it = i64343(0); it<verticesCount;it++){
					PositionTextureColorColor* vertex=(&OpArray9891((*self.mesh).vertices,count));
					#line 151 f10__ //BinaryOp
					(*vertex).position.x = OpArray10897(self.data,it);
					#line 152 f10__ //BinaryOp
					(*vertex).position.y = OpArray10897(self.data,(it+1));
					#line 153 f10__ //BinaryOp
					(*vertex).position.z = 0;
					#line 154 f10__ //BinaryOp
					(*vertex).texture.x = (*(uvs+it));
					#line 155 f10__ //BinaryOp
					(*vertex).texture.y = (*((uvs+it)+1));
					#line 156 f10__ //BinaryOp
					(*vertex).color = color;
					#line 157 f10__ //BinaryOp
					(*vertex).colorAlt = color;
					#line 159 f10__ //BinaryOp
					it = (it+1);
					#line 160 f10__ //BinaryOp
					count = (count+1);
				};
				#line 162 f10__ //BinaryOp
				(*self.mesh).material.texture = (*texture);
				for(i64 it = i64343(0); it<trianglesCount;it++){
					#line 165 f10__ //BinaryOp
					OpArray5850((*self.mesh).indices,icount) = u16377(((*(triangles+it))+u16381(offset)));
					#line 166 f10__ //BinaryOp
					icount = (icount+1);
				};
			};
		};
		#line 170 f10__ //BinaryOp
		(*self.mesh).count = u32388(icount);
		#line 171 f10__ //Call
		glBindBuffer(GL_ARRAY_BUFFER,(*self.mesh).buffer);
		#line 172 f10__ //Call
		glBufferData(GL_ARRAY_BUFFER,(i64)(typeinfo19.size*u32388(count)),(voidptr)(*self.mesh).vertices.elements,GL_DYNAMIC_DRAW);
		#line 174 f10__ //Call
		glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,(*self.mesh).index);
		#line 175 f10__ //Call
		glBufferData(GL_ELEMENT_ARRAY_BUFFER,(i64)(typeinfo9.size*u32388(icount)),(voidptr)(*self.mesh).indices.elements,GL_DYNAMIC_DRAW);
		#line 176 f10__ //Call
		GLError765(str{17,(i8*)"Screen space mesh"});
		#line 177 f10__ //Call
		glBindBuffer(GL_ARRAY_BUFFER,0);
		#line 178 f10__ //Call
		glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,0);
}
	#line 11 f11__ //FuncDef
		#line 12 f11__ //FuncDef
		#line 13 f11__ //FuncDef
		#line 14 f11__ //FuncDef
		#line 15 f11__ //FuncDef
		#line 18 f11__ //FuncDef
		#line 23 f11__ //FuncDef
	Texture* new0848(Texture t){
		Texture* mem=Alloc9849(1);
		#line 25 f11__ //BinaryOp
		(*mem) = t;
		return mem;
}
Shader* new1855(Shader t){
		Shader* mem=Alloc10856(1);
		#line 25 f11__ //BinaryOp
		(*mem) = t;
		return mem;
}
	#line 29 f11__ //FuncDef
	void Assert338(i8 condition,str reason){
		#line 30 f11__ //If
		if((!condition)){
			#line 31 f11__ //Call
			Println127(add130(str{10,(i8*)"Aborting: "},reason));
			#line 32 f11__ //Call
			abort();
		};
}
	#line 36 f11__ //FuncDef
	void Assert339(i8 condition){
		#line 37 f11__ //If
		if((!condition)){
			#line 38 f11__ //Call
			abort();
		}else{
			#line 41 f11__ //Call
			Println127(str{11,(i8*)"Test passed"});
		};
}
	#line 45 f11__ //FuncDef
	i8* Alloc0812(i64 len){
		u64 size=(u64)(typeinfo1.size*(u32)len);
		return (i8*)calloc(1,size);
}
i64* Alloc0810(i64 len){
		u64 size=(u64)(typeinfo0.size*(u32)len);
		return (i64*)calloc(1,size);
}
Entity* Alloc2821(i64 len){
		u64 size=(u64)(typeinfo3.size*(u32)len);
		return (Entity*)calloc(1,size);
}
Transform* Alloc3823(i64 len){
		u64 size=(u64)(typeinfo4.size*(u32)len);
		return (Transform*)calloc(1,size);
}
Sprite* Alloc4825(i64 len){
		u64 size=(u64)(typeinfo5.size*(u32)len);
		return (Sprite*)calloc(1,size);
}
Editable* Alloc5827(i64 len){
		u64 size=(u64)(typeinfo6.size*(u32)len);
		return (Editable*)calloc(1,size);
}
Mesh* Alloc6829(i64 len){
		u64 size=(u64)(typeinfo7.size*(u32)len);
		return (Mesh*)calloc(1,size);
}
PositionTextureColor* Alloc7840(i64 len){
		u64 size=(u64)(typeinfo8.size*(u32)len);
		return (PositionTextureColor*)calloc(1,size);
}
u16* Alloc8841(i64 len){
		u64 size=(u64)(typeinfo9.size*(u32)len);
		return (u16*)calloc(1,size);
}
Texture* Alloc9849(i64 len){
		u64 size=(u64)(typeinfo11.size*(u32)len);
		return (Texture*)calloc(1,size);
}
Shader* Alloc10856(i64 len){
		u64 size=(u64)(typeinfo14.size*(u32)len);
		return (Shader*)calloc(1,size);
}
u32* Alloc11876(i64 len){
		u64 size=(u64)(typeinfo17.size*(u32)len);
		return (u32*)calloc(1,size);
}
f32* Alloc12885(i64 len){
		u64 size=(u64)(typeinfo12.size*(u32)len);
		return (f32*)calloc(1,size);
}
PositionTextureColorColor* Alloc13887(i64 len){
		u64 size=(u64)(typeinfo19.size*(u32)len);
		return (PositionTextureColorColor*)calloc(1,size);
}
	#line 51 f11__ //FuncDef
		#line 57 f11__ //FuncDef
	void CopyPtr0813(i8* from,i8* to,i64 len){
		u64 size=(u64)(typeinfo1.size*(u32)len);
		#line 59 f11__ //Call
		memcpy((voidptr)to,(voidptr)from,size);
}
	#line 6 f12__ //FuncDef
	i64 i64343(u8 i){
		#line 6 f12__ //Return
		return (i64)i;
}
	#line 7 f12__ //FuncDef
	i64 i64344(u16 i){
		#line 7 f12__ //Return
		return (i64)i;
}
	#line 8 f12__ //FuncDef
	i64 i64345(u32 i){
		#line 8 f12__ //Return
		return (i64)i;
}
	#line 9 f12__ //FuncDef
	i64 i64346(u64 i){
		#line 9 f12__ //Return
		return (i64)i;
}
	#line 10 f12__ //FuncDef
	i64 i64347(i8 i){
		#line 10 f12__ //Return
		return (i64)i;
}
	#line 11 f12__ //FuncDef
	i64 i64348(i32 i){
		#line 11 f12__ //Return
		return (i64)i;
}
	#line 12 f12__ //FuncDef
	i64 i64349(i64 i){
		#line 12 f12__ //Return
		return (i64)i;
}
	#line 13 f12__ //FuncDef
	i64 i64350(f32 i){
		#line 13 f12__ //Return
		return (i64)i;
}
	#line 14 f12__ //FuncDef
	i64 i64351(f64 i){
		#line 14 f12__ //Return
		return (i64)i;
}
	#line 16 f12__ //FuncDef
	i32 i32352(u8 i){
		#line 16 f12__ //Return
		return (i32)i;
}
	#line 17 f12__ //FuncDef
	i32 i32353(u32 i){
		#line 17 f12__ //Return
		return (i32)i;
}
	#line 18 f12__ //FuncDef
	i32 i32354(u64 i){
		#line 18 f12__ //Return
		return (i32)i;
}
	#line 19 f12__ //FuncDef
	i32 i32355(i8 i){
		#line 19 f12__ //Return
		return (i32)i;
}
	#line 20 f12__ //FuncDef
	i32 i32356(i32 i){
		#line 20 f12__ //Return
		return (i32)i;
}
	#line 21 f12__ //FuncDef
	i32 i32357(i64 i){
		#line 21 f12__ //Return
		return (i32)i;
}
	#line 22 f12__ //FuncDef
	i32 i32358(f32 i){
		#line 22 f12__ //Return
		return (i32)i;
}
	#line 23 f12__ //FuncDef
	i32 i32359(f64 i){
		#line 23 f12__ //Return
		return (i32)i;
}
	#line 25 f12__ //FuncDef
	i8 i8360(u8 i){
		#line 25 f12__ //Return
		return (i8)i;
}
	#line 26 f12__ //FuncDef
	i8 i8361(u32 i){
		#line 26 f12__ //Return
		return (i8)i;
}
	#line 27 f12__ //FuncDef
	i8 i8362(u64 i){
		#line 27 f12__ //Return
		return (i8)i;
}
	#line 28 f12__ //FuncDef
	i8 i8363(i8 i){
		#line 28 f12__ //Return
		return (i8)i;
}
	#line 29 f12__ //FuncDef
	i8 i8364(i32 i){
		#line 29 f12__ //Return
		return (i8)i;
}
	#line 30 f12__ //FuncDef
	i8 i8365(i64 i){
		#line 30 f12__ //Return
		return (i8)i;
}
	#line 31 f12__ //FuncDef
	i8 i8366(f32 i){
		#line 31 f12__ //Return
		return (i8)i;
}
	#line 32 f12__ //FuncDef
	i8 i8367(f64 i){
		#line 32 f12__ //Return
		return (i8)i;
}
	#line 34 f12__ //FuncDef
	u8 u8368(u8 i){
		#line 34 f12__ //Return
		return (u8)i;
}
	#line 35 f12__ //FuncDef
	u8 u8369(u32 i){
		#line 35 f12__ //Return
		return (u8)i;
}
	#line 36 f12__ //FuncDef
	u8 u8370(u64 i){
		#line 36 f12__ //Return
		return (u8)i;
}
	#line 37 f12__ //FuncDef
	u8 u8371(i8 i){
		#line 37 f12__ //Return
		return (u8)i;
}
	#line 38 f12__ //FuncDef
	u8 u8372(i32 i){
		#line 38 f12__ //Return
		return (u8)i;
}
	#line 39 f12__ //FuncDef
	u8 u8373(i64 i){
		#line 39 f12__ //Return
		return (u8)i;
}
	#line 40 f12__ //FuncDef
	u8 u8374(f32 i){
		#line 40 f12__ //Return
		return (u8)i;
}
	#line 41 f12__ //FuncDef
	u8 u8375(f64 i){
		#line 41 f12__ //Return
		return (u8)i;
}
	#line 43 f12__ //FuncDef
	u16 u16376(u16 i){
		#line 43 f12__ //Return
		return (u16)i;
}
	#line 44 f12__ //FuncDef
	u16 u16377(u32 i){
		#line 44 f12__ //Return
		return (u16)i;
}
	#line 45 f12__ //FuncDef
	u16 u16378(u64 i){
		#line 45 f12__ //Return
		return (u16)i;
}
	#line 46 f12__ //FuncDef
	u16 u16379(i8 i){
		#line 46 f12__ //Return
		return (u16)i;
}
	#line 47 f12__ //FuncDef
	u16 u16380(i32 i){
		#line 47 f12__ //Return
		return (u16)i;
}
	#line 48 f12__ //FuncDef
	u16 u16381(i64 i){
		#line 48 f12__ //Return
		return (u16)i;
}
	#line 49 f12__ //FuncDef
	u16 u16382(f32 i){
		#line 49 f12__ //Return
		return (u16)i;
}
	#line 50 f12__ //FuncDef
	u16 u16383(f64 i){
		#line 50 f12__ //Return
		return (u16)i;
}
	#line 52 f12__ //FuncDef
	u32 u32384(u8 i){
		#line 52 f12__ //Return
		return (u32)i;
}
	#line 53 f12__ //FuncDef
	u32 u32385(u32 i){
		#line 53 f12__ //Return
		return (u32)i;
}
	#line 54 f12__ //FuncDef
	u32 u32386(u64 i){
		#line 54 f12__ //Return
		return (u32)i;
}
	#line 55 f12__ //FuncDef
	u32 u32387(i8 i){
		#line 55 f12__ //Return
		return (u32)i;
}
	#line 56 f12__ //FuncDef
	u32 u32388(i32 i){
		#line 56 f12__ //Return
		return (u32)i;
}
	#line 57 f12__ //FuncDef
	u32 u32389(i64 i){
		#line 57 f12__ //Return
		return (u32)i;
}
	#line 58 f12__ //FuncDef
	u32 u32390(f32 i){
		#line 58 f12__ //Return
		return (u32)i;
}
	#line 59 f12__ //FuncDef
	u32 u32391(f64 i){
		#line 59 f12__ //Return
		return (u32)i;
}
	#line 61 f12__ //FuncDef
	u64 u64392(u8 i){
		#line 61 f12__ //Return
		return (u64)i;
}
	#line 62 f12__ //FuncDef
	u64 u64393(u32 i){
		#line 62 f12__ //Return
		return (u64)i;
}
	#line 63 f12__ //FuncDef
	u64 u64394(u64 i){
		#line 63 f12__ //Return
		return (u64)i;
}
	#line 64 f12__ //FuncDef
	u64 u64395(i8 i){
		#line 64 f12__ //Return
		return (u64)i;
}
	#line 65 f12__ //FuncDef
	u64 u64396(i32 i){
		#line 65 f12__ //Return
		return (u64)i;
}
	#line 66 f12__ //FuncDef
	u64 u64397(i64 i){
		#line 66 f12__ //Return
		return (u64)i;
}
	#line 67 f12__ //FuncDef
	u64 u64398(f32 i){
		#line 67 f12__ //Return
		return (u64)i;
}
	#line 68 f12__ //FuncDef
	u64 u64399(f64 i){
		#line 68 f12__ //Return
		return (u64)i;
}
	#line 70 f12__ //FuncDef
	f32 f32400(u8 i){
		#line 70 f12__ //Return
		return (f32)i;
}
	#line 71 f12__ //FuncDef
	f32 f32401(u32 i){
		#line 71 f12__ //Return
		return (f32)i;
}
	#line 72 f12__ //FuncDef
	f32 f32402(u64 i){
		#line 72 f12__ //Return
		return (f32)i;
}
	#line 73 f12__ //FuncDef
	f32 f32403(i8 i){
		#line 73 f12__ //Return
		return (f32)i;
}
	#line 74 f12__ //FuncDef
	f32 f32404(i32 i){
		#line 74 f12__ //Return
		return (f32)i;
}
	#line 75 f12__ //FuncDef
	f32 f32405(i64 i){
		#line 75 f12__ //Return
		return (f32)i;
}
	#line 76 f12__ //FuncDef
	f32 f32406(f32 i){
		#line 76 f12__ //Return
		return (f32)i;
}
	#line 77 f12__ //FuncDef
	f32 f32407(f64 i){
		#line 77 f12__ //Return
		return (f32)i;
}
	#line 79 f12__ //FuncDef
	f64 f64408(u8 i){
		#line 79 f12__ //Return
		return (f64)i;
}
	#line 80 f12__ //FuncDef
	f64 f64409(u32 i){
		#line 80 f12__ //Return
		return (f64)i;
}
	#line 81 f12__ //FuncDef
	f64 f64410(u64 i){
		#line 81 f12__ //Return
		return (f64)i;
}
	#line 82 f12__ //FuncDef
	f64 f64411(i8 i){
		#line 82 f12__ //Return
		return (f64)i;
}
	#line 83 f12__ //FuncDef
	f64 f64412(i32 i){
		#line 83 f12__ //Return
		return (f64)i;
}
	#line 84 f12__ //FuncDef
	f64 f64413(i64 i){
		#line 84 f12__ //Return
		return (f64)i;
}
	#line 85 f12__ //FuncDef
	f64 f64414(f32 i){
		#line 85 f12__ //Return
		return (f64)i;
}
	#line 86 f12__ //FuncDef
	f64 f64415(f64 i){
		#line 86 f12__ //Return
		return (f64)i;
}
	#line 3 f13__ //FuncDef
		#line 4 f13__ //FuncDef
		#line 5 f13__ //FuncDef
		#line 7 f13__ //FuncDef
		#line 8 f13__ //FuncDef
		;
	#line 13 f13__ //FuncDef
	f32 sqrt421(f32 f){
		#line 15 f13__ //Return
		return sqrtf(f);
}
	#line 17 f13__ //FuncDef
	f32 abs422(f32 f){
		#line 19 f13__ //Return
		return fabsf(f);
}
	#line 21 f13__ //FuncDef
	f32 cos423(f32 f){
		#line 23 f13__ //Return
		return cosf(f);
}
	#line 25 f13__ //FuncDef
	f32 sin424(f32 f){
		#line 27 f13__ //Return
		return sinf(f);
}
	#line 29 f13__ //FuncDef
	f32 tan425(f32 f){
		#line 31 f13__ //Return
		return tanf(f);
}
					#line 48 f14__ //FuncDef
	void Bind430(Material material){
		#line 50 f14__ //Call
		GLError765(str{10,(i8*)"pre shader"});
		#line 51 f14__ //Call
		glUseProgram(material.shader.id);
		#line 52 f14__ //Call
		GLError765(str{21,(i8*)"failed to bind shader"});
		#line 54 f14__ //If
		if(material.texture.id){
			#line 56 f14__ //Call
			glBindTexture(GL_TEXTURE_2D,material.texture.id);
			#line 57 f14__ //Call
			GLError765(str{22,(i8*)"failed to bind texture"});
		};
}
	#line 61 f14__ //FuncDef
	Sprite* Sprite431(Entity entity,Renderer& renderer,str file){
		Sprite* r=(&AddComponent1838(entity));
		#line 64 f14__ //BinaryOp
		(*r) = Sprite432(renderer,file);
		#line 65 f14__ //Return
		return r;
}
	#line 68 f14__ //FuncDef
	Sprite Sprite432(Renderer& renderer,str file){
		Sprite sprite={0};
		#line 71 f14__ //BinaryOp
		sprite.vertices = Alloc7840(4);
		#line 72 f14__ //BinaryOp
		sprite.indices = Alloc8841(6);
		#line 73 f14__ //BinaryOp
		sprite.material.texture = Texture278(renderer,file);
		#line 74 f14__ //BinaryOp
		sprite.color = Vec4215(1);
		#line 76 f14__ //Call
		glGenBuffers(1,(&sprite.buffer));
		#line 77 f14__ //Call
		glGenBuffers(1,(&sprite.index));
		Array7 i={0};
		#line 80 f14__ //BinaryOp
		i.elements = sprite.indices;
		#line 81 f14__ //BinaryOp
		i.length = 6;
		#line 82 f14__ //BinaryOp
		OpArray5850(i,0) = 0;
		#line 83 f14__ //BinaryOp
		OpArray5850(i,1) = 1;
		#line 84 f14__ //BinaryOp
		OpArray5850(i,2) = 3;
		#line 85 f14__ //BinaryOp
		OpArray5850(i,3) = 2;
		#line 86 f14__ //BinaryOp
		OpArray5850(i,4) = 3;
		#line 87 f14__ //BinaryOp
		OpArray5850(i,5) = 0;
		#line 88 f14__ //Call
		GLError765(str{3,(i8*)"172"});
		#line 89 f14__ //Call
		glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,sprite.index);
		#line 90 f14__ //Call
		glBufferData(GL_ELEMENT_ARRAY_BUFFER,i64346((typeinfo9.size*6)),(voidptr)sprite.indices,GL_DYNAMIC_DRAW);
		#line 91 f14__ //Call
		GLError765(str{3,(i8*)"169"});
		u32 VAO={0};
		#line 95 f14__ //Call
		glGenVertexArrays(1,(&VAO));
		#line 96 f14__ //Call
		glBindVertexArray(VAO);
		#line 97 f14__ //Call
		glBindBuffer(GL_ARRAY_BUFFER,sprite.buffer);
		#line 98 f14__ //Call
		glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,sprite.index);
		#line 99 f14__ //Call
		GLError765(str{3,(i8*)"181"});
		#line 101 f14__ //Call
		glEnableVertexAttribArray(0);
		#line 102 f14__ //Call
		glVertexAttribPointer(0,2,GL_FLOAT,GL_FALSE,i32353(typeinfo8.size),(voidptr)0);
		#line 103 f14__ //Call
		glEnableVertexAttribArray(1);
		#line 104 f14__ //Call
		glVertexAttribPointer(1,2,GL_FLOAT,GL_FALSE,i32353(typeinfo8.size),(voidptr)(typeinfo12.size*2));
		#line 105 f14__ //Call
		glEnableVertexAttribArray(2);
		#line 106 f14__ //Call
		glVertexAttribPointer(2,4,GL_FLOAT,GL_FALSE,i32353(typeinfo8.size),(voidptr)(typeinfo12.size*4));
		#line 107 f14__ //Call
		glBindVertexArray(0);
		#line 109 f14__ //Call
		glBindBuffer(GL_ARRAY_BUFFER,0);
		#line 110 f14__ //Call
		glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,0);
		#line 111 f14__ //Call
		GLError765(str{3,(i8*)"188"});
		#line 113 f14__ //Call
		Color433(sprite,Vec4215(1));
		#line 114 f14__ //BinaryOp
		sprite.vao = VAO;
		#line 115 f14__ //Return
		return sprite;
}
	#line 117 f14__ //FuncDef
	void Color433(Sprite& sprite,Vec4 color){
		#line 119 f14__ //BinaryOp
		sprite.color = color;
		#line 120 f14__ //Call
		GLError765(str{1,(i8*)"1"});
		PositionTextureColor* a=sprite.vertices;
		#line 123 f14__ //BinaryOp
		(*a).position = Vec2220((-0.5),(-0.5));
		#line 124 f14__ //BinaryOp
		(*a).texture = Vec2220(0,1);
		#line 125 f14__ //BinaryOp
		(*a).color = sprite.color;
		#line 126 f14__ //BinaryOp
		a = (a+1);
		#line 127 f14__ //BinaryOp
		(*a).position = Vec2220((-0.5),0.5);
		#line 128 f14__ //BinaryOp
		(*a).texture = Vec2220(0,0);
		#line 129 f14__ //BinaryOp
		(*a).color = sprite.color;
		#line 130 f14__ //BinaryOp
		a = (a+1);
		#line 131 f14__ //BinaryOp
		(*a).position = Vec2220(0.5,(-0.5));
		#line 132 f14__ //BinaryOp
		(*a).texture = Vec2220(1,1);
		#line 133 f14__ //BinaryOp
		(*a).color = sprite.color;
		#line 134 f14__ //BinaryOp
		a = (a+1);
		#line 135 f14__ //BinaryOp
		(*a).position = Vec2220(0.5,0.5);
		#line 136 f14__ //BinaryOp
		(*a).texture = Vec2220(1,0);
		#line 137 f14__ //BinaryOp
		(*a).color = sprite.color;
		#line 138 f14__ //BinaryOp
		a = (a+1);
		#line 140 f14__ //Call
		GLError765(str{3,(i8*)"163"});
		#line 141 f14__ //Call
		glBindBuffer(GL_ARRAY_BUFFER,sprite.buffer);
		#line 142 f14__ //Call
		glBufferData(GL_ARRAY_BUFFER,i64346((typeinfo8.size*4)),(voidptr)sprite.vertices,GL_DYNAMIC_DRAW);
		#line 143 f14__ //Call
		GLError765(str{3,(i8*)"169"});
		#line 144 f14__ //Call
		glBindBuffer(GL_ARRAY_BUFFER,0);
}
		#line 160 f14__ //FuncDef
	Mesh* Mesh435(Entity entity,Renderer& renderer){
		Mesh* r=(&AddComponent3881(entity));
		#line 163 f14__ //BinaryOp
		(*r) = Mesh436(renderer);
		#line 164 f14__ //Return
		return r;
}
	#line 167 f14__ //FuncDef
	Mesh Mesh436(Renderer& renderer){
		Mesh mesh={0};
		#line 171 f14__ //Call
		glGenBuffers(1,(&mesh.buffer));
		#line 172 f14__ //Call
		glGenBuffers(1,(&mesh.index));
		#line 173 f14__ //Call
		glGenVertexArrays(1,(&mesh.vao));
		#line 175 f14__ //BinaryOp
		mesh.material.shader = Shader277(renderer,str{22,(i8*)"shaders/Antialiased.vs"},str{22,(i8*)"shaders/Antialiased.fs"});
		#line 176 f14__ //BinaryOp
		mesh.material.texture.id = 0;
		#line 177 f14__ //BinaryOp
		mesh.count = u32384(0);
		#line 179 f14__ //Call
		glBindVertexArray(mesh.vao);
		#line 180 f14__ //Call
		glBindBuffer(GL_ARRAY_BUFFER,mesh.buffer);
		#line 181 f14__ //Call
		glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,mesh.index);
		#line 183 f14__ //Call
		glEnableVertexAttribArray(0);
		#line 184 f14__ //Call
		glEnableVertexAttribArray(1);
		#line 185 f14__ //Call
		glEnableVertexAttribArray(2);
		#line 186 f14__ //Call
		glEnableVertexAttribArray(3);
		#line 188 f14__ //Call
		glVertexAttribPointer(0,(i32)3,GL_FLOAT,GL_FALSE,(i32)typeinfo19.size,(voidptr)0);
		#line 189 f14__ //Call
		glVertexAttribPointer(1,(i32)2,GL_FLOAT,GL_FALSE,(i32)typeinfo19.size,(voidptr)(typeinfo12.size*3));
		#line 190 f14__ //Call
		glVertexAttribPointer(2,(i32)4,GL_FLOAT,GL_FALSE,(i32)typeinfo19.size,(voidptr)(typeinfo12.size*5));
		#line 191 f14__ //Call
		glVertexAttribPointer(3,(i32)4,GL_FLOAT,GL_FALSE,(i32)typeinfo19.size,(voidptr)(typeinfo12.size*9));
		#line 192 f14__ //Call
		glBindVertexArray(0);
		#line 194 f14__ //Call
		glBindBuffer(GL_ARRAY_BUFFER,0);
		#line 195 f14__ //Call
		glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,0);
		#line 196 f14__ //Call
		GLError765(str{4,(i8*)"Mesh"});
		#line 197 f14__ //Return
		return mesh;
}
	#line 200 f14__ //FuncDef
	void MeshScreenSpaceCircle437(Mesh& mesh,Vec3 position,f32 radius,Vec4 color){
		#line 202 f14__ //Call
		Init9886(mesh.vertices,4);
		#line 203 f14__ //Call
		Init10888(mesh.indices,6);
		#line 204 f14__ //BinaryOp
		mesh.count = u32384(6);
		#line 206 f14__ //BinaryOp
		OpArray5850(mesh.indices,0) = 0;
		#line 207 f14__ //BinaryOp
		OpArray5850(mesh.indices,1) = 1;
		#line 208 f14__ //BinaryOp
		OpArray5850(mesh.indices,2) = 2;
		#line 209 f14__ //BinaryOp
		OpArray5850(mesh.indices,3) = 2;
		#line 210 f14__ //BinaryOp
		OpArray5850(mesh.indices,4) = 3;
		#line 211 f14__ //BinaryOp
		OpArray5850(mesh.indices,5) = 0;
		#line 213 f14__ //BinaryOp
		OpArray9891(mesh.vertices,0).position = position;
		#line 214 f14__ //BinaryOp
		OpArray9891(mesh.vertices,1).position = position;
		#line 215 f14__ //BinaryOp
		OpArray9891(mesh.vertices,2).position = position;
		#line 216 f14__ //BinaryOp
		OpArray9891(mesh.vertices,3).position = position;
		#line 218 f14__ //BinaryOp
		OpArray9891(mesh.vertices,0).texture = Vec2220((-1),(-1));
		#line 219 f14__ //BinaryOp
		OpArray9891(mesh.vertices,1).texture = Vec2220((-1),1);
		#line 220 f14__ //BinaryOp
		OpArray9891(mesh.vertices,2).texture = Vec2220(1,1);
		#line 221 f14__ //BinaryOp
		OpArray9891(mesh.vertices,3).texture = Vec2220(1,(-1));
		#line 223 f14__ //BinaryOp
		OpArray9891(mesh.vertices,0).color = color;
		#line 224 f14__ //BinaryOp
		OpArray9891(mesh.vertices,1).color = color;
		#line 225 f14__ //BinaryOp
		OpArray9891(mesh.vertices,2).color = color;
		#line 226 f14__ //BinaryOp
		OpArray9891(mesh.vertices,3).color = color;
		Vec3 a=add226(position,Vec2220((-1),1));
		Vec3 b=add226(position,Vec2220((-1),(-1)));
		Vec3 c=add226(position,Vec2220(1,(-1)));
		Vec3 d=add226(position,Vec2220(1,1));
		#line 233 f14__ //BinaryOp
		OpArray9891(mesh.vertices,0).colorAlt = Vec4214(a,radius);
		#line 234 f14__ //BinaryOp
		OpArray9891(mesh.vertices,1).colorAlt = Vec4214(b,radius);
		#line 235 f14__ //BinaryOp
		OpArray9891(mesh.vertices,2).colorAlt = Vec4214(c,radius);
		#line 236 f14__ //BinaryOp
		OpArray9891(mesh.vertices,3).colorAlt = Vec4214(d,radius);
		#line 238 f14__ //Call
		glBindBuffer(GL_ARRAY_BUFFER,mesh.buffer);
		#line 239 f14__ //Call
		glBufferData(GL_ARRAY_BUFFER,(i64)(typeinfo19.size*4),(voidptr)mesh.vertices.elements,GL_DYNAMIC_DRAW);
		#line 241 f14__ //Call
		glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,mesh.index);
		#line 242 f14__ //Call
		glBufferData(GL_ELEMENT_ARRAY_BUFFER,(i64)(typeinfo9.size*6),(voidptr)mesh.indices.elements,GL_DYNAMIC_DRAW);
		#line 243 f14__ //Call
		GLError765(str{17,(i8*)"Screen space mesh"});
		#line 244 f14__ //Call
		glBindBuffer(GL_ARRAY_BUFFER,0);
		#line 245 f14__ //Call
		glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,0);
}
		#line 20 f15__ //FuncDef
	Transform* Transform439(Entity entity){
		Transform* transform=(&AddComponent2857(entity));
		#line 23 f15__ //BinaryOp
		(*transform).matrix = Mat4209(1.0);
		#line 24 f15__ //BinaryOp
		(*transform).scale = Vec3217(1.0);
		#line 25 f15__ //BinaryOp
		(*transform).entity = entity;
		#line 26 f15__ //Return
		return transform;
}
	#line 29 f15__ //FuncDef
	Vec3 Scale440(Transform self){
		#line 30 f15__ //Return
		return self.scale;
}
	#line 32 f15__ //FuncDef
	void Scale441(Transform& self,Vec3 scale){
		#line 33 f15__ //BinaryOp
		self.scale = scale;
		#line 34 f15__ //Call
		Recalculate445(self);
}
	#line 36 f15__ //FuncDef
	Vec3 Position442(Transform& self){
		#line 37 f15__ //Return
		return self.position;
}
	#line 39 f15__ //FuncDef
	void Position443(Transform& self,Vec3 position){
		#line 40 f15__ //BinaryOp
		self.position = position;
		#line 41 f15__ //Call
		Recalculate445(self);
}
	#line 43 f15__ //FuncDef
	Vec3 WorldPosition444(Transform self){
		#line 45 f15__ //Return
		return Vec3216(OpArray207(self.matrix,3).x,OpArray207(self.matrix,3).y,OpArray207(self.matrix,3).z);
}
	#line 47 f15__ //FuncDef
	void Recalculate445(Transform& self){
		#line 49 f15__ //BinaryOp
		self.matrix = mul212(Mat4Transform211(self.position),Mat4Scale210(self.scale));
		#line 50 f15__ //If
		if(self.parent){
			#line 51 f15__ //BinaryOp
			self.matrix = mul212((*self.parent).matrix,self.matrix);
		};
		for(i64 it = i64343(0); it<self.children.length;it++){
			#line 54 f15__ //Call
			Recalculate445((*OpArray4860(self.children,it)));
		};
}
	#line 58 f15__ //FuncDef
	void Parent446(Transform& self,Transform& parent){
		#line 60 f15__ //BinaryOp
		self.parent = (&parent);
		#line 61 f15__ //Call
		Push6895(parent.children,(&self));
		#line 62 f15__ //Call
		Recalculate445(self);
		#line 63 f15__ //Call
		Recalculate445(parent);
}
	;
	;
	;
		#line 23 f16__ //FuncDef
	Buffer Buffer448(u32 buffertype,i64 length){
		Buffer buffer={0};
		#line 26 f16__ //Call
		glGenBuffers(1,(&buffer.id));
		#line 27 f16__ //BinaryOp
		buffer.buffertype = buffertype;
		#line 28 f16__ //BinaryOp
		buffer.length = length;
		#line 29 f16__ //Return
		return buffer;
}
	#line 32 f16__ //FuncDef
	voidptr Map449(Buffer& buffer,i64 begin,i64 length){
		#line 34 f16__ //Call
		glBindBuffer(buffer.buffertype,buffer.id);
		#line 35 f16__ //BinaryOp
		buffer.ptr = glMapBufferRange(buffer.buffertype,begin,length,u32389((i64345(GL_MAP_WRITE_BIT)|i64345(GL_MAP_UNSYNCHRONIZED_BIT))));
		#line 36 f16__ //Return
		return buffer.ptr;
}
	#line 39 f16__ //FuncDef
	void Unmap450(Buffer buffer){
		#line 41 f16__ //Call
		glBindBuffer(buffer.buffertype,buffer.id);
		#line 42 f16__ //Call
		glUnmapBuffer(buffer.buffertype);
}
	#line 45 f16__ //FuncDef
	void Resize451(Buffer buffer,i64 size){
		#line 47 f16__ //Call
		glBindBuffer(buffer.buffertype,buffer.id);
		#line 48 f16__ //Call
		glBufferData(buffer.buffertype,size,(voidptr)0,GL_DYNAMIC_DRAW);
}
			#line 38 f17__ //FuncDef
	void RegisterMouse0892(Window& window,Editor& self,func Down,func Up){
		MouseCallback mouse={0};
		#line 41 f17__ //BinaryOp
		mouse.self = (voidptr)(&self);
		#line 42 f17__ //BinaryOp
		mouse.Down = (func)Down;
		#line 43 f17__ //BinaryOp
		mouse.Up = (func)Up;
		#line 44 f17__ //Call
		Push5893(window.mouseCallbacks,mouse);
}
	#line 73 f17__ //FuncDef
	void Call0862(Callback1 callback,Vec2 data){
		#line 75 f17__ //Call
		((void(*)(voidptr, Vec2))callback.func)(callback.self,data);
}
		#line 93 f17__ //FuncDef
	void Mouse457(Window& window,Vec2 mouse,i8 down){
		#line 95 f17__ //BinaryOp
		window.mouse = mouse;
		#line 96 f17__ //If
		if(down){
			#line 98 f17__ //Call
			Println127(add130(str{12,(i8*)"Mouse Down: "},String206(mouse)));
			for(i64 it = i64343(0); it<window.mouseCallbacks.length;it++){
				#line 101 f17__ //Call
				((void(*)(voidptr, Vec2))OpArray6863(window.mouseCallbacks,it).Down)(OpArray6863(window.mouseCallbacks,it).self,mouse);
			};
		}else{
			#line 106 f17__ //Call
			Println127(add130(str{10,(i8*)"Mouse Up: "},String206(mouse)));
			for(i64 it = i64343(0); it<window.mouseCallbacks.length;it++){
				#line 109 f17__ //Call
				((void(*)(voidptr, Vec2))OpArray6863(window.mouseCallbacks,it).Up)(OpArray6863(window.mouseCallbacks,it).self,mouse);
			};
		};
}
	#line 113 f17__ //FuncDef
	void Size458(Window& window,Vec2 size){
		#line 115 f17__ //BinaryOp
		window.size = size;
		#line 116 f17__ //Call
		Println127(add130(str{9,(i8*)"Resized: "},String206(window.size)));
		for(i64 it = i64343(0); it<window.resized.length;it++){
			#line 119 f17__ //Call
			Call0862(OpArray5861(window.resized,it),window.size);
		};
}
		#line 19 f18__ //FuncDef
		#line 20 f18__ //FuncDef
		#line 23 f18__ //FuncDef
	Texture Texture462(str file){
		Texture texture={0};
		#line 26 f18__ //BinaryOp
		texture.file = file;
		#line 27 f18__ //BinaryOp
		texture.id = 0;
		u32 x={0};
		u32 y={0};
		u32 components={0};
		u32 req={0};
		Array10 data={0};
		#line 34 f18__ //BinaryOp
		data.elements = stbi_load(file.chars,(&x),(&y),(&components),0);
		#line 35 f18__ //BinaryOp
		data.length = i64346(((x*y)*4));
		#line 37 f18__ //If
		if((!data.elements)){
			#line 39 f18__ //Call
			Assert338(0,add130(str{21,(i8*)"Couldnt open texture "},file));
			#line 40 f18__ //Return
			return texture;
		};
		for(i64 it = i64343(0); it<i64346((x*y));it++){
			i64 i=(it*4);
			f32 a=(f32400(OpArray4843(data,(i+3)))/255.0);
			#line 47 f18__ //BinaryOp
			OpArray4843(data,i) = u8374((f32400(OpArray4843(data,i))*a));
			#line 48 f18__ //BinaryOp
			OpArray4843(data,(i+1)) = u8374((f32400(OpArray4843(data,(i+1)))*a));
			#line 49 f18__ //BinaryOp
			OpArray4843(data,(i+2)) = u8374((f32400(OpArray4843(data,(i+2)))*a));
		};
		#line 52 f18__ //BinaryOp
		texture.size.x = f32401(x);
		#line 53 f18__ //BinaryOp
		texture.size.y = f32401(y);
		#line 55 f18__ //Call
		glGenTextures(1,(&texture.id));
		#line 56 f18__ //Call
		glBindTexture(GL_TEXTURE_2D,texture.id);
		#line 57 f18__ //Call
		glTexImage2D(GL_TEXTURE_2D,0,i32353(GL_RGBA),i32353(x),i32353(y),0,GL_RGBA,GL_UNSIGNED_BYTE,(voidptr)data.elements);
		#line 58 f18__ //Call
		glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_BASE_LEVEL,0);
		#line 59 f18__ //Call
		glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAX_LEVEL,0);
		#line 60 f18__ //Call
		glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,i32353(GL_LINEAR));
		#line 61 f18__ //Call
		glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,i32353(GL_LINEAR));
		#line 62 f18__ //Call
		stbi_image_free((voidptr)data.elements);
		#line 63 f18__ //Return
		return texture;
}
	#line 65 f18__ //FuncDef
	Texture Texture463(Vec2 size){
		Texture texture={0};
		#line 68 f18__ //BinaryOp
		texture.id = 0;
		#line 69 f18__ //BinaryOp
		texture.size = size;
		#line 70 f18__ //Call
		glGenTextures(1,(&texture.id));
		#line 71 f18__ //Call
		glBindTexture(GL_TEXTURE_2D,texture.id);
		#line 72 f18__ //Call
		glTexImage2D(GL_TEXTURE_2D,0,i32353(GL_RGBA),i32358(size.x),i32358(size.y),0,GL_RGBA,GL_UNSIGNED_BYTE,(voidptr)0);
		#line 73 f18__ //Call
		glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_BASE_LEVEL,0);
		#line 74 f18__ //Call
		glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAX_LEVEL,0);
		#line 75 f18__ //Call
		glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,i32353(GL_LINEAR));
		#line 76 f18__ //Call
		glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,i32353(GL_LINEAR));
		#line 77 f18__ //Return
		return texture;
}
		#line 28 f19__ //FuncDef
	Camera Camera465(){
		Camera camera={0};
		#line 31 f19__ //BinaryOp
		camera.near = 1;
		#line 32 f19__ //BinaryOp
		camera.far = 150;
		#line 33 f19__ //BinaryOp
		camera.fieldOfView = 90;
		#line 34 f19__ //BinaryOp
		camera.projection = Perspective467(camera.fieldOfView,2.0,camera.near,camera.far);
		#line 35 f19__ //BinaryOp
		camera.view = Translate468(Vec3216(0,0,(-50)));
		#line 36 f19__ //BinaryOp
		camera.viewportPosition = Vec2220(0,0);
		#line 37 f19__ //BinaryOp
		camera.viewportScale = Vec2220(1,1);
		#line 39 f19__ //BinaryOp
		camera.viewProjection = mul212(camera.projection,camera.view);
		#line 40 f19__ //Return
		return camera;
}
	#line 49 f19__ //FuncDef
	Mat4 Frustum466(f32 left,f32 right,f32 bottom,f32 top,f32 near,f32 far){
		Mat4 m={0};
		f32 zDelta=(far-near);
		f32 dir=(right-left);
		f32 height=(top-bottom);
		f32 zNear2=(2*near);
		f32 m11=((2.0*near)/dir);
		f32 m22=(zNear2/height);
		f32 m33=(0-((far+near)/zDelta));
		f32 a=((right+left)/dir);
		f32 b=((top+bottom)/height);
		f32 d=(0-((zNear2*far)/zDelta));
		#line 65 f19__ //BinaryOp
		OpArray208(OpArray207(m,0),0) = m11;
		#line 66 f19__ //BinaryOp
		OpArray208(OpArray207(m,0),4) = 0;
		#line 67 f19__ //BinaryOp
		OpArray208(OpArray207(m,0),8) = a;
		#line 68 f19__ //BinaryOp
		OpArray208(OpArray207(m,0),12) = 0;
		#line 70 f19__ //BinaryOp
		OpArray208(OpArray207(m,0),1) = 0;
		#line 71 f19__ //BinaryOp
		OpArray208(OpArray207(m,0),5) = m22;
		#line 72 f19__ //BinaryOp
		OpArray208(OpArray207(m,0),9) = b;
		#line 73 f19__ //BinaryOp
		OpArray208(OpArray207(m,0),13) = 0;
		#line 75 f19__ //BinaryOp
		OpArray208(OpArray207(m,0),2) = 0;
		#line 76 f19__ //BinaryOp
		OpArray208(OpArray207(m,0),6) = 0;
		#line 77 f19__ //BinaryOp
		OpArray208(OpArray207(m,0),10) = m33;
		#line 78 f19__ //BinaryOp
		OpArray208(OpArray207(m,0),14) = d;
		#line 80 f19__ //BinaryOp
		OpArray208(OpArray207(m,0),3) = 0;
		#line 81 f19__ //BinaryOp
		OpArray208(OpArray207(m,0),7) = 0;
		#line 82 f19__ //BinaryOp
		OpArray208(OpArray207(m,0),11) = (-1);
		#line 83 f19__ //BinaryOp
		OpArray208(OpArray207(m,0),15) = 0;
		#line 85 f19__ //Return
		return m;
}
	#line 106 f19__ //FuncDef
	Mat4 Perspective467(f32 fovy,f32 aspect,f32 zNear,f32 zFar){
		f32 f=(1/tanf(((fovy*(PI/180))/2)));
		f32 m11=(f/aspect);
		f32 m22=f;
		f32 m33=((zFar+zNear)/(zNear-zFar));
		f32 m34=(((2*zFar)*zNear)/(zNear-zFar));
		Mat4 m={0};
		#line 115 f19__ //BinaryOp
		OpArray208(OpArray207(m,0),0) = m11;
		#line 116 f19__ //BinaryOp
		OpArray208(OpArray207(m,0),4) = 0;
		#line 117 f19__ //BinaryOp
		OpArray208(OpArray207(m,0),8) = 0;
		#line 118 f19__ //BinaryOp
		OpArray208(OpArray207(m,0),12) = 0;
		#line 120 f19__ //BinaryOp
		OpArray208(OpArray207(m,0),1) = 0;
		#line 121 f19__ //BinaryOp
		OpArray208(OpArray207(m,0),5) = m22;
		#line 122 f19__ //BinaryOp
		OpArray208(OpArray207(m,0),9) = 0;
		#line 123 f19__ //BinaryOp
		OpArray208(OpArray207(m,0),13) = 0;
		#line 125 f19__ //BinaryOp
		OpArray208(OpArray207(m,0),2) = 0;
		#line 126 f19__ //BinaryOp
		OpArray208(OpArray207(m,0),6) = 0;
		#line 127 f19__ //BinaryOp
		OpArray208(OpArray207(m,0),10) = m33;
		#line 128 f19__ //BinaryOp
		OpArray208(OpArray207(m,0),14) = m34;
		#line 130 f19__ //BinaryOp
		OpArray208(OpArray207(m,0),3) = 0;
		#line 131 f19__ //BinaryOp
		OpArray208(OpArray207(m,0),7) = 0;
		#line 132 f19__ //BinaryOp
		OpArray208(OpArray207(m,0),11) = (-1);
		#line 133 f19__ //BinaryOp
		OpArray208(OpArray207(m,0),15) = 0;
		#line 135 f19__ //Return
		return m;
}
	#line 138 f19__ //FuncDef
	Mat4 Translate468(Vec3 translate){
		Mat4 m=Mat4209(1);
		#line 141 f19__ //BinaryOp
		OpArray208(OpArray207(m,0),12) = translate.x;
		#line 142 f19__ //BinaryOp
		OpArray208(OpArray207(m,0),13) = translate.y;
		#line 143 f19__ //BinaryOp
		OpArray208(OpArray207(m,0),14) = translate.z;
		#line 144 f19__ //Return
		return m;
}
			#line 158 f19__ //FuncDef
	f32 IntersectsPlane471(Ray ray,Plane plane){
		f32 t=Dot238(plane.normal,ray.direction);
		#line 162 f19__ //If
		if((abs422(t)>0.0001)){
			#line 164 f19__ //BinaryOp
			t = (Dot238(sub222(plane.orgin,ray.orgin),plane.normal)/t);
			#line 165 f19__ //If
			if((t>=0)){
				#line 167 f19__ //Return
				return t;
			};
		};
		#line 170 f19__ //Return
		return (-1);
}
	#line 173 f19__ //FuncDef
	Vec3 PointAt472(Ray self,f32 distance){
		#line 175 f19__ //Return
		return add225(self.orgin,mul232(self.direction,distance));
}
	#line 178 f19__ //FuncDef
	i8 IntersectsSphere473(Ray self,Vec3 point,f32 radius){
		Vec3 m=sub222(self.orgin,point);
		f32 b=Dot238(m,self.direction);
		f32 c=(Dot238(m,m)-(radius*radius));
		#line 185 f19__ //If
		if(((c>0)&&(b>0))){
			#line 186 f19__ //Return
			return false;
		};
		f32 discr=((b*b)-c);
		#line 191 f19__ //If
		if((discr<0)){
			#line 192 f19__ //Return
			return false;
		};
		#line 194 f19__ //Return
		return true;
}
	#line 197 f19__ //FuncDef
	f32 IntersectsSphereDistance474(Ray self,Vec3 point,f32 radius){
		Vec3 m=sub222(self.orgin,point);
		f32 b=Dot238(m,self.direction);
		f32 c=(Dot238(m,m)-(radius*radius));
		#line 204 f19__ //If
		if(((c>0)&&(b>0))){
			#line 205 f19__ //Return
			return (-1);
		};
		f32 discr=((b*b)-c);
		#line 210 f19__ //If
		if((discr<0)){
			#line 211 f19__ //Return
			return (-1);
		};
		f32 t=(-(b-sqrtf(discr)));
		#line 218 f19__ //If
		if((t<0)){
			#line 219 f19__ //BinaryOp
			t = 0;
		};
		#line 221 f19__ //Return
		return t;
}
	#line 224 f19__ //FuncDef
	Ray ScreenToRay475(Camera self,Vec2 screen){
		Vec2 p={0};
		#line 227 f19__ //BinaryOp
		p.x = ((screen.x/self.viewportScale.x)-(self.viewportPosition.x/self.viewportScale.x));
		#line 228 f19__ //BinaryOp
		p.y = ((screen.y/self.viewportScale.y)-(self.viewportPosition.y/self.viewportScale.y));
		Mat4 iviewProj=Inverse477(mul212(self.projection,self.view));
		Mat4 iview=Inverse477(self.view);
		Vec4 nearPlaneWorld=mul476(iviewProj,Vec4213(p.x,p.y,(-1),1));
		#line 236 f19__ //BinaryOp
		nearPlaneWorld = div237(nearPlaneWorld,nearPlaneWorld.w);
		Ray ray={0};
		#line 239 f19__ //BinaryOp
		ray.orgin = Vec3216(OpArray207(iview,3).x,OpArray207(iview,3).y,OpArray207(iview,3).z);
		#line 240 f19__ //BinaryOp
		ray.direction = Normalize243(sub222(Vec3216(nearPlaneWorld.x,nearPlaneWorld.y,nearPlaneWorld.z),ray.orgin));
		#line 241 f19__ //Return
		return ray;
}
	#line 244 f19__ //FuncDef
	Vec4 mul476(Mat4 self,Vec4 v){
		Vec4 m={0};
		#line 247 f19__ //BinaryOp
		m.x = ((((v.x*OpArray208(self.x,0))+(v.y*OpArray208(self.x,4)))+(v.z*OpArray208(self.x,8)))+(v.w*OpArray208(self.x,12)));
		#line 248 f19__ //BinaryOp
		m.y = ((((v.x*OpArray208(self.x,1))+(v.y*OpArray208(self.x,5)))+(v.z*OpArray208(self.x,9)))+(v.w*OpArray208(self.x,13)));
		#line 249 f19__ //BinaryOp
		m.z = ((((v.x*OpArray208(self.x,2))+(v.y*OpArray208(self.x,6)))+(v.z*OpArray208(self.x,10)))+(v.w*OpArray208(self.x,14)));
		#line 250 f19__ //BinaryOp
		m.w = ((((v.x*OpArray208(self.x,4))+(v.y*OpArray208(self.x,7)))+(v.z*OpArray208(self.x,11)))+(v.w*OpArray208(self.x,15)));
		#line 251 f19__ //Return
		return m;
}
	#line 268 f19__ //FuncDef
	Mat4 Inverse477(Mat4 v){
		Mat4 out={0};
		f32 det={0};
		i64 i={0};
		#line 274 f19__ //BinaryOp
		OpArray208(out.x,0) = (((((((OpArray208(v.x,5)*OpArray208(v.x,10))*OpArray208(v.x,15))-((OpArray208(v.x,5)*OpArray208(v.x,11))*OpArray208(v.x,14)))-((OpArray208(v.x,9)*OpArray208(v.x,6))*OpArray208(v.x,15)))+((OpArray208(v.x,9)*OpArray208(v.x,7))*OpArray208(v.x,14)))+((OpArray208(v.x,13)*OpArray208(v.x,6))*OpArray208(v.x,11)))-((OpArray208(v.x,13)*OpArray208(v.x,7))*OpArray208(v.x,10)));
		#line 281 f19__ //BinaryOp
		OpArray208(out.x,4) = (-(((((((OpArray208(v.x,4)*OpArray208(v.x,10))*OpArray208(v.x,15))+((OpArray208(v.x,4)*OpArray208(v.x,11))*OpArray208(v.x,14)))+((OpArray208(v.x,8)*OpArray208(v.x,6))*OpArray208(v.x,15)))-((OpArray208(v.x,8)*OpArray208(v.x,7))*OpArray208(v.x,14)))-((OpArray208(v.x,12)*OpArray208(v.x,6))*OpArray208(v.x,11)))+((OpArray208(v.x,12)*OpArray208(v.x,7))*OpArray208(v.x,10))));
		#line 288 f19__ //BinaryOp
		OpArray208(out.x,8) = (((((((OpArray208(v.x,4)*OpArray208(v.x,9))*OpArray208(v.x,15))-((OpArray208(v.x,4)*OpArray208(v.x,11))*OpArray208(v.x,13)))-((OpArray208(v.x,8)*OpArray208(v.x,5))*OpArray208(v.x,15)))+((OpArray208(v.x,8)*OpArray208(v.x,7))*OpArray208(v.x,13)))+((OpArray208(v.x,12)*OpArray208(v.x,5))*OpArray208(v.x,11)))-((OpArray208(v.x,12)*OpArray208(v.x,7))*OpArray208(v.x,9)));
		#line 295 f19__ //BinaryOp
		OpArray208(out.x,12) = (-(((((((OpArray208(v.x,4)*OpArray208(v.x,9))*OpArray208(v.x,14))+((OpArray208(v.x,4)*OpArray208(v.x,10))*OpArray208(v.x,13)))+((OpArray208(v.x,8)*OpArray208(v.x,5))*OpArray208(v.x,14)))-((OpArray208(v.x,8)*OpArray208(v.x,6))*OpArray208(v.x,13)))-((OpArray208(v.x,12)*OpArray208(v.x,5))*OpArray208(v.x,10)))+((OpArray208(v.x,12)*OpArray208(v.x,6))*OpArray208(v.x,9))));
		#line 302 f19__ //BinaryOp
		OpArray208(out.x,1) = (-(((((((OpArray208(v.x,1)*OpArray208(v.x,10))*OpArray208(v.x,15))+((OpArray208(v.x,1)*OpArray208(v.x,11))*OpArray208(v.x,14)))+((OpArray208(v.x,9)*OpArray208(v.x,2))*OpArray208(v.x,15)))-((OpArray208(v.x,9)*OpArray208(v.x,3))*OpArray208(v.x,14)))-((OpArray208(v.x,13)*OpArray208(v.x,2))*OpArray208(v.x,11)))+((OpArray208(v.x,13)*OpArray208(v.x,3))*OpArray208(v.x,10))));
		#line 309 f19__ //BinaryOp
		OpArray208(out.x,5) = (((((((OpArray208(v.x,0)*OpArray208(v.x,10))*OpArray208(v.x,15))-((OpArray208(v.x,0)*OpArray208(v.x,11))*OpArray208(v.x,14)))-((OpArray208(v.x,8)*OpArray208(v.x,2))*OpArray208(v.x,15)))+((OpArray208(v.x,8)*OpArray208(v.x,3))*OpArray208(v.x,14)))+((OpArray208(v.x,12)*OpArray208(v.x,2))*OpArray208(v.x,11)))-((OpArray208(v.x,12)*OpArray208(v.x,3))*OpArray208(v.x,10)));
		#line 316 f19__ //BinaryOp
		OpArray208(out.x,9) = (-(((((((OpArray208(v.x,0)*OpArray208(v.x,9))*OpArray208(v.x,15))+((OpArray208(v.x,0)*OpArray208(v.x,11))*OpArray208(v.x,13)))+((OpArray208(v.x,8)*OpArray208(v.x,1))*OpArray208(v.x,15)))-((OpArray208(v.x,8)*OpArray208(v.x,3))*OpArray208(v.x,13)))-((OpArray208(v.x,12)*OpArray208(v.x,1))*OpArray208(v.x,11)))+((OpArray208(v.x,12)*OpArray208(v.x,3))*OpArray208(v.x,9))));
		#line 323 f19__ //BinaryOp
		OpArray208(out.x,13) = (((((((OpArray208(v.x,0)*OpArray208(v.x,9))*OpArray208(v.x,14))-((OpArray208(v.x,0)*OpArray208(v.x,10))*OpArray208(v.x,13)))-((OpArray208(v.x,8)*OpArray208(v.x,1))*OpArray208(v.x,14)))+((OpArray208(v.x,8)*OpArray208(v.x,2))*OpArray208(v.x,13)))+((OpArray208(v.x,12)*OpArray208(v.x,1))*OpArray208(v.x,10)))-((OpArray208(v.x,12)*OpArray208(v.x,2))*OpArray208(v.x,9)));
		#line 330 f19__ //BinaryOp
		OpArray208(out.x,2) = (((((((OpArray208(v.x,1)*OpArray208(v.x,6))*OpArray208(v.x,15))-((OpArray208(v.x,1)*OpArray208(v.x,7))*OpArray208(v.x,14)))-((OpArray208(v.x,5)*OpArray208(v.x,2))*OpArray208(v.x,15)))+((OpArray208(v.x,5)*OpArray208(v.x,3))*OpArray208(v.x,14)))+((OpArray208(v.x,13)*OpArray208(v.x,2))*OpArray208(v.x,7)))-((OpArray208(v.x,13)*OpArray208(v.x,3))*OpArray208(v.x,6)));
		#line 337 f19__ //BinaryOp
		OpArray208(out.x,6) = (-(((((((OpArray208(v.x,0)*OpArray208(v.x,6))*OpArray208(v.x,15))+((OpArray208(v.x,0)*OpArray208(v.x,7))*OpArray208(v.x,14)))+((OpArray208(v.x,4)*OpArray208(v.x,2))*OpArray208(v.x,15)))-((OpArray208(v.x,4)*OpArray208(v.x,3))*OpArray208(v.x,14)))-((OpArray208(v.x,12)*OpArray208(v.x,2))*OpArray208(v.x,7)))+((OpArray208(v.x,12)*OpArray208(v.x,3))*OpArray208(v.x,6))));
		#line 344 f19__ //BinaryOp
		OpArray208(out.x,10) = (((((((OpArray208(v.x,0)*OpArray208(v.x,5))*OpArray208(v.x,15))-((OpArray208(v.x,0)*OpArray208(v.x,7))*OpArray208(v.x,13)))-((OpArray208(v.x,4)*OpArray208(v.x,1))*OpArray208(v.x,15)))+((OpArray208(v.x,4)*OpArray208(v.x,3))*OpArray208(v.x,13)))+((OpArray208(v.x,12)*OpArray208(v.x,1))*OpArray208(v.x,7)))-((OpArray208(v.x,12)*OpArray208(v.x,3))*OpArray208(v.x,5)));
		#line 351 f19__ //BinaryOp
		OpArray208(out.x,14) = (-(((((((OpArray208(v.x,0)*OpArray208(v.x,5))*OpArray208(v.x,14))+((OpArray208(v.x,0)*OpArray208(v.x,6))*OpArray208(v.x,13)))+((OpArray208(v.x,4)*OpArray208(v.x,1))*OpArray208(v.x,14)))-((OpArray208(v.x,4)*OpArray208(v.x,2))*OpArray208(v.x,13)))-((OpArray208(v.x,12)*OpArray208(v.x,1))*OpArray208(v.x,6)))+((OpArray208(v.x,12)*OpArray208(v.x,2))*OpArray208(v.x,5))));
		#line 358 f19__ //BinaryOp
		OpArray208(out.x,3) = (-(((((((OpArray208(v.x,1)*OpArray208(v.x,6))*OpArray208(v.x,11))+((OpArray208(v.x,1)*OpArray208(v.x,7))*OpArray208(v.x,10)))+((OpArray208(v.x,5)*OpArray208(v.x,2))*OpArray208(v.x,11)))-((OpArray208(v.x,5)*OpArray208(v.x,3))*OpArray208(v.x,10)))-((OpArray208(v.x,9)*OpArray208(v.x,2))*OpArray208(v.x,7)))+((OpArray208(v.x,9)*OpArray208(v.x,3))*OpArray208(v.x,6))));
		#line 365 f19__ //BinaryOp
		OpArray208(out.x,7) = (((((((OpArray208(v.x,0)*OpArray208(v.x,6))*OpArray208(v.x,11))-((OpArray208(v.x,0)*OpArray208(v.x,7))*OpArray208(v.x,10)))-((OpArray208(v.x,4)*OpArray208(v.x,2))*OpArray208(v.x,11)))+((OpArray208(v.x,4)*OpArray208(v.x,3))*OpArray208(v.x,10)))+((OpArray208(v.x,8)*OpArray208(v.x,2))*OpArray208(v.x,7)))-((OpArray208(v.x,8)*OpArray208(v.x,3))*OpArray208(v.x,6)));
		#line 372 f19__ //BinaryOp
		OpArray208(out.x,11) = (-(((((((OpArray208(v.x,0)*OpArray208(v.x,5))*OpArray208(v.x,11))+((OpArray208(v.x,0)*OpArray208(v.x,7))*OpArray208(v.x,9)))+((OpArray208(v.x,4)*OpArray208(v.x,1))*OpArray208(v.x,11)))-((OpArray208(v.x,4)*OpArray208(v.x,3))*OpArray208(v.x,9)))-((OpArray208(v.x,8)*OpArray208(v.x,1))*OpArray208(v.x,7)))+((OpArray208(v.x,8)*OpArray208(v.x,3))*OpArray208(v.x,5))));
		#line 379 f19__ //BinaryOp
		OpArray208(out.x,15) = (((((((OpArray208(v.x,0)*OpArray208(v.x,5))*OpArray208(v.x,10))-((OpArray208(v.x,0)*OpArray208(v.x,6))*OpArray208(v.x,9)))-((OpArray208(v.x,4)*OpArray208(v.x,1))*OpArray208(v.x,10)))+((OpArray208(v.x,4)*OpArray208(v.x,2))*OpArray208(v.x,9)))+((OpArray208(v.x,8)*OpArray208(v.x,1))*OpArray208(v.x,6)))-((OpArray208(v.x,8)*OpArray208(v.x,2))*OpArray208(v.x,5)));
		#line 386 f19__ //BinaryOp
		det = ((((OpArray208(v.x,0)*OpArray208(out.x,0))+(OpArray208(v.x,1)*OpArray208(out.x,4)))+(OpArray208(v.x,2)*OpArray208(out.x,8)))+(OpArray208(v.x,3)*OpArray208(out.x,12)));
		#line 388 f19__ //If
		if((det==0)){
			#line 389 f19__ //Call
			Print126(str{30,(i8*)"Error: Cannot inverse det = 0\n"});
			#line 390 f19__ //Return
			return Mat4209(0);
		};
		#line 393 f19__ //BinaryOp
		det = (1.0/det);
		while((i<16)){
			#line 396 f19__ //BinaryOp
			OpArray208(out.x,i) = (OpArray208(out.x,i)*det);
			#line 397 f19__ //BinaryOp
			i = (i+1);
		};
		#line 400 f19__ //Return
		return out;
}
			#line 17 f20__ //FuncDef
	i32 Char480(str char){
		#line 18 f20__ //Call
		Assert338((char.length==1),str{24,(i8*)"Exepcted str of length 1"});
		#line 19 f20__ //Return
		return (*char.chars);
}
	#line 21 f20__ //FuncDef
	Lexer Lexer481(str file){
		Lexer self={0};
		#line 24 f20__ //BinaryOp
		self.file = FileOpen(file.chars,str{1,(i8*)"r"}.chars);
		#line 25 f20__ //If
		if(self.file){
			#line 27 f20__ //Call
			Get483(self);
			#line 28 f20__ //Call
			Consume488(self);
		}else{
			#line 31 f20__ //Call
			Print126(add130(add130(str{21,(i8*)"Failed to open file \'"},file),str{1,(i8*)"\'"}));
		};
		#line 33 f20__ //Return
		return self;
}
	#line 36 f20__ //FuncDef
	i32 Peek482(Lexer& self){
		#line 38 f20__ //Return
		return self.nextCharacter;
}
	#line 40 f20__ //FuncDef
	i32 Get483(Lexer& self){
		i32 character=self.nextCharacter;
		#line 43 f20__ //BinaryOp
		self.nextCharacter = FileGetChar(self.file);
		#line 44 f20__ //If
		if((self.nextCharacter==(-1))){
			#line 45 f20__ //BinaryOp
			self.nextCharacter = 0;
		};
		#line 47 f20__ //Return
		return character;
}
	;
	;
	;
	#line 56 f20__ //FuncDef
		#line 57 f20__ //FuncDef
		#line 58 f20__ //FuncDef
		#line 59 f20__ //FuncDef
		#line 62 f20__ //FuncDef
	void Consume488(Lexer& self){
		#line 64 f20__ //BinaryOp
		self.token = Next489(self);
}
	#line 66 f20__ //FuncDef
	Token Next489(Lexer& self){
		while(isspace(Peek482(self))){
			#line 70 f20__ //Call
			Get483(self);
		};
		#line 73 f20__ //If
		if((isalpha(Peek482(self))||(Peek482(self)==Char480(str{1,(i8*)"_"})))){
			DynamicArray10 data={0};
			#line 76 f20__ //Call
			Init1832(data);
			while(isalnum(Peek482(self))){
				#line 78 f20__ //Call
				Push1833(data,i8364(Get483(self)));
			};
			#line 80 f20__ //Call
			Push1833(data,0);
			Token t={0};
			#line 83 f20__ //BinaryOp
			t.Type = LexerIdentifier;
			#line 84 f20__ //BinaryOp
			t.string.chars = data.elements;
			#line 85 f20__ //BinaryOp
			t.string.length = (data.length-1);
			#line 86 f20__ //Return
			return t;
		};
		#line 89 f20__ //If
		if((((Peek482(self)==Char480(str{1,(i8*)"."}))||isdigit(Peek482(self)))||i32355((Peek482(self)==Char480(str{1,(i8*)"-"}))))){
			f64 num=0;
			f64 m=10;
			#line 93 f20__ //If
			if((Peek482(self)==Char480(str{1,(i8*)"-"}))){
				#line 95 f20__ //Call
				Get483(self);
				#line 96 f20__ //BinaryOp
				m = (-m);
			};
			while(isdigit(Peek482(self))){
				#line 100 f20__ //BinaryOp
				num = ((num*m)+f64412((Get483(self)-Char480(str{1,(i8*)"0"}))));
			};
			#line 102 f20__ //If
			if((Peek482(self)==Char480(str{1,(i8*)"."}))){
				#line 104 f20__ //Call
				Get483(self);
			};
			#line 106 f20__ //BinaryOp
			m = (f64408(1.0)/m);
			while(isdigit(Peek482(self))){
				#line 108 f20__ //BinaryOp
				num = (num+(f64412((Get483(self)-Char480(str{1,(i8*)"0"})))*m));
				#line 109 f20__ //BinaryOp
				m = (m/f64408(10));
			};
			Token t={0};
			#line 112 f20__ //BinaryOp
			t.Type = LexerNumber;
			#line 113 f20__ //BinaryOp
			t.number = num;
			#line 114 f20__ //Return
			return t;
		};
		#line 116 f20__ //If
		if((Peek482(self)==Char480(str{1,(i8*)"\'"}))){
			#line 118 f20__ //Call
			Get483(self);
			DynamicArray10 data={0};
			#line 121 f20__ //Call
			Init1832(data);
			while((Peek482(self)!=Char480(str{1,(i8*)"\'"}))){
				#line 124 f20__ //Call
				Push1833(data,i8364(Get483(self)));
			};
			#line 127 f20__ //Call
			Push1833(data,0);
			#line 128 f20__ //Call
			Get483(self);
			Token t={0};
			#line 131 f20__ //BinaryOp
			t.Type = LexerString;
			#line 132 f20__ //BinaryOp
			t.string.chars = data.elements;
			#line 133 f20__ //BinaryOp
			t.string.length = (data.length-1);
			#line 134 f20__ //Return
			return t;
		};
		Token t={0};
		#line 137 f20__ //BinaryOp
		t.Type = Get483(self);
		#line 138 f20__ //Return
		return t;
}
		#line 9 f21__ //FuncDef
		#line 10 f21__ //FuncDef
			#line 18 f21__ //FuncDef
		#line 19 f21__ //FuncDef
			#line 21 f21__ //EnumDef
	;
		#line 34 f21__ //FuncDef
					#line 43 f21__ //FuncDef
		#line 44 f21__ //FuncDef
		#line 45 f21__ //FuncDef
		#line 46 f21__ //EnumDef
	;
		#line 66 f21__ //FuncDef
		#line 67 f21__ //FuncDef
		#line 68 f21__ //FuncDef
			#line 73 f21__ //FuncDef
		#line 74 f21__ //FuncDef
		#line 75 f21__ //FuncDef
		#line 76 f21__ //FuncDef
				#line 84 f21__ //FuncDef
		#line 85 f21__ //FuncDef
			#line 87 f21__ //FuncDef
		#line 88 f21__ //FuncDef
			#line 90 f21__ //FuncDef
		#line 91 f21__ //FuncDef
			#line 93 f21__ //FuncDef
		#line 94 f21__ //FuncDef
			#line 101 f21__ //FuncDef
		#line 102 f21__ //FuncDef
			#line 110 f21__ //FuncDef
		#line 111 f21__ //FuncDef
			#line 118 f21__ //FuncDef
		#line 119 f21__ //FuncDef
			#line 127 f21__ //FuncDef
		#line 128 f21__ //FuncDef
			#line 138 f21__ //FuncDef
		#line 139 f21__ //FuncDef
			#line 146 f21__ //FuncDef
		#line 147 f21__ //FuncDef
			#line 154 f21__ //FuncDef
		#line 155 f21__ //FuncDef
			#line 162 f21__ //FuncDef
		#line 163 f21__ //FuncDef
			#line 170 f21__ //FuncDef
		#line 171 f21__ //FuncDef
			#line 178 f21__ //FuncDef
		#line 179 f21__ //FuncDef
		#line 180 f21__ //EnumDef
	;
			#line 202 f21__ //FuncDef
		#line 203 f21__ //FuncDef
		#line 204 f21__ //EnumDef
	;
		#line 221 f21__ //FuncDef
		#line 222 f21__ //FuncDef
		#line 223 f21__ //FuncDef
							#line 239 f21__ //FuncDef
		#line 240 f21__ //FuncDef
		#line 241 f21__ //FuncDef
		#line 242 f21__ //FuncDef
		#line 243 f21__ //FuncDef
		#line 244 f21__ //FuncDef
			#line 254 f21__ //FuncDef
		#line 255 f21__ //FuncDef
			#line 273 f21__ //FuncDef
		#line 274 f21__ //FuncDef
		#line 275 f21__ //EnumDef
	;
	#line 279 f21__ //EnumDef
	;
	#line 284 f21__ //EnumDef
	;
		#line 304 f21__ //FuncDef
		#line 305 f21__ //FuncDef
			#line 329 f21__ //FuncDef
		#line 330 f21__ //FuncDef
		#line 331 f21__ //FuncDef
		#line 332 f21__ //FuncDef
		#line 333 f21__ //FuncDef
		#line 334 f21__ //FuncDef
		#line 335 f21__ //FuncDef
		#line 336 f21__ //FuncDef
		#line 337 f21__ //FuncDef
		#line 338 f21__ //FuncDef
		#line 339 f21__ //FuncDef
		#line 340 f21__ //FuncDef
			#line 346 f21__ //FuncDef
		#line 347 f21__ //FuncDef
		#line 348 f21__ //FuncDef
		#line 349 f21__ //FuncDef
		#line 350 f21__ //FuncDef
		#line 351 f21__ //EnumDef
	;
					#line 399 f21__ //FuncDef
		#line 400 f21__ //FuncDef
		#line 401 f21__ //FuncDef
		#line 402 f21__ //FuncDef
		#line 403 f21__ //FuncDef
		#line 404 f21__ //FuncDef
		#line 405 f21__ //FuncDef
		#line 406 f21__ //FuncDef
		#line 407 f21__ //FuncDef
		#line 408 f21__ //FuncDef
		#line 409 f21__ //FuncDef
		#line 410 f21__ //FuncDef
		#line 411 f21__ //FuncDef
		#line 412 f21__ //FuncDef
		#line 413 f21__ //FuncDef
		#line 414 f21__ //FuncDef
		#line 415 f21__ //FuncDef
			#line 417 f21__ //EnumDef
	;
	#line 427 f21__ //EnumDef
	;
	#line 437 f21__ //EnumDef
	;
			#line 456 f21__ //FuncDef
		#line 457 f21__ //FuncDef
				#line 481 f21__ //FuncDef
		#line 482 f21__ //FuncDef
			#line 488 f21__ //FuncDef
		#line 489 f21__ //FuncDef
		#line 490 f21__ //FuncDef
		#line 491 f21__ //FuncDef
			#line 497 f21__ //FuncDef
		#line 498 f21__ //FuncDef
		#line 499 f21__ //FuncDef
		#line 500 f21__ //FuncDef
			#line 505 f21__ //FuncDef
					#line 537 f21__ //FuncDef
		#line 538 f21__ //FuncDef
		#line 539 f21__ //FuncDef
		#line 540 f21__ //FuncDef
		#line 541 f21__ //FuncDef
		#line 542 f21__ //FuncDef
		#line 543 f21__ //FuncDef
		#line 544 f21__ //FuncDef
		#line 545 f21__ //FuncDef
		#line 546 f21__ //FuncDef
		#line 547 f21__ //FuncDef
		#line 548 f21__ //FuncDef
		#line 549 f21__ //FuncDef
		#line 550 f21__ //FuncDef
		#line 551 f21__ //FuncDef
		#line 552 f21__ //FuncDef
		#line 553 f21__ //FuncDef
			#line 566 f21__ //FuncDef
		#line 567 f21__ //FuncDef
		#line 568 f21__ //FuncDef
		#line 569 f21__ //FuncDef
		#line 570 f21__ //FuncDef
		#line 571 f21__ //FuncDef
		#line 572 f21__ //EnumDef
	;
		#line 606 f21__ //FuncDef
		#line 607 f21__ //FuncDef
		#line 608 f21__ //FuncDef
		#line 609 f21__ //FuncDef
				#line 619 f21__ //FuncDef
		#line 620 f21__ //FuncDef
				#line 653 f21__ //FuncDef
		#line 654 f21__ //FuncDef
		#line 655 f21__ //FuncDef
		#line 656 f21__ //FuncDef
			#line 660 f21__ //FuncDef
		#line 661 f21__ //FuncDef
				#line 671 f21__ //FuncDef
		#line 672 f21__ //FuncDef
		#line 673 f21__ //FuncDef
		#line 674 f21__ //FuncDef
		#line 675 f21__ //FuncDef
				#line 687 f21__ //FuncDef
		#line 688 f21__ //FuncDef
		#line 689 f21__ //FuncDef
			#line 697 f21__ //FuncDef
		#line 698 f21__ //FuncDef
		#line 699 f21__ //FuncDef
				#line 722 f21__ //FuncDef
		#line 723 f21__ //FuncDef
		#line 724 f21__ //FuncDef
		#line 725 f21__ //FuncDef
			#line 751 f21__ //FuncDef
		#line 752 f21__ //FuncDef
		#line 753 f21__ //FuncDef
		#line 754 f21__ //FuncDef
		#line 755 f21__ //FuncDef
		#line 756 f21__ //FuncDef
		#line 757 f21__ //FuncDef
		#line 758 f21__ //FuncDef
		#line 759 f21__ //FuncDef
		#line 760 f21__ //FuncDef
		#line 761 f21__ //FuncDef
		#line 762 f21__ //FuncDef
		#line 763 f21__ //FuncDef
		#line 764 f21__ //FuncDef
		#line 765 f21__ //FuncDef
		#line 766 f21__ //FuncDef
		#line 767 f21__ //FuncDef
		#line 768 f21__ //FuncDef
		#line 769 f21__ //FuncDef
		#line 770 f21__ //FuncDef
			#line 776 f21__ //FuncDef
		#line 777 f21__ //FuncDef
		#line 778 f21__ //FuncDef
		#line 779 f21__ //FuncDef
			#line 789 f21__ //FuncDef
		#line 790 f21__ //FuncDef
		#line 791 f21__ //FuncDef
		#line 792 f21__ //FuncDef
		#line 793 f21__ //FuncDef
		#line 794 f21__ //FuncDef
		#line 795 f21__ //FuncDef
		#line 796 f21__ //FuncDef
		#line 797 f21__ //FuncDef
				#line 804 f21__ //FuncDef
		#line 805 f21__ //FuncDef
		#line 806 f21__ //FuncDef
		#line 807 f21__ //FuncDef
		#line 808 f21__ //FuncDef
				#line 815 f21__ //FuncDef
		#line 816 f21__ //FuncDef
		#line 817 f21__ //FuncDef
		#line 818 f21__ //FuncDef
		#line 819 f21__ //FuncDef
			#line 18 f22__ //FuncDef
	Shader Shader764(str vs,str fs){
		Shader shader={0};
		#line 21 f22__ //BinaryOp
		shader.id = glCreateProgram();
		#line 22 f22__ //BinaryOp
		shader.fs = fs;
		#line 23 f22__ //BinaryOp
		shader.vs = vs;
		u32 vsshader=CompileShader767(GL_VERTEX_SHADER,ReadFile769(vs),vs);
		u32 fsshader=CompileShader767(GL_FRAGMENT_SHADER,ReadFile769(fs),fs);
		#line 28 f22__ //If
		if((!vsshader)){
			#line 29 f22__ //Call
			Error129(add130(str{18,(i8*)"Failed to compile "},vs));
		};
		#line 31 f22__ //If
		if((!fsshader)){
			#line 32 f22__ //Call
			Error129(add130(str{18,(i8*)"Failed to compile "},fs));
		};
		#line 35 f22__ //Call
		glAttachShader(shader.id,vsshader);
		#line 36 f22__ //Call
		glAttachShader(shader.id,fsshader);
		#line 38 f22__ //Call
		glDeleteShader(fsshader);
		#line 39 f22__ //Call
		glDeleteShader(vsshader);
		#line 41 f22__ //Call
		glLinkProgram(shader.id);
		i32 status={0};
		#line 44 f22__ //Call
		glGetProgramiv(shader.id,GL_LINK_STATUS,(&status));
		#line 46 f22__ //If
		if((status==i32355(GL_FALSE))){
			i32 length={0};
			i8* buffer=Alloc0812(1024);
			#line 50 f22__ //Call
			glGetShaderInfoLog(shader.id,1024,(&length),buffer);
			#line 51 f22__ //Call
			Error129(str{15,(i8*)"Linking failed "});
			#line 52 f22__ //Call
			Error129(String131(buffer,i64348(length)));
		};
		u32 cameraIndex=glGetUniformBlockIndex(shader.id,str{6,(i8*)"Camera"}.chars);
		#line 56 f22__ //If
		if((cameraIndex!=GL_INVALID_INDEX)){
			#line 58 f22__ //Call
			glUniformBlockBinding(shader.id,cameraIndex,0);
		};
		u32 transformIndex=glGetUniformBlockIndex(shader.id,str{9,(i8*)"Transform"}.chars);
		#line 61 f22__ //If
		if((transformIndex!=GL_INVALID_INDEX)){
			#line 63 f22__ //Call
			glUniformBlockBinding(shader.id,transformIndex,1);
		};
		#line 66 f22__ //Call
		GLError765(str{13,(i8*)"Pre Add error"});
		#line 67 f22__ //Call
		AddUniforms768(shader);
		#line 68 f22__ //Call
		GLError765(str{14,(i8*)"post Add error"});
		#line 70 f22__ //Return
		return shader;
}
	#line 73 f22__ //FuncDef
	void GLError765(str string){
		u32 err=glGetError();
		#line 76 f22__ //If
		if((err!=GL_NO_ERROR)){
			#line 78 f22__ //Call
			Error129(string);
			#line 79 f22__ //If
			if((err==GL_INVALID_ENUM)){
				#line 80 f22__ //Call
				Error129(str{24,(i8*)"OpenGL: GL_INVALID_ENUM\n"});
			};
			#line 82 f22__ //If
			if((err==GL_INVALID_OPERATION)){
				#line 83 f22__ //Call
				Error129(str{29,(i8*)"OpenGL: GL_INVALID_OPERATION\n"});
			};
			#line 85 f22__ //If
			if((err==GL_INVALID_VALUE)){
				#line 86 f22__ //Call
				Error129(str{25,(i8*)"OpenGL: GL_INVALID_VALUE\n"});
			};
			#line 88 f22__ //If
			if((err==GL_OUT_OF_MEMORY)){
				#line 89 f22__ //Call
				Error129(str{25,(i8*)"OpenGL: GL_OUT_OF_MEMORY\n"});
			};
		};
}
	#line 94 f22__ //FuncDef
	void Bind766(Shader shader){
		#line 96 f22__ //Call
		GLError765(str{13,(i8*)"Pre use error"});
		#line 97 f22__ //Call
		glUseProgram(shader.id);
		#line 98 f22__ //Call
		GLError765(str{16,(i8*)"Shader use error"});
}
	#line 101 f22__ //FuncDef
	u32 CompileShader767(u32 shaderType,str data,str file){
		#line 103 f22__ //If
		if((data.length==0)){
			#line 104 f22__ //Return
			return 0;
		};
		i8* source=data.chars;
		u32 shader=glCreateShader(shaderType);
		i32 s=1;
		i32* ss={0};
		#line 112 f22__ //Call
		glShaderSource(shader,s,(&source),ss);
		#line 114 f22__ //Call
		glCompileShader(shader);
		i32 status={0};
		#line 117 f22__ //Call
		glGetShaderiv(shader,GL_COMPILE_STATUS,(&status));
		#line 119 f22__ //If
		if((status==i32355(GL_FALSE))){
			#line 121 f22__ //Call
			Error129(file);
			#line 122 f22__ //Call
			Error129(str{4,(i8*)"...\n"});
			i8* buffer=Alloc0812(1024);
			i32 length={0};
			#line 126 f22__ //Call
			glGetShaderInfoLog(shader,2048,(&length),buffer);
			i64 b={0};
			#line 128 f22__ //If
			if((length>0)){
				str string={0};
				#line 131 f22__ //BinaryOp
				string.chars = buffer;
				#line 132 f22__ //BinaryOp
				string.length = i64348(length);
				#line 133 f22__ //Call
				Error129(add130(add130(add130(string,str{5,(i8*)"End: "}),file),str{1,(i8*)"\n"}));
			};
			#line 136 f22__ //Call
			glDeleteShader(shader);
			#line 137 f22__ //BinaryOp
			shader = 0;
		};
		#line 143 f22__ //Return
		return shader;
}
	#line 146 f22__ //FuncDef
	void AddUniforms768(Shader shader){
		i32 activeUniforms=0;
		Array9 tname={0};
		#line 151 f22__ //Call
		Init0815(tname,256);
		#line 153 f22__ //Call
		glGetProgramiv(shader.id,GL_ACTIVE_UNIFORMS,(&activeUniforms));
		#line 154 f22__ //Call
		GLError765(str{9,(i8*)"get error"});
		i32 i={0};
		while((i<activeUniforms)){
			u32 t={0};
			i32 size={0};
			i32 len={0};
			#line 165 f22__ //Call
			glGetActiveUniform(shader.id,u32388(i),256,(&len),(&size),(&t),tname.elements);
			#line 166 f22__ //BinaryOp
			tname.length = i64348(len);
			i32 loc=glGetUniformLocation(shader.id,tname.elements);
			#line 169 f22__ //If
			if((t==GL_SAMPLER_2D)){
				i64 num=0;
				i64 mult=1;
				while(mult){
					i64 n=(i64347(OpArray0816(tname,i64348((len-1))))-48);
					#line 176 f22__ //If
					if(((n>=0)&&(n<10))){
						#line 178 f22__ //BinaryOp
						num = (num+(n*mult));
						#line 179 f22__ //BinaryOp
						mult = (mult*10);
						#line 180 f22__ //BinaryOp
						len = (len-1);
					}else{
						#line 184 f22__ //BinaryOp
						mult = 0;
						#line 185 f22__ //Call
						glProgramUniform1i(shader.id,loc,i32357(num));
						#line 186 f22__ //Call
						GLError765(str{10,(i8*)"get 2error"});
						str t={0};
						#line 188 f22__ //BinaryOp
						t.chars = tname.elements;
						#line 189 f22__ //BinaryOp
						t.length = tname.length;
					};
				};
			};
			#line 209 f22__ //BinaryOp
			i = (i+1);
		};
}
	#line 213 f22__ //FuncDef
	str ReadFile769(str file){
		str r={0};
		File* f=FileOpen(file.chars,str{1,(i8*)"r"}.chars);
		#line 218 f22__ //If
		if((!f)){
			#line 219 f22__ //Call
			Error129(add130(file,str{18,(i8*)" couldnt be opened"}));
			#line 220 f22__ //Return
			return r;
		};
		#line 223 f22__ //BinaryOp
		r.chars = Alloc0812(10000);
		u64 newLen=FileRead(r.chars,1,10000,f);
		#line 225 f22__ //BinaryOp
		r.length = i64346(newLen);
		#line 226 f22__ //BinaryOp
		(*(r.chars+r.length)) = 0;
		#line 227 f22__ //Return
		return r;
}
		#line 16 f23__ //FuncDef
	Mat4 GetRotationMatrix771(Quaternion q){
		Mat4 r={0};
		#line 19 f23__ //BinaryOp
		OpArray208(OpArray207(r,0),0) = ((1-((2*q.y)*q.y))-((2*q.z)*q.z));
		#line 20 f23__ //BinaryOp
		OpArray208(OpArray207(r,0),1) = (((2*q.x)*q.y)+((2*q.w)*q.z));
		#line 21 f23__ //BinaryOp
		OpArray208(OpArray207(r,0),2) = (((2*q.x)*q.z)-((2*q.w)*q.y));
		#line 22 f23__ //BinaryOp
		OpArray208(OpArray207(r,0),3) = 0;
		#line 24 f23__ //BinaryOp
		OpArray208(OpArray207(r,1),0) = (((2*q.x)*q.y)-((2*q.w)*q.z));
		#line 25 f23__ //BinaryOp
		OpArray208(OpArray207(r,1),1) = ((1-((2*q.x)*q.x))-((2*q.z)*q.x));
		#line 26 f23__ //BinaryOp
		OpArray208(OpArray207(r,1),2) = (((2*q.y)*q.z)+((2*q.w)*q.x));
		#line 27 f23__ //BinaryOp
		OpArray208(OpArray207(r,1),3) = 0;
		#line 29 f23__ //BinaryOp
		OpArray208(OpArray207(r,2),0) = (((2*q.x)*q.z)+((2*q.w)*q.y));
		#line 30 f23__ //BinaryOp
		OpArray208(OpArray207(r,2),1) = (((2*q.y)*q.z)-((2*q.w)*q.x));
		#line 31 f23__ //BinaryOp
		OpArray208(OpArray207(r,2),2) = ((1-((2*q.x)*q.x))-((2*q.y)*q.y));
		#line 32 f23__ //BinaryOp
		OpArray208(OpArray207(r,2),3) = 0;
		#line 34 f23__ //BinaryOp
		OpArray208(OpArray207(r,3),0) = 0;
		#line 35 f23__ //BinaryOp
		OpArray208(OpArray207(r,3),1) = 0;
		#line 36 f23__ //BinaryOp
		OpArray208(OpArray207(r,3),2) = 0;
		#line 37 f23__ //BinaryOp
		OpArray208(OpArray207(r,3),3) = 1;
		#line 39 f23__ //Return
		return r;
}
	#line 42 f23__ //FuncDef
	Quaternion CreateQuaternion772(Vec3 axis,f32 angle){
		Quaternion r={0};
		#line 45 f23__ //BinaryOp
		r.w = cos423((angle/2));
		#line 46 f23__ //BinaryOp
		r.x = (axis.x*sin424((angle/2)));
		#line 47 f23__ //BinaryOp
		r.y = (axis.y*sin424((angle/2)));
		#line 48 f23__ //BinaryOp
		r.z = (axis.z*sin424((angle/2)));
		#line 49 f23__ //Return
		return r;
}
	#line 52 f23__ //FuncDef
	Quaternion CreateQuaternion773(){
		Quaternion r={0};
		#line 55 f23__ //BinaryOp
		r.w = 1.0;
		#line 56 f23__ //BinaryOp
		r.x = 0;
		#line 57 f23__ //BinaryOp
		r.y = 0;
		#line 58 f23__ //BinaryOp
		r.z = 0;
		#line 59 f23__ //Return
		return r;
}
	#line 62 f23__ //FuncDef
	void normalize774(Quaternion& v){
		f32 magnitude=sqrt421(((((v.w*v.w)+(v.x*v.x))+(v.y*v.y))+(v.z*v.z)));
		#line 65 f23__ //BinaryOp
		v.w = (v.w/magnitude);
		#line 66 f23__ //BinaryOp
		v.x = (v.x/magnitude);
		#line 67 f23__ //BinaryOp
		v.y = (v.y/magnitude);
		#line 68 f23__ //BinaryOp
		v.z = (v.z/magnitude);
}
	#line 71 f23__ //FuncDef
	Quaternion mul775(Quaternion lhs,Quaternion rhs){
		Quaternion r={0};
		#line 74 f23__ //BinaryOp
		r.w = ((((lhs.w*rhs.w)-(lhs.x*rhs.x))-(lhs.y*rhs.y))-(lhs.z*rhs.z));
		#line 75 f23__ //BinaryOp
		r.x = ((((lhs.w*rhs.x)+(lhs.x*rhs.w))+(lhs.y*rhs.z))-(lhs.z*rhs.y));
		#line 76 f23__ //BinaryOp
		r.y = ((((lhs.w*rhs.y)-(lhs.x*rhs.z))+(lhs.y*rhs.w))+(lhs.z*rhs.x));
		#line 77 f23__ //BinaryOp
		r.z = ((((lhs.w*rhs.z)+(lhs.x*rhs.y))-(lhs.y*rhs.x))+(lhs.z*rhs.w));
		#line 78 f23__ //Return
		return r;
}
		#line 5 f24__ //FuncDef
		#line 6 f24__ //FuncDef
		#line 7 f24__ //FuncDef
		#line 8 f24__ //FuncDef
		#line 9 f24__ //FuncDef
		#line 10 f24__ //FuncDef
		#line 11 f24__ //FuncDef
		#line 12 f24__ //FuncDef
		#line 13 f24__ //FuncDef
		#line 23 f24__ //FuncDef
		;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
	;
