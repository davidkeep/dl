//Mesh struct
//{
//    vertices Array(PositionTextureColorColor)
//    indices Array(u16)

//    material Material
//    vao u32
//    buffer u32
//    index u32
//    color Vec4
//    count u32
//}

////Mesh fn(entity Entity, renderer ref Renderer) Mesh^
////{
////    r Mesh^ = &AddComponent(Mesh, entity)
////    ^r = Mesh(renderer)
////    return r
////}

//Mesh fn renderer ref Renderer => Mesh
//{
//    mesh Mesh

//    glGenBuffers(1, &mesh.buffer)
//    glGenBuffers(1, &mesh.index)
//    glGenVertexArrays(1, &mesh.vao)

//    mesh.material.shader = Shader(renderer, 'shaders/Antialiased.vs', 'shaders/Antialiased.fs')
//    mesh.material.texture.id = 0
//    mesh.count = u32(0)

//    glBindVertexArray(mesh.vao)
//    glBindBuffer(GL_ARRAY_BUFFER, mesh.buffer)
//    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, mesh.index)

//    glEnableVertexAttribArray(0)
//    glEnableVertexAttribArray(1)
//    glEnableVertexAttribArray(2)
//    glEnableVertexAttribArray(3)

//    glVertexAttribPointer(0, cast(i32, 3), GL_FLOAT, GL_FALSE, cast(i32, (PositionTextureColorColor).size), cast(voidptr, 0))
//    glVertexAttribPointer(1, cast(i32, 2), GL_FLOAT, GL_FALSE, cast(i32, (PositionTextureColorColor).size), cast(voidptr, f32.size * 3))
//    glVertexAttribPointer(2, cast(i32, 4), GL_FLOAT, GL_FALSE, cast(i32, (PositionTextureColorColor).size), cast(voidptr, f32.size * 5))
//    glVertexAttribPointer(3, cast(i32, 4), GL_FLOAT, GL_FALSE, cast(i32, (PositionTextureColorColor).size), cast(voidptr, f32.size * 9))
//    glBindVertexArray(0)

//    glBindBuffer(GL_ARRAY_BUFFER, 0)
//    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0)
//    GLError('Mesh') 
//    return mesh
//}

//CalculateBuffers fn mesh ref Mesh => 
//{
//    glBindBuffer(GL_ARRAY_BUFFER, mesh.buffer)
//    glBufferData(GL_ARRAY_BUFFER, i64(PositionTextureColorColor.size) * mesh.vertices.length, cast(voidptr, mesh.vertices.elements), GL_DYNAMIC_DRAW)

//    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, mesh.index)
//    glBufferData(GL_ELEMENT_ARRAY_BUFFER, i64(u16.size) * mesh.indices.length, cast(voidptr, mesh.indices.elements), GL_DYNAMIC_DRAW)
//    GLError('Screen space mesh') 
//    glBindBuffer(GL_ARRAY_BUFFER, 0)
//    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0)
//}

////Screen space cirle requires a screenspace vertex shader
//MeshScreenSpaceCircle fn mesh ref Mesh, position Vec3, radius f32, color Vec4
//{
//    Init(mesh.vertices, 4)
//    Init(mesh.indices, 6)
//    mesh.count = u32(6)

//    mesh.indices[0] = 0
//    mesh.indices[1] = 1 
//    mesh.indices[2] = 2
//    mesh.indices[3] = 2
//    mesh.indices[4] = 3
//    mesh.indices[5] = 0

//    mesh.vertices[0].position = position
//    mesh.vertices[1].position = position
//    mesh.vertices[2].position = position
//    mesh.vertices[3].position = position

//    mesh.vertices[0].texture = Vec2(-1, -1)
//    mesh.vertices[1].texture = Vec2(-1,  1)
//    mesh.vertices[2].texture = Vec2( 1,  1)
//    mesh.vertices[3].texture = Vec2( 1, -1)

//    mesh.vertices[0].color = color
//    mesh.vertices[1].color = color
//    mesh.vertices[2].color = color
//    mesh.vertices[3].color = color

//    a Vec3 = position + Vec2(-1, 1)
//    b Vec3 = position + Vec2(-1, -1)
//    c Vec3 = position + Vec2(1, -1)
//    d Vec3 = position + Vec2(1, 1)

//    mesh.vertices[0].colorAlt = Vec4(a, radius)
//    mesh.vertices[1].colorAlt = Vec4(b, radius)
//    mesh.vertices[2].colorAlt = Vec4(c, radius)
//    mesh.vertices[3].colorAlt = Vec4(d, radius)
//    mesh.CalculateBuffers()
//}

//MeshCircle fn mesh ref Mesh, position Vec3, radius f32, color Vec4
//{
//    Init(mesh.vertices, 4)
//    Init(mesh.indices, 6)
//    mesh.count = u32(6)

//    mesh.indices[0] = 0
//    mesh.indices[1] = 1 
//    mesh.indices[2] = 2
//    mesh.indices[3] = 2
//    mesh.indices[4] = 3
//    mesh.indices[5] = 0

//    mesh.vertices[0].position = Vec3(-radius, -radius, 0)
//    mesh.vertices[1].position = Vec3(-radius,  radius, 0)
//    mesh.vertices[2].position = Vec3( radius,  radius, 0)
//    mesh.vertices[3].position = Vec3( radius, -radius, 0)

//    mesh.vertices[0].texture = Vec2(-1, -1)
//    mesh.vertices[1].texture = Vec2(-1,  1)
//    mesh.vertices[2].texture = Vec2( 1,  1)
//    mesh.vertices[3].texture = Vec2( 1, -1)

//    mesh.vertices[0].color = color
//    mesh.vertices[1].color = color
//    mesh.vertices[2].color = color
//    mesh.vertices[3].color = color

//    mesh.vertices[0].colorAlt = Vec4(0)
//    mesh.vertices[1].colorAlt = Vec4(0)
//    mesh.vertices[2].colorAlt = Vec4(0)
//    mesh.vertices[3].colorAlt = Vec4(0)
//    mesh.CalculateBuffers()
//}

//Max fn a f32, b f32 => f32
//{
//    if a > b {
//        return a
//    }
//    return b
//}

// MeshPolygon fn mesh ref Mesh, points ref Array(Vec2), radius f32, color Vec4
// {
//    count i64 = points.length
//    numIndices i64 = 12 * count + 3 * (count - 2)
//    numVertices i64 = (count - 2) * 2 + (4 * count) + 1

//     if count < 3 {
//         return
//     }
//         Print('\n'+ String(count) + '-' + String(numIndices) + '-' + String(numVertices) + '\n' )

//    mesh.count = u32(numIndices)

//    Init(mesh.vertices, numVertices)
//    Init(mesh.indices, numIndices)


//    offsets Array(Vec2)
//    normals Array(Vec2)
//    Init(offsets, count)
//    Init(normals, count)

//    for (0).i64() .. count
//    {
//        v0 Vec2 = points[(it - 1 + count) % count]
//        v1 Vec2 = points[it]
//        v2 Vec2 = points[(it + 1) % count]
        
//        n1 Vec2 = (v1 - v0)
//        n2 Vec2 = (v2 - v1)
//        n1 = Normalize(Vec2(-n1.y, n1.x))
//        n2 = Normalize(Vec2(-n2.y, n2.x))

//        offset Vec2 = (n1 + n2) * 1.0/((n1.x*n2.x + n1.y*n2.y) + 1.0)
//        offsets[it] = offset
//        normals[it] = n2
//    }
    
//    inset f32 = -Max(f32(0), 0.1 - radius)
//    outset f32 = 0.1 + radius - inset
    
//    vstart i64 = 0
//    vIndex i64 = 0
//    iIndex i64 = 0

//    mesh.vertices[vIndex].position = Vec3(points[0] - offsets[0] * inset)
//    mesh.vertices[vIndex].texture = Vec2(0)
//    mesh.vertices[vIndex].color = color
//    mesh.vertices[vIndex].colorAlt = Vec4(0)
//    vIndex = vIndex + 1

//    for (0).i64() .. count - 2
//    {
//        mesh.indices[iIndex] = u16(vstart)
//        mesh.indices[iIndex+1] = u16(vIndex)
//        mesh.indices[iIndex+2] = u16(vIndex+1)
//        iIndex = iIndex + 3

//        mesh.vertices[vIndex].position = Vec3(points[it + 1] + offsets[it + 1] * inset)
//        mesh.vertices[vIndex].texture = Vec2(0)
//        mesh.vertices[vIndex].color = color
//        mesh.vertices[vIndex].colorAlt = Vec4(0)

//        mesh.vertices[vIndex+1].position = Vec3(points[it + 2] + offsets[it + 2] * inset)
//        mesh.vertices[vIndex+1].texture = Vec2(0)
//        mesh.vertices[vIndex+1].color = color
//        mesh.vertices[vIndex+1].colorAlt = Vec4(0)
//        vIndex = vIndex + 2
//    }

//    llstart i64 = vIndex
    
//    for (0).i64() .. count
//    {
//        l i64 = (it+1) % count
//        vstart i64 = vIndex


//        inner0 Vec2 = (points[it] + offsets[it] * inset)
//        inner1 Vec2 = (points[l] + offsets[l] * inset)

//        mesh.vertices[vIndex].position = Vec3(inner0  + offsets[it] * outset)
//        mesh.vertices[vIndex].texture = offsets[it]
//        mesh.vertices[vIndex].color = color
//        mesh.vertices[vIndex].colorAlt = Vec4(0)

//        mesh.vertices[vIndex+1].position = Vec3(inner0)
//        mesh.vertices[vIndex+1].texture = Vec2(0)
//        mesh.vertices[vIndex+1].color = color
//        mesh.vertices[vIndex+1].colorAlt = Vec4(0)

//        mesh.vertices[vIndex+2].position = Vec3(inner0 + normals[it] * outset)
//        mesh.vertices[vIndex+2].texture = normals[it]
//        mesh.vertices[vIndex+2].color = color
//        mesh.vertices[vIndex+2].colorAlt = Vec4(0)

//        mesh.vertices[vIndex+3].position = Vec3(inner1 + normals[it] * outset)
//        mesh.vertices[vIndex+3].texture = normals[it]
//        mesh.vertices[vIndex+3].color = color
//        mesh.vertices[vIndex+3].colorAlt = Vec4(0)
//        vIndex = vIndex + 4

//        mesh.indices[iIndex] = u16(vstart + 0)
//        mesh.indices[iIndex+1] = u16(vstart + 1)
//        mesh.indices[iIndex+2] = u16(vstart + 2)

//        mesh.indices[iIndex+3] = u16(vstart + 1)
//        mesh.indices[iIndex+4] = u16(vstart + 2)
//        mesh.indices[iIndex+5] = u16(vstart + 3)

//        mesh.indices[iIndex+6] = u16(vstart + 1)
//        mesh.indices[iIndex+7] = u16(vstart + 3)
//        mesh.indices[iIndex+8] = u16(llstart + ((vstart - llstart + 5) % (count* 4)))

//        mesh.indices[iIndex+9] = u16(vstart + 0)
//        mesh.indices[iIndex+10] = u16(vstart + 1)
//        mesh.indices[iIndex+11] = u16(llstart + ((vstart - llstart - 1 + count* 4) % (count* 4)))
//        iIndex = iIndex + 12
//    }
//    mesh.CalculateBuffers()
//}
