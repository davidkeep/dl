@import {
    'Array.dl'
    'String.dl'
    'GL.dl'
    'Shader.dl'
    'Texture.dl'
    'Math.dl'
    'Renderer.dl'
    'Mesh.dl'
    'FileSystem.dl'
    'Sprite.dl'
    'Transform.dl'
    'Camera.dl'
    'World.dl'
    'window.dl'
    'Lexer.dl'
    'Archive.dl'
    'Editor.dl'
    'Spinec.dl'
    'Spine.dl'
}

GLFWWindow struct {

}
FileHandle struct {
}

@extern {
    putchar fn character i32 => i32

    dlMalloc  fn size i64 => ref i8  
    dlMallocZero fn size i64       => ref i8
    dlRealloc fn nmem ref i8, size i64    => ref i8
    dlMemcpy  fn dst ref i8, src ref i8, count i64 => ref i8

    dlMemset  fn dst ref i8, value i32, count i64  => ref i8
    sqrtf   fn f f32  => f32
    abort   fn
    Backtrace fn
    
    glfwCreateWindow fn width i32, height i32, title ref i8, monitor i64, share i64 => ref GLFWWindow
    glfwWindowShouldClose fn window ref GLFWWindow => i32
    glfwInit fn => i32
    glfwPollEvents fn
    glfwSwapBuffers fn window ref GLFWWindow

    FileOpen    fn filename ref i8, mode ref i8 => ref FileHandle
    FileClose   fn file ref FileHandle => u32
    GetLine     fn stream ref FileHandle, data ref i8, count i32 => ref i8
    FileRead    fn f ref i8, a u64, b u64, c ref FileHandle => u64
    FileGetChar fn file ref FileHandle => i32
    FileWrite   fn data ref i8, size u64, count u64, stream ref FileHandle => u64
    FileFlush   fn file ref FileHandle
    FileOut     fn => ref FileHandle
    FileError   fn => ref FileHandle
    FilePut     fn file ref FileHandle, data ref i8 => i32
    FlushOut    fn
}

//Option struct $Type
//{
//    value Type
//    exists i8
//}

//Set fn self ref Option(Str), value Str  
//{
//    self.dref.value = value
//    self.dref.exists = (0 == 0)
//}


Test fn self i64 => i64
{
    return self
}

//Stringify trait
//{
//    String fn self Stringify => Stringify
//}



//Print fn self Stringify
//{
//    Print(String(self))
//}

Print fn chars ref i8
{
    a ref i8
    a = chars

    value i32
    value = a.i32

    for value != 0 
    {
        value.putchar()
        a = a.PtrAdd(1)
        value = a.i32
    }
}


//Lamda struct $T {
//    context voidptr
//    func voidptr
//}

//Call fn lamda Lamda, args $T {
//    cast(fn(T, voidptr), lamda.func) (args, lamda.context)
//}
Test fn a i32 {

}

window Window


Save fn file Str, world ref World {

    archive Archive = Archive()


    for 1 .. world.length 
    {
        entity Entity = entities[it]
        if entity.Has(Editable) {
            atEnt ref Archive = archive['e' + String(entity.id)]
            if entity.Has(Transform) {
                at ref Archive = atEnt['Transform']
                at.Save(Transform.Batch[entity.id])

            }
            if entity.Has(Sprite) {
                at ref Archive = atEnt['Sprite']
                at.Save(Sprite.Batch[entity.id])
            }
        }
    }
    archive.ArchiveFile(file)
}

Load fn(file Str, world ref World, renderer ref Renderer)
{    
    archive Archive = Unarchive(file)
    for i64(0) .. archive.array.length {

        entity Entity = world.Entity
        entity.Add(Editable)

        Println('Entity ' + String(entity.id))

        {
            arch ref Archive = archive.array[it].Get('Sprite')
            if arch != Nil {
                sprite ref Sprite = entity.Add(Sprite)
                sprite.Init(renderer, arch['Texture'].string)
                sprite.material.shader = renderer.Shader(arch['Vertex'].string, arch['Fragment'].string)
                Load(arch['Color'], sprite.color)
                sprite.Color(sprite.color)
            }
        }

        {
            arch ref Archive = archive.array[it].Get('Transform')
            if arch != Nil {

                transform ref Transform = entity.Add(Transform)
                transform.Init()

                arch['Position'].Load(transform.position)
                arch['Scale'].Load(transform.scale)  
                Recalculate(transform)
            }       
        }
    }
}

world World
renderer Renderer
editor Editor
camera Camera

Types enum {
    A
    B
    C
    D
}

== fn a $T.enum, b T => i8 {
    return cast(i32, a) == cast(i32, b)
} 

Main fn 
{    
    if glfwInit() == 1 {
        Println('glfwinit')
    }

    Initialize()


    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3)
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3)
    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, 1)
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE)

    glfwwindow ref GLFWWindow = glfwCreateWindow(1000.i32, 500.i32, '...'.chars, 0, 0)
    glfwwindow.glfwMakeContextCurrent()

    glfwSetCursorPosCallback(glfwwindow, fn(w ref GLFWWindow, x f64, y f64) 
    { 
        xx f32 = x.f32
        yy f32 = y.f32
        xx = (xx/window.size.x - 0.5) * 2.0
        yy = (0.5 - yy/window.size.y) * 2.0
        window.mouse = Vec2(xx, yy)
    })

    glfwSetMouseButtonCallback(glfwwindow, fn(w ref GLFWWindow,  button u32, action u32, mods u32) 
    { 
        if action == GLFW_PRESS {
           window.MouseButton(true)
        }
        else action == GLFW_RELEASE {
            window.MouseButton(false)
        }
    })

    glfwSetWindowSizeCallback(glfwwindow, fn(w ref GLFWWindow,  x u32, y u32) 
    { 
        window.Resized(Vec2(x.f32, y.f32))    
    })

    window.size = Vec2(1000, 500)
    window.glfwwindow = glfwwindow

    window.RegisterMouse(world, 
        fn world ref World, at Vec2 {
            Println('Down')
        }, 
        fn world ref World, at Vec2 {
            Println('Up')
        }
    )

    window.resized.Register(world, fn world ref World, size Vec2 {
        Println('Resized!')
    })

  
    ChangeWorkingDirectory('../../Resources')

    //Print(ReadFile('Main.dl'))

    


    camera = Camera()
    renderer.Init()
    editor = Editor(world, camera)
    

    scene Texture = Texture(window.FrameBufferSize)
    occlusion Texture = Texture(window.FrameBufferSize)
    sceneLighted Texture = Texture(window.FrameBufferSize)
    sceneDownSample Texture = Texture(window.FrameBufferSize/2.0)
    sceneBluredX Texture = Texture(window.FrameBufferSize/2.0)
    sceneBluredY Texture = Texture(window.FrameBufferSize/2.0)

    scenePass ShadingPass = ShadingPass()
    scenePass.clear = 1
    scenePass.out.Push(&scene)
    scenePass.out.Push(&occlusion)
    scenePass.Refresh()
    renderer.passes.Push(scenePass)

    {   
        post ref Shader = renderer.Shader('shaders/PostProcess.vs', 'shaders/Lighting.fs')
        sprite Sprite
        sprite.Init(renderer, 'images/GrassSmall.png')
        sprite.material.texture = &occlusion
        sprite.material.shader = post

        pass ShadingPass = PostProcess(sprite)
        pass.in.Push(&scene)
        pass.in.Push(&occlusion)
        pass.out.Push(&sceneLighted)

        pass.Refresh()
        renderer.passes.Push(pass)
    }

    {   
        post ref Shader = renderer.Shader('Shaders/PostProcess.vs', 'Shaders/SampleDown.fs')

        sprite Sprite
        sprite.Init(renderer, 'images/GrassSmall.png')
        sprite.material.texture = &scene
        sprite.material.shader = post

        pass ShadingPass = PostProcess(sprite)
        pass.in.Push(&sceneLighted)
        pass.out.Push(&sceneDownSample)
        pass.clear = 1
        pass.Refresh()
        renderer.passes.Push(pass)
    } 
    {   
        post ref Shader = renderer.Shader('Shaders/PostProcess.vs', 'Shaders/BlurX.fs')

        sprite Sprite
        sprite.Init(renderer, 'images/GrassSmall.png')
        sprite.material.texture = &scene
        sprite.material.shader = post

        pass ShadingPass = PostProcess(sprite)
        pass.in.Push(&sceneDownSample)
        pass.out.Push(&sceneBluredX)
        pass.clear = 1
        pass.Refresh()
        renderer.passes.Push(pass)
    } 
    {   
        post ref Shader = renderer.Shader('Shaders/PostProcess.vs', 'Shaders/BlurY.fs')

        sprite Sprite
        sprite.Init(renderer, 'images/GrassSmall.png')
        sprite.material.texture = &scene
        sprite.material.shader = post

        pass ShadingPass = PostProcess(sprite)
        pass.in.Push(&sceneBluredX)
        pass.out.Push(&sceneBluredY)
        pass.clear = 1
        pass.Refresh()
        renderer.passes.Push(pass)
    } 

    {   
        post ref Shader = renderer.Shader('Shaders/PostProcess.vs', 'Shaders/Combine.fs')

        sprite Sprite
        sprite.Init(renderer, 'images/GrassSmall.png')
        sprite.material.texture = &scene
        sprite.material.shader = post

        pass ShadingPass = PostProcess(sprite)
        pass.in.Push(&sceneLighted)
        pass.in.Push(&sceneBluredY)
        pass.clear = 1
        pass.Refresh()
        renderer.passes.Push(pass)
    } 


    entity Entity = world.Entity 
    mesh ref Mesh = entity.Add(Mesh)
    mesh.Init(renderer)
    mesh.material.shader = renderer.Shader('shaders/Position.vs', 'shaders/Character.fs')
    
    spine Spine = Spine(renderer, mesh, 'Character.json','Character.atlas')

    transform ref Transform = entity.Add(Transform)
    transform.Init()
    transform.Scale(Vec3(25, 25, 25))

    glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA)
    glBlendFuncSeparatei(1, GL_ONE, GL_ONE, GL_ONE, GL_ONE_MINUS_SRC_ALPHA)
    glEnable(GL_BLEND)

    WatchPath('Shaders'.chars, fn(path ref i8, event i32) {
        for renderer.shaders.Each {
            it.Value.Reload()
        }
    })
    WatchPath('Images'.chars, fn(path ref i8, event i32) {
        for renderer.textures.Each {
            it.Value.Reload()
        }
    })

    //Load('lights', world, renderer)
    //Load('data', world, renderer)
    Load('entities', world, renderer)
    Save('entities', world)

    editor.AddEditables(world, renderer, window)

    for glfwWindowShouldClose(glfwwindow) == 0 {

        glfwPollEvents()
        GLError()

        glClear(GL_COLOR_BUFFER_BIT)
        glClearColor(0.0, 0.0, 0.0, 0)

        window.time = window.time + 1.0/60.0

        spine.Update(1.0/60.0)

        camera.projection = Perspective(camera.fieldOfView, window.size.x/window.size.y, camera.near, camera.far)
        camera.viewProjection = camera.projection * camera.view

        editor.Update(window.mouse)

        renderer.Render(world, camera, window)
        glfwwindow.glfwSwapBuffers()
    }

}

