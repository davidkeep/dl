@extern
{
	spAtlas_createFromFile fn(path ref i8, userptr voidptr) => ref spAtlas
	_readFile fn(path ref i8, length ref i32) => ref i8

	_spAtlasPage_createTexture fn(self ref spAtlasPage, path ref i8)
	{

		Print(StringFromCString(path))

	    texture ref Texture = renderer.Texture(StringFromCString(path))
	    self.rendererObject =  cast(voidptr, texture)
	    //texture->Retain();

	    self.width = texture.size.x.i32()
	    self.height = texture.size.y.i32()
	}

	_spAtlasPage_disposeTexture fn(self ref spAtlasPage)
	{
	    //((Texture*)self->rendererObject)->Release();
	}

	_spUtil_readFile fn(path ref i8, length ref i32) => ref i8
	{
	    return _readFile(path, length)
	}
}


Spine struct
{
	entity Entity
	spineFile Str
	atlasFile Str
	skeleton ref spSkeleton
	state ref spAnimationState
	data Array(f32)
	mesh ref Mesh
}

Spine fn(renderer ref Renderer, mesh ref Mesh, spineFile Str, atlasFile Str) => Spine
{
	spine Spine
	
	spine.spineFile = spineFile
	spine.atlasFile = atlasFile

    atlas ref spAtlas = spAtlas_createFromFile(atlasFile.chars, cast(voidptr, &renderer))
    json ref spSkeletonJson = spSkeletonJson_create(atlas)
    skeletonData ref spSkeletonData = spSkeletonJson_readSkeletonDataFile(json, spineFile.chars)
    spine.skeleton = spSkeleton_create(skeletonData)
    spSkeleton_updateWorldTransform(spine.skeleton)
    spine.state = spAnimationState_create(spAnimationStateData_create(spine.skeleton.data))
    Init(spine.data, 1000)
    Init(mesh.vertices, 2000)
    Init(mesh.indices, 2000)
    spine.mesh = mesh

    animation ref spAnimation = spSkeletonData_findAnimation(spine.skeleton.data, 'Run'.chars)
    spAnimationState_setAnimation(spine.state, 0, animation, 1)
    return spine
}

Update fn(self ref Spine, delta f32)
{
    spSkeleton_update(self.skeleton, delta*2)
    spAnimationState_update(self.state, delta*2)
    spAnimationState_apply(self.state, self.skeleton)
    spSkeleton_updateWorldTransform(self.skeleton)


  	uvs ref f32
  	triangles ref u16 
  	verticesCount i32
  	trianglesCount i32
  	texture ref Texture
 	count i32
 	icount i32

	quadTriangles Array(u16)
	quadTriangles.Init(6)

	quadTriangles[0] = 0
	quadTriangles[1] = 1
	quadTriangles[2] = 2
	quadTriangles[3] = 2
	quadTriangles[4] = 3
	quadTriangles[5] = 0

    for 0 .. self.skeleton.slotsCount
    {
    	color Vec4 = Vec4(1)

        slot ref spSlot = self.skeleton.drawOrder.PtrAdd(it)

        assert(slot)
        if slot.attachment != Nil {
        assert(slot.attachment)
         //SP_ATTACHMENT_REGION
            if cast(i32, slot.attachment.kind) == 0
            {
                    
    	        //attachment ref spRegionAttachment = cast(ref spRegionAttachment, slot.attachment)
    	        //spRegionAttachment_computeWorldVertices(attachment, slot.bone, self.data.elements)

    	        //texture = cast(ref Texture, cast(ref spAtlasRegion, attachment.rendererObject).page.rendererObject)
    	        //uvs = cast(ref f32, &attachment.uvs0)
    	        //verticesCount = 8
    	        //triangles = quadTriangles.elements
    	        //trianglesCount = 6
    	        
            	//color.w = slot.a * attachment.a
             //  	color.x = slot.r * attachment.r * color.w 
           		//color.y = slot.g * attachment.g * color.w
            	//color.z = slot.b * attachment.b * color.w
           	}
  //     	//SP_ATTACHMENT_MESH
		//if cast(i32, slot.attachment.kind) == 2
  //      {
  //      	attachment ref spMeshAttachment = cast(ref spMeshAttachment, slot.attachment)
  //          spMeshAttachment_computeWorldVertices(attachment, slot, self.data.elements)
  //          if cast(i32, slot.data.blendMode) == 1
  //          {
  //          	color.w = 0
  //          }
   
	 //       texture = cast(ref Texture, cast(ref spAtlasRegion, attachment.rendererObject).page.rendererObject)
  //          uvs = attachment.uvs
  //          verticesCount = attachment.super.worldVerticesLength
  //          triangles = attachment.triangles
  //          trianglesCount = attachment.trianglesCount

  //      	color.w = slot.a * attachment.a
  //         	color.x = slot.r * attachment.r * color.w 
  //     		color.y = slot.g * attachment.g * color.w
  //      	color.z = slot.b * attachment.b * color.w
  //      }

  //     // float multiplier = color.a
  //      //color.a *=  (slot.data.blendMode != SP_BLEND_MODE_ADDITIVE);
  //      offset i64 = count
  //      for 0.i64 .. verticesCount
  //      {
  //          vertex ref PositionTextureColorColor = self.mesh.vertices[count]
  //          vertex.position.x = self.data[it].dref
  //          vertex.position.y = self.data[it + 1].dref
  //          vertex.position.z = 0
  //          vertex.texture.x = uvs.PtrAdd(it).dref
  //          vertex.texture.y = uvs.PtrAdd(it + 1).dref
  //          vertex.color = color
  //         	vertex.colorAlt = color

  //          it = it + 1 //Incr 1 + 1
  //          count = count + 1
  //      }
  //      self.mesh.material.texture = texture
  //      for 0.i64 .. trianglesCount
  //      {
  //          self.mesh.indices[icount] = (triangles.PtrAdd(it) + offset.u16()).u16()
  //          icount = icount + 1
  //      }
   	}}

    //self.mesh.count = u32(icount)
    //glBindBuffer(GL_ARRAY_BUFFER, self.mesh.buffer)
    //glBufferData(GL_ARRAY_BUFFER, cast(i64, PositionTextureColorColor.Size * u32(count)), cast(voidptr, self.mesh.vertices.elements), GL_DYNAMIC_DRAW)

    //glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, self.mesh.index)
    //glBufferData(GL_ELEMENT_ARRAY_BUFFER, cast(i64, (u16).Size * icount.u32()), cast(voidptr, self.mesh.indices.elements), GL_DYNAMIC_DRAW)
    //GLError() 
    //glBindBuffer(GL_ARRAY_BUFFER, 0)
    //glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0)
}
