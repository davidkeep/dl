

Nil struct {

}

== fn value ref $T, typeof Nil => i8 {
    return cast(i64, value) == 0
}

!= fn value ref $T, typeof Nil => i8 {
    return (value == Nil) != 0
}


Array struct $T {
    length i64 
    capacity i64
    elements ref T
}

Init fn array ref Array($T) {

}

Init fn array ref Array($T), length i64 {
    Reserve(array, length)
    dref(array).length = length
}

Reserve fn array ref Array($T), count i64 {
    
    if dref(array).capacity < count
    {
        dref(array).elements = Realloc(dref(array).elements, count)
        Memset(PtrAdd(dref(array).elements, dref(array).capacity), 0, count - dref(array).capacity)
        dref(array).capacity = count
        dref(array).elements = Realloc(dref(array).elements, 100)
    }
}

[] fn array ref Array($T), size i64 => ref T 
{
    assert(dref(array).length > size, 'Array out of bounds > size')
    assert(dref(array).length >= 0, 'Array out of bounds size < 0')

    return PtrAdd(dref(array).elements, size)
}

Memset fn start ref $T, value i64, count i64 {
    size i64 = Size(T) * count
    dlMemset(cast(ref i8, start), i32(0), size)
}

Alloc fn typeof $T, count i64 => ref T
{
    size i64 = Size(T) * count
    return cast(ref T, dlMallocZero(size))
}

Realloc fn previous ref $T, count i64 => ref T
{
    size u64
    size = Size(T) * count
    return cast(ref T, dlRealloc(cast(ref i8, previous),size))
}

//AllocUninitialized fn(type $T, len i64) ref T 
//{
//    size u64 = cast(u64, T.size * cast(u32, len))
//    return cast(T^, malloc(size))
//}

CopyPtr fn from ref $T, to ref $T, len i64 {
    size i64 = Size(T) * len
    dlMemcpy(cast(ref i8, to), cast(ref i8, from), size)
}


Resize fn array ref Array($T), size i64
{
    if dref(array).capacity < size
    {
        Reserve(array, size)
    }
    dref(array).length = size
}

Push fn array ref Array($T), value T =>
{
    if dref(array).capacity < dref(array).length + 1
    {
        capacity i64 = dref(array).capacity * 2
        if capacity < 100 {
            Reserve(array, 100)
        }
        else {
            Reserve(array, capacity)
        }
    }
    PtrAdd(dref(array).elements, dref(array).length) = value
    dref(array).length = dref(array).length + 1
}

Pop fn array ref Array($T)
{
    dref(array).length = dref(array).length + 1
}

Last fn array ref Array($T) => ref T
{
    assert(dref(array).length > 0, 'Array needs at least 1 element')
    return array[dref(array).length - 1]
}

//Insert fn array ref Array($T), index i64, value T
//{
//    assert(index >= 0, String('Cant insert outside of range'))
//    assert(index < array.length + 1), String('Cant insert outside of range'))

//    if array.capacity < array.length + 1
//    {
//        capacity i64 = array.capacity * 2
//        if capacity < 10 {
//            Reserve(array, 10)
//        }
//        else {
//            Reserve(array, capacity)
//        }
//    }
//    array.length = array.length + 1
//    for i64(index) .. array.length - 1 {
//        at i64 = array.length - 1 - it
//        array[at] = array[at-1]
//    }
//    array[index] = value
//}

Hash fn string Str => i64
{
    hash i64 = 5381
    for i64(0) .. string.length {
        //hash = ((hash << 5) + hash) + '(string.chars + i)
        hash = ((hash + 5) + hash) + i64(PtrAdd(string.chars, it)) 
    }
    return hash
}
Hash fn p ref $Ptr => i64
{
    return cast(i64, p)
}

Hash fn p i64 => i64
{
    return p
}

Equal fn a $A, b $B => i8 
{
    assert(0, 'Why are we using this equals')
    return true
}

TableNode struct $Key, $Value
{
    hash i64
    key Key
    value Value
}

Table struct $Key, $Value
{
    length i64
    capacity i64
    data Array(TableNode(Key, Value))
}

Init fn table ref Table($Key, $Value)
{
    table.length = 0
    table.capacity = 16

    Init(table.data)
    Resize(table.data, 16)
}

false   i8 = 0
true    i8 = 1

Resize fn table ref Table($Key, $Value)
{
    data Array(TableNode(Key, Value))
    Init(data)
    Resize(data, table.capacity * 2)

    for i64(0) .. table.data.length
    {
        if table.data[it].hash != 0 {
            hash i64  = Hash(table.data[it].key)
            at i64 = (hash % (data.length - 1)) + 1

            done i8 = false
            for done == false
            {
                if data[at].hash == 0 
                {
                    data[at].dref = table.data[it].dref
                    done = true
                }
                else 
                {
                    if Equal(table.data[it].key, data[at].key)
                    {   
                        data[at].dref = table.data[it].dref
                        done = true
                    }
                    at = (at + 1) % data.length
                }
            }
        }
    }

    table.data = data
    table.capacity = table.capacity * 2
}


[] fn table ref Table($Key, $Value), key Key => ref Value
{
    assert(table.capacity != 0, 'Table requires Init')
    if table.length * 2 > table.capacity
    {
        Resize(table)
    }

    length i64  = table.capacity
    hash i64  = Hash(key)
    at i64 = (hash % (length - 1)) + 1

    table.length = table.length + 1

    for 1 {

        if table.data[at].hash == 0 {
            table.data[at].key = key
            table.data[at].hash = 1
            return &table.data[at].value
        }
        else {
            if Equal(key, table.data[at].key)
            {
                return &table.data[at].value
            }
            at = (at + 1) % length
        }
    }
}

