@import
{
	'World.dl'
}

Character struct 
{
	entity Entity
}

Character fn(entity Entity) Character^
{
	return &AddComponent(Character, entity)
}

CollisionBegin fn(left Shape,  right Shape)
{

}

Index4 struct (A?, B?, C?, D?) {
	a A^
	b B^
	c C^
	d D^

	at i64
	max i64
}
Next fn(index ref Index4(A?, B?, C?, D?)) i8
{
	for index.at < index.max
	{
		if Retrieve(index.at, index.a, index.b, index.c, index.d) {
			index.at = index.at + 1
			return true
		}
		index.at = index.at + 1
	}
	return index.at < index.max
}

Update fn(type Character, world ref World, window ref Window)
{
	x f32 = (window.GetKey(CharD) - window.GetKey(CharA)) * 25.0
	y f32 = window.GetKey(CharW)

	transform Transform^
	body Body^
	shape Shape^
	character Character^

	index Index4(Transform, Body, Character, Shape)
	index.max = world.count

	for	Next(index)
	{
		index.d.SurfaceVelocity = Vec2(-x, 0)
        if y {
        	index.b.Velocity = Vec2(0, 0)
            index.b.ApplyImpulse(Vec2(x, 50))
        }
	}
}
