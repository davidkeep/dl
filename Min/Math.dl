

PI f32 = 3.1415926535897

@extern 
{
    cosf fn v f32 => f32
    sinf fn v f32 => f32
    tanf fn v f32 => f32

    fabsf fn v f32 => f32
    sqrtf fn v f32 => f32
}

sqrt fn f f32 => f32 
{
    return sqrtf(f)
}
abs fn f f32 => f32 
{
    return fabsf(f)
}
cos fn f f32 => f32 
{
    return cosf(f)
}
sin fn f f32 => f32 
{
    return sinf(f)
}
tan fn f f32 => f32 
{
    return tanf(f)
}

Inf fn type f32 => f32
{
    return f32(1.0)/f32(0.0)
}

Vec4 struct {
    x f32
    y f32
    z f32
    w f32
}
Vec3 struct {
    x f32
    y f32
    z f32
}
Vec2 struct {
    x f32
    y f32
}
Mat4 struct {
    x Vec4
    y Vec4
    z Vec4
    w Vec4
}

Vector trait
{
    Length fn l $T.Vector, => f32
    * fn l $T.Vector, r f32 => T
}

Normalize fn v $T.Vector => T
{
    return v * (1.0/Length(v))
}

String fn v Vec4 => Str
{
    return '(' + String(v.x) + ',' + String(v.y) + ',' + String(v.z) + ',' + String(v.w) + ')'
}
String fn v Vec3 => Str
{
    return '(' + String(v.x) + ',' + String(v.y) + ',' + String(v.z) + ')'
}
String fn v Vec2 => Str
{
    return '(' + String(v.x) + ',' + String(v.y) + ')'
}
[] fn matrix ref Mat4, index i64 => ref Vec4 
{
    return PtrAdd(cast(ref Vec4, matrix), index)
}

[] fn v ref Vec4, index i64 => ref f32 
{
    return PtrAdd(cast(ref f32, v), index)
}
Mat4 fn v f32 => Mat4 
{
    r Mat4
    r.x = Vec4(v, 0, 0, 0)
    r.y = Vec4(0, v, 0, 0)
    r.z = Vec4(0, 0, v, 0)
    r.w = Vec4(0, 0, 0, 1)
    return r
}
Mat4Scale fn scale Vec3 => Mat4 
{
    r Mat4
    r.x = Vec4(scale.x, 0, 0, 0)
    r.y = Vec4(0, scale.y, 0, 0)
    r.z = Vec4(0, 0, scale.z, 0)
    r.w = Vec4(0, 0, 0, 1)
    return r
}
Mat4Transform fn v Vec3 => Mat4 
{
    r Mat4
    r.x = Vec4(1, 0, 0, 0)
    r.y = Vec4(0, 1, 0, 0)
    r.z = Vec4(0, 0, 1, 0)
    r.w = Vec4(v.x, v.y, v.z, 1)
    return r
}
* fn lhs Mat4, rhs Mat4 => Mat4
{
    v Mat4
    r i64
    for(r < 4)
    {
        c i64
        for (c < 4)
        {
            k i64
            v[c][r] = 0
            for(k < 4)
            {
                (v[c][r]) = (v[c][r] + lhs[k][r] * rhs[c][k])
                k = k + 1
            }
            c = c + 1
        }
        r = r + 1
    }
    return v
}
Vec4 fn x f32, y f32, z f32, w f32 => Vec4
{
    v Vec4
    v.x = x
    v.y = y
    v.z = z
    v.w = w
    return v
}
Vec4 fn v Vec3, w f32 => Vec4
{
    r Vec4
    r.x = v.x
    r.y = v.y
    r.z = v.z
    r.w = w
    return r
}
Vec4 fn v f32 => Vec4
{
    return Vec4(v, v, v, v)
}
Vec3 fn x f32, y f32, z f32 => Vec3
{
    v Vec3
    v.x = x
    v.y = y
    v.z = z
    return v
}
Vec3 fn value f32 => Vec3
{
    v Vec3
    v.x = value
    v.y = value
    v.z = value
    return v
}
Vec3 fn v Vec2 => Vec3
{
    r Vec3
    r.x = v.x
    r.y = v.y
    r.z = 0
    return r
}
Vec2 fn v Vec3 => Vec2
{
    r Vec2
    r.x = v.x
    r.y = v.y
    return r
}
Vec2 fn x f32, y f32 => Vec2
{
    v Vec2
    v.x = x
    v.y = y
    return v
}
Vec2 fn v f32 => Vec2
{
    return Vec2(v, v)
}
- fn lhs Vec3, rhs Vec3 => Vec3
{
    v Vec3
    v.x = lhs.x - rhs.x
    v.y = lhs.y - rhs.y
    v.z = lhs.z - rhs.z
    return v
}
- fn lhs Vec3, rhs Vec2 => Vec3
{
    v Vec3
    v.x = lhs.x - rhs.x
    v.y = lhs.y - rhs.y
    v.z = lhs.z
    return v
}
- fn lhs Vec2, rhs Vec2 => Vec2
{
    v Vec2
    v.x = lhs.x - rhs.x
    v.y = lhs.y - rhs.y
    return v
}
+ fn lhs Vec3, rhs Vec3 => Vec3
{
    v Vec3
    v.x = lhs.x + rhs.x
    v.y = lhs.y + rhs.y
    v.z = lhs.z + rhs.z
    return v
}
+ fn lhs Vec3, rhs Vec2 => Vec3
{
    v Vec3
    v.x = lhs.x + rhs.x
    v.y = lhs.y + rhs.y
    v.z = lhs.z
    return v
}
+ fn lhs Vec2, rhs Vec2 => Vec2
{
    v Vec2
    v.x = lhs.x + rhs.x
    v.y = lhs.y + rhs.y
    return v
}
* fn lhs Vec3, rhs Vec3 => Vec3
{
    v Vec3
    v.x = lhs.x * rhs.x
    v.y = lhs.y * rhs.y
    v.z = lhs.z * rhs.z
    return v
}
* fn l f32, r Vec4 => Vec4 
{
    return r * l 
}
* fn l Vec4, r f32 => Vec4
{
    v Vec4
    v.x = l.x * r
    v.y = l.y * r
    v.z = l.z * r
    v.w = l.w * r
    return v
}
* fn l f32, r Vec3 => Vec3 
{ 
    return r * l 
}
* fn l Vec3, r f32 => Vec3
{
    v Vec3
    v.x = l.x * r
    v.y = l.y * r
    v.z = l.z * r
    return v
}
* fn l f32, r Vec2 => Vec2 
{ 
    return r * l 
}
* fn l Vec2, r f32 => Vec2
{
    v Vec2
    v.x = l.x * r
    v.y = l.y * r
    return v
}
/ fn l Vec2, r f32 => Vec2
{
    return l * (1.0/r)
}
/ fn l Vec3, r f32 => Vec3
{
    return l * (1.0/r)
}
/ fn l Vec4, r f32 => Vec4
{
    return l * (1.0/r)
}
Dot fn l Vec3, r Vec3 => f32
{
    return l.x*r.x + l.y*r.y + l.z*r.z
}
Dot fn l Vec2, r Vec2 => f32
{
    return l.x*r.x + l.y*r.y
}
Cross fn l Vec3, r Vec3 => Vec3
{
    return Vec3(l.y*r.z - l.z*r.y, l.z*r.x - l.x*r.z, l.x*r.y - l.y*r.x)
}
Length fn v Vec3 => f32
{
    return sqrt(v.x*v.x + v.y*v.y + v.z*v.z)
}
Length fn v Vec2 => f32
{
    return sqrt(v.x*v.x + v.y*v.y)
}

Quaternion struct
{            
    w f32
    x f32
    y f32
    z f32
}
    
GetRotationMatrix fn q Quaternion => Mat4
{
    r Mat4
    r[0][0] = 1 - 2*q.y*q.y - 2*q.z*q.z
    r[0][1] = 2*q.x*q.y + 2*q.w*q.z
    r[0][2] = 2*q.x*q.z - 2*q.w*q.y
    r[0][3] = 0
    
    r[1][0] = 2*q.x*q.y - 2*q.w*q.z
    r[1][1] = 1 - 2*q.x*q.x-2*q.z*q.x
    r[1][2] = 2*q.y*q.z+2*q.w*q.x
    r[1][3] = 0

    r[2][0] = 2*q.x*q.z + 2*q.w*q.y
    r[2][1] = 2*q.y*q.z - 2*q.w*q.x
    r[2][2] = 1 - 2*q.x*q.x - 2*q.y*q.y
    r[2][3] = 0
    
    r[3][0] = 0
    r[3][1] = 0
    r[3][2] = 0
    r[3][3] = 1
    
    return r
}

CreateQuaternion fn axis Vec3, angle f32 => Quaternion
{
    r Quaternion
    r.w = cos(angle/2)
    r.x = axis.x * sin(angle/2)
    r.y = axis.y * sin(angle/2)
    r.z = axis.z * sin(angle/2)
    return r
}

CreateQuaternion fn => Quaternion
{
    r Quaternion
    r.w = 1.0
    r.x = 0
    r.y = 0
    r.z = 0
    return r
}

normalize fn v ref Quaternion
{
    magnitude f32 = sqrt(v.w*v.w + v.x*v.x + v.y*v.y + v.z*v.z)
    v.w = v.w / magnitude
    v.x = v.x / magnitude
    v.y = v.y / magnitude
    v.z = v.z / magnitude
}

mul fn lhs Quaternion, rhs Quaternion => Quaternion
{
    r Quaternion
    r.w = (lhs.w * rhs.w - lhs.x * rhs.x - lhs.y * rhs.y - lhs.z * rhs.z)
    r.x = (lhs.w * rhs.x + lhs.x * rhs.w + lhs.y * rhs.z - lhs.z * rhs.y)
    r.y = (lhs.w * rhs.y - lhs.x * rhs.z + lhs.y * rhs.w + lhs.z * rhs.x)
    r.z = (lhs.w * rhs.z + lhs.x * rhs.y - lhs.y * rhs.x + lhs.z * rhs.w)
    return r
}
