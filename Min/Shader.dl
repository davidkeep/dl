//  Shader.dl
//  Created by David on 6/05/16.
//

struct Shader
{
    uint32 id
    str vs
    str fs
}

fn Print(str string){
    print(string)
}

fn Error(str string)
{
    Print("\33[31m" + string + "\n")
    Print("\33[0m");
}

fn Shader(str vs, str fs) Shader
{
    Shader shader
    shader.id = glCreateProgram()
    shader.fs = fs
    shader.vs = vs

    uint32 vsshader = CompileShader(GL_VERTEX_SHADER, ReadFile(vs), vs)
    uint32 fsshader = CompileShader(GL_FRAGMENT_SHADER, ReadFile(fs), fs)

    if !vsshader {
        Error("Failed to compile " + vs)
    }
    if !fsshader {
        Error("Failed to compile " + fs)
    }

    glAttachShader(shader.id, vsshader)
    glAttachShader(shader.id, fsshader)

    glDeleteShader(fsshader)
    glDeleteShader(vsshader)

    glLinkProgram(shader.id)
    
    int32 status
    glGetProgramiv(shader.id, GL_LINK_STATUS, &status)
    
    if status == int32(GL_FALSE)
    {
        int32 length
        uint8^ buffer = cast(malloc(1024), uint8^)
        glGetShaderInfoLog(shader.id, 1024, &length, buffer)
        Error("Linking failed ")
        Error(String(buffer, cast(length, int)))
    }

    uint32 cameraIndex = glGetUniformBlockIndex(shader.id, "Camera".chars)
    if cameraIndex  != GL_INVALID_INDEX
    {
        glUniformBlockBinding(shader.id, cameraIndex, 0);
    }
    uint32 transformIndex = glGetUniformBlockIndex(shader.id, "Transform".chars)
    if transformIndex != GL_INVALID_INDEX 
    {
        glUniformBlockBinding(shader.id, transformIndex, 1);
    }

    GLError("Pre Add error")
    AddUniforms(shader)
    GLError("post Add error")

    return shader
}

fn GLError(str string)
{
    uint32 err = glGetError()
    if err != GL_NO_ERROR
    {
        Error(string)
        if err == GL_INVALID_ENUM {
            Error("OpenGL: GL_INVALID_ENUM\n")
        }
        if err == GL_INVALID_OPERATION {
            Error("OpenGL: GL_INVALID_OPERATION\n")
        }
        if err == GL_INVALID_VALUE {
            Error("OpenGL: GL_INVALID_VALUE\n")
        }
        if err == GL_OUT_OF_MEMORY {
            Error("OpenGL: GL_OUT_OF_MEMORY\n")
        }
    }
}

fn Bind(Shader shader)
{
    GLError("Pre use error")
    glUseProgram(shader.id)
    GLError("Shader use error")
}

fn CompileShader(uint32 shaderType, str data, str file) uint32
{
    if data.length == 0{
        return 0
    }

    uint8^ source = data.chars

    uint32 shader = glCreateShader(shaderType)
    int32 s = 1
    int32^ ss

    glShaderSource(shader, s, &source, ss)

    glCompileShader(shader)
    
    int32 status
    glGetShaderiv(shader, GL_COMPILE_STATUS, &status)

    if status == int32(GL_FALSE)
    {
        Error(file)
        Error("...\n")

        uint8^ buffer = cast(malloc(2048), uint8^)
        int32 length
        glGetShaderInfoLog(shader, 2048, &length, buffer)
        int b
        if length > 0
        {
            str string
            string.chars = buffer
            string.length = cast(length, int)
            Error(string + "End: " + file + "\n")
        }

        glDeleteShader(shader)
        shader = 0
    }


//     glDetachShader(program, vertexShader)
// glDetachShader(program, fragmentShader)
    return shader
}

fn AddUniforms(Shader shader)
{
    int32 activeUniforms = 0;

    Array:(uint8) tname
    Init(tname, 256)
    
    glGetProgramiv(shader.id, GL_ACTIVE_UNIFORMS, &activeUniforms);
    GLError("get error")

    int32 i
    for i < activeUniforms
    {
        // Query uniform info.
        uint32 t
        int32 size
       // GLint location = -1;
        int32 len

        glGetActiveUniform(shader.id, uint32(i), 256, &len, &size, &t, tname.elements);
        tname.length = int(len)

        int32 loc = glGetUniformLocation(shader.id, tname.elements);
        if (t == GL_SAMPLER_2D)
        {
            int num = 0
            int mult = 1
            for mult
            {
                                      //  Print(String(num) + "\n\n\n")
                int n = int(tname[int(len - 1)]) - 48
                if n >= 0 && n < 10
                {
                    num = num + n * mult
                    mult = mult * 10
                    Print(String(num) + "\n\n\n")
                    len = len - 1
                }
                else 
                {
                    mult = 0
                    glProgramUniform1i(shader.id, loc, int32(num))
                    GLError("get 2error")
                    str t
                    t.chars = tname.elements
                    t.length = tname.length
                }

            }
            // }
            // if (name.substr(0, 7) == "texture")
            // {
            //     auto numberString = name.substr(7, name.length());
            //     int number = std::stoi(numberString);
                
            //     if (number != 0)
            //     {
            //         //Log("Texture ", number, " ", loc);
            //         //SetUniform(name, number);
            //         Bind();
            //         glUniform1i(loc, number);
                    
            //     }
            // }                
        }
        i = i + 1
    }
}


fn ReadFile(str file) str
{
    str r
    File^ f = FileOpen(file.chars, "r".chars)

    if !f {
        Error(file + " couldn't be opened")
        return r
    }

    r.chars = cast(malloc(100000), uint8^)

    uint newLen = FileRead(r.chars, 1, 100000, f)
    r.length = int(newLen)
    ^(r.chars + r.length) = 0
    return r
}
