Command struct
{
	vao u32
	count i32
}
RenderTarget struct
{   
    position Vec2
    size Vec2
    framebuffer u32
}
RenderTarget fn => RenderTarget
{
    target RenderTarget
    target.position = Vec2(0, 0)
    target.size = Vec2(1, 1)
    target.framebuffer = 0
    return target
}
GenerateFrameBuffer fn target ref RenderTarget, textures ref Array(ref Texture)
{
    if textures.length != 0
    {
        glGenFramebuffers(1, &target.framebuffer)
        glBindFramebuffer(GL_FRAMEBUFFER, target.framebuffer)

        drawBuffers Array(u32)
        Init(drawBuffers, textures.length)
        target.size = textures[0].size

        for 0 .. textures.length
        {
            glFramebufferTexture2D(GL_FRAMEBUFFER, u32(it) + GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, textures[it].id, 0)
            drawBuffers[it] = GL_COLOR_ATTACHMENT0 + u32(it)
        }
        glDrawBuffers(i32(drawBuffers.length), drawBuffers.elements) 

        status u32 = glCheckFramebufferStatus(GL_FRAMEBUFFER)
        if status != GL_FRAMEBUFFER_COMPLETE 
        {
            Println('Error: Framebuffer error')
        }
        //glBindFramebuffer(GL_FRAMEBUFFER, 0)
    }
}

Bind fn target RenderTarget, window Window
{
    if target.framebuffer != 0
    {
        glViewport(0, 0, i32(target.size.x), i32(target.size.y))
    }
    else
    {
        glViewport(0, 0, i32(window.FrameBufferSize().x), i32(window.FrameBufferSize().y))
    }
    glBindFramebuffer(GL_FRAMEBUFFER, target.framebuffer)
}

BindScreen fn
{
    glBindFramebuffer(GL_FRAMEBUFFER, 0)  
}

ShadingPass struct
{
    render i8
    clear i8
    target RenderTarget
    in Array(ref Texture)
    out Array(ref Texture)
    sprite Sprite
}

ShadingPass fn => ShadingPass
{
    pass ShadingPass
    pass.render = 1
    pass.target = RenderTarget()
    pass.clear = 0
    Init(pass.in)
    Init(pass.out)
    return pass
}

PostProcess fn sprite ref Sprite => ShadingPass
{
    pass ShadingPass = ShadingPass()
    pass.render = 0
    pass.sprite = sprite.dref
    return pass
}

Refresh fn pass ref ShadingPass
{
    GenerateFrameBuffer(pass.target, pass.out)
}



Renderer struct
{
	commands Array(Command)
    passes Array(ShadingPass)
	shaders Table(Str, ref Shader)
	textures Table(Str, ref Texture)
}
Shader fn renderer ref Renderer, vs Str, fs Str => ref Shader
{
	if renderer.shaders[vs + fs].dref == Nil
	{  
        shader ref Shader = Alloc(Shader, 1)
        assert(shader)
        shader.Init(vs, fs)
		renderer.shaders[vs + fs] = shader
		return shader
	}
	assert(renderer.shaders[vs + fs])
	return renderer.shaders[vs + fs].dref
}

Texture fn renderer ref Renderer, file Str => ref Texture
{
	if renderer.textures[file].dref == Nil
	{  
        texture ref Texture = Alloc(Texture, 1)
        assert(texture)
        texture.Init(file)
		renderer.textures[file] = texture
		Print('Creating')
		return texture
	}
	t ref Texture = renderer.textures[file]
	assert(t, 'wtttff??')
	return t
}

Init fn self ref Renderer
{
	Init(self.passes)
	Init(self.shaders)
	Init(self.textures)
	//return renderer
}

Draw fn sprite ref Sprite, transform ref Transform
{
    Bind(sprite.material)
   	GLError() 
    glBindVertexArray(sprite.vao)
    glDrawElements(GL_TRIANGLES,6,GL_UNSIGNED_SHORT, cast(voidptr, 0))
    glBindVertexArray(0)
    GLError() 
}

Draw fn sprite ref Mesh, transform ref Transform
{
    Bind(sprite.material)
    GLError() 
    glBindVertexArray(sprite.vao)
    glDrawElements(GL_TRIANGLES,sprite.count.i32(),GL_UNSIGNED_SHORT, cast(voidptr, 0))
    glBindVertexArray(0)
    GLError() 
}

CameraBlock struct
{
    viewProjection Mat4
    windowSize Vec2
    pixelSize Vec2
    time f32
}

TransformBlock struct
{
    matrix Mat4
}

IInterfaceBinding trait {
	InterfaceBinding fn typeof $T.IInterfaceBinding => u32
}

InterfaceBinding fn typeof CameraBlock => u32
{
    return 0
}
InterfaceBinding fn typeof TransformBlock => u32
{
    return 1
}

CreateInterfaceBlock fn block $T, count i64 => u32
{	
	buffer u32
    glGenBuffers(1, &buffer)
    return buffer
}

LoadInterfaceBlock fn buffer u32, block $T.IInterfaceBinding
{
    glBindBufferBase(GL_UNIFORM_BUFFER, InterfaceBinding(T), buffer)
    glBufferData(GL_UNIFORM_BUFFER, i64(T.Size), cast(voidptr, &block), GL_DYNAMIC_DRAW)
}

Draw fn renderer ref Renderer, world ref World
{
    transformBlock TransformBlock
    blockBuffer u32 = CreateInterfaceBlock(transformBlock, 1)

    for i64(0) .. world.length
    {
		transform ref Transform
		sprite ref Sprite
        mesh ref Mesh
        if Retrieve(it, transform, sprite) {
            transformBlock.matrix = transform.matrix
            LoadInterfaceBlock(blockBuffer, transformBlock)
            Draw(sprite, transform)
        }
        if Retrieve(it, transform, mesh) {
            transformBlock.matrix = transform.matrix
            LoadInterfaceBlock(blockBuffer, transformBlock)
            Draw(mesh, transform)
        }
    }
}

Render fn renderer ref Renderer, world ref World, camera Camera, window Window
{
    cameraBlock CameraBlock
    cameraBuffer u32 = CreateInterfaceBlock(cameraBlock, 1)
    cameraBlock.viewProjection = camera.viewProjection
    cameraBlock.windowSize = Vec2(window.size.x, window.size.y)
    cameraBlock.pixelSize = Vec2(1.0/window.size.x, 1.0/window.size.y)
    cameraBlock.time = window.time
    LoadInterfaceBlock(cameraBuffer, cameraBlock)
    
    for i64(0) .. renderer.passes.length
    {
        Bind(renderer.passes[it].target, window)

        j u32
        for i64(j) < renderer.passes[it].in.length {
            glActiveTexture(GL_TEXTURE0 + 10 + j)
            glBindTexture(GL_TEXTURE_2D, renderer.passes[it].in[i64(j)].id)
            j = j + 1
        }

        glActiveTexture(GL_TEXTURE0)

        if renderer.passes[it].clear{
            glClear(GL_COLOR_BUFFER_BIT)
        }
        if renderer.passes[it].render {
            Draw(renderer, world)
        }
        else 
        {

            GLError()

            Bind(renderer.passes[it].sprite.material)
            GLError()

            glBindVertexArray(renderer.passes[it].sprite.vao)
            GLError()
            glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_SHORT, cast(voidptr, 0))
        }        
    }
    //unbind vertex array so any buffer changes that might occur don't effect anything previously bound during rendering
    glBindVertexArray(0) 
}
