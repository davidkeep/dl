
Transform struct 
{
    entity Entity
    matrix Mat4
    position Vec3
    scale Vec3
    parent ref Transform
    visible i8
    children Array(ref Transform)
}

Init fn self ref Transform 
{
    self.matrix = Mat4(1.0)
    self.scale = Vec3(1.0)
    self.visible = true
}

Scale fn self Transform => Vec3 
{
    return self.scale
}
Scale fn self ref Transform, scale Vec3
{
    self.scale = scale
    Recalculate(self)
}
Position fn self ref Transform => Vec3 
{
    return self.position
}
Position fn self ref Transform, position Vec3
{
    self.position = position
    Recalculate(self)
}
Visible fn self Transform => i8
{
    return self.visible
}
Visible fn self ref Transform, visible i8
{
    self.visible = visible
}
WorldPosition fn self Transform => Vec3
{
    return Vec3(self.matrix[3].x, self.matrix[3].y, self.matrix[3].z)
}
WorldScale fn self Transform => Vec3 
{
    return self.scale //@TODO actually return world scale not local scale
}
Recalculate fn self ref Transform
{
    self.matrix = Mat4Transform(self.position) * Mat4Scale(self.scale)
    if self.parent != Nil {
        self.matrix = self.parent.matrix * self.matrix
    }
    for 0 .. self.children.length {
        Recalculate(self.children[it])
    }
}
Parent fn self ref Transform, parent ref Transform
{
    assert(!parent.PtrEqual(self), 'Can not be parented to itself')
    self.parent = parent
    Push(parent.children, self)
    Recalculate(self)
    Recalculate(parent)
}
