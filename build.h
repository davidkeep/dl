#include "lang/Header.h"
struct i64i64;
struct i32i32;
struct float64float64;
struct float32float32;
struct u64u64;
struct u32u32;
struct TypeInfo;
struct str;
struct Vec3;
struct Vec2;
struct Entity;
struct Array1;
struct Array2;
struct Vec4;
struct Mat4;
struct DynamicArray1;
struct Transform;
struct Array3;
struct PositionTextureColor;
struct Shader;
struct Texture;
struct Material;
struct Sprite;
struct Array4;
struct World;
struct Array5;
struct Command;
struct DynamicArray2;
struct RenderTarget;
struct DynamicArray3;
struct ShadingPass;
struct DynamicArray4;
struct strShader;
struct TableNode1;
struct DynamicArray5;
struct Table1;
struct strTexture;
struct TableNode2;
struct DynamicArray6;
struct Table2;
struct Renderer;
struct Window;
struct Camera;
struct Scene;
struct DynamicArray7;
struct Archive;
struct File;
struct Token;
struct Lexer;
struct DynamicArray8;
struct Array6;
struct GLFWmonitor;
struct GLFWwindow;
struct Array7;
struct CameraBlock;
struct Buffer;
struct TransformBlock;
struct GLFWvidmode;
struct GLFWgammaramp;
struct GLFWimage;
struct GLFWcursor;
struct Ray;
struct PositionTextureColorColor;
struct Quaternion;
struct Key;
struct Void;
struct i64i64{
	i64 i0;
	i64 i1;
};
struct i32i32{
	i32 i0;
	i32 i1;
};
struct float64float64{
	float64 i0;
	float64 i1;
};
struct float32float32{
	float32 i0;
	float32 i1;
};
struct u64u64{
	u64 i0;
	u64 i1;
};
struct u32u32{
	u32 i0;
	u32 i1;
};
struct TypeInfo{
	i64 size;
};
struct str{
	i64 length;
	u8* chars;
};
struct Vec3{
	float32 x;
	float32 y;
	float32 z;
};
struct Vec2{
	float32 x;
	float32 y;
};
struct Entity{
	i64 id;
	i64 version;
};
struct Array1{
	i64 length;
	i64* elements;
};
struct Array2{
	i64 length;
	Entity* elements;
};
struct Vec4{
	float32 x;
	float32 y;
	float32 z;
	float32 w;
};
struct Mat4{
	Vec4 x;
	Vec4 y;
	Vec4 z;
	Vec4 w;
};
struct DynamicArray1{
	i64 capacity;
	i64 length;
	Transform** elements;
};
struct Transform{
	Entity entity;
	Mat4 matrix;
	Vec3 position;
	Vec3 scale;
	Transform* parent;
	DynamicArray1 children;
};
struct Array3{
	i64 length;
	Transform* elements;
};
struct PositionTextureColor{
	Vec2 position;
	Vec2 texture;
	Vec4 color;
};
struct Shader{
	u32 id;
	str vs;
	str fs;
};
struct Texture{
	u32 id;
	Vec2 size;
	str file;
};
struct Material{
	Shader shader;
	Texture texture;
};
struct Sprite{
	PositionTextureColor* vertices;
	u16* indices;
	u32 vao;
	Material material;
	u32 buffer;
	u32 index;
	Vec4 color;
	u32 count;
};
struct Array4{
	i64 length;
	Sprite* elements;
};
struct World{
	i64 count;
	Array1 components;
	Array2 entities;
	Array3 transforms;
	Array4 sprites;
};
struct Array5{
	i64 length;
	u8* elements;
};
struct Command{
	u32 vao;
	i32 count;
};
struct DynamicArray2{
	i64 capacity;
	i64 length;
	Command* elements;
};
struct RenderTarget{
	Vec2 position;
	Vec2 size;
	u32 framebuffer;
};
struct DynamicArray3{
	i64 capacity;
	i64 length;
	Texture** elements;
};
struct ShadingPass{
	i8 render;
	i8 clear;
	RenderTarget target;
	DynamicArray3 in;
	DynamicArray3 out;
	Sprite sprite;
};
struct DynamicArray4{
	i64 capacity;
	i64 length;
	ShadingPass* elements;
};
struct strShader{
	str i0;
	Shader i1;
};
struct TableNode1{
	i64 hash;
	str key;
	Shader value;
};
struct DynamicArray5{
	i64 capacity;
	i64 length;
	TableNode1* elements;
};
struct Table1{
	i64 length;
	i64 capacity;
	DynamicArray5 data;
};
struct strTexture{
	str i0;
	Texture i1;
};
struct TableNode2{
	i64 hash;
	str key;
	Texture value;
};
struct DynamicArray6{
	i64 capacity;
	i64 length;
	TableNode2* elements;
};
struct Table2{
	i64 length;
	i64 capacity;
	DynamicArray6 data;
};
struct Renderer{
	DynamicArray2 commands;
	DynamicArray4 passes;
	Table1 shaders;
	Table2 textures;
};
struct Window{
	Vec2 size;
	float32 time;
	Vec2 mouse;
};
struct Camera{
	Mat4 projection;
	Mat4 view;
	Mat4 viewProjection;
	Vec2 viewportPosition;
	Vec2 viewportScale;
	float32 near;
	float32 far;
	float32 fieldOfView;
	Vec4 clearColor;
	i8 clear;
};
struct Scene{
	Renderer* renderer;
	Window* window;
	Camera* camera;
};
struct DynamicArray7{
	i64 capacity;
	i64 length;
	Archive* elements;
};
struct Archive{
	i64 Type;
	str id;
	str string;
	float64 number;
	DynamicArray7 array;
};
struct Token{
	i32 Type;
	str string;
	float64 number;
};
struct Lexer{
	File* file;
	i32 nextCharacter;
	Token token;
};
struct DynamicArray8{
	i64 capacity;
	i64 length;
	u8* elements;
};
struct Array6{
	i64 length;
	u16* elements;
};
struct Array7{
	i64 length;
	u32* elements;
};
struct CameraBlock{
	Mat4 viewProjection;
	Vec2 windowSize;
	Vec2 pixelSize;
	float32 time;
};
struct Buffer{
	u32 id;
	u32 buffertype;
	i64 length;
	voidptr ptr;
};
struct TransformBlock{
	Mat4 matrix;
};
struct Ray{
	Vec3 orgin;
	Vec3 direction;
};
struct PositionTextureColorColor{
	Vec3 position;
	Vec2 texture;
	Vec4 color;
	Vec4 colorAlt;
};
struct Quaternion{
	float32 w;
	float32 x;
	float32 y;
	float32 z;
};
struct Key{
	i64 key;
	i64 modifiers;
};
void print89(str string);
void println90(str string);
void Init91(World& world);
i64 Bits92();
i64 Bits93();
Array3& Components94();
Array4& Components95();
i8 Retrieve01104(Transform*& a,Sprite*& b,i64 i);
Sprite& AddComponent0951(Entity entity);
Transform& AddComponent11051(Entity entity);
Sprite& AddComponent0952(World& world,Array4 array,Entity entity);
Transform& AddComponent11052(World& world,Array3 array,Entity entity);
Entity CreateEntity101();
void Load102(str file,Scene& scene);
i32 main();
extern "C" void glFrontFace(u32 mode);
extern "C" void glHint(u32 target,u32 mode);
extern "C" void glLineWidth(float32 width);
extern "C" void glPointSize(float32 size);
extern "C" void glPolygonMode(u32 face,u32 mode);
extern "C" void glScissor(i32 x,i32 y,i32 width,i32 height);
extern "C" void glTexParameterf(u32 target,u32 pname,float32 param);
extern "C" void glTexParameterfv(u32 target,u32 pname,float32* params);
extern "C" void glTexParameteri(u32 target,u32 pname,i32 param);
extern "C" void glTexParameteriv(u32 target,u32 pname,i32* params);
extern "C" void glTexImage1D(u32 target,i32 level,i32 internalformat,i32 width,i32 border,u32 format,u32 ttype,voidptr pixels);
extern "C" void glTexImage2D(u32 target,i32 level,i32 internalformat,i32 width,i32 height,i32 border,u32 format,u32 ttype,voidptr pixels);
extern "C" void glDrawBuffer(u32 mode);
extern "C" void glClear(u32 mask);
extern "C" void glClearColor(float32 red,float32 green,float32 blue,float32 alpha);
extern "C" void glClearStencil(i32 s);
extern "C" void glClearDepth(float64 depth);
extern "C" void glStencilMask(u32 mask);
extern "C" void glColorMask(u8 red,u8 green,u8 blue,u8 alpha);
extern "C" void glDepthMask(u8 flag);
extern "C" void glDisable(u32 cap);
extern "C" void glEnable(u32 cap);
extern "C" void glFinish();
extern "C" void glFlush();
extern "C" void glBlendFunc(u32 sfactor,u32 dfactor);
extern "C" void glLogicOp(u32 opcode);
extern "C" void glStencilFunc(u32 func,i32 sref,u32 mask);
extern "C" void glStencilOp(u32 fail,u32 zfail,u32 zpass);
extern "C" void glDepthfn(u32 func);
extern "C" void glPixelStoref(u32 pname,float32 param);
extern "C" void glPixelStorei(u32 pname,i32 param);
extern "C" void glReadBuffer(u32 mode);
extern "C" void glReadPixels(i32 x,i32 y,i32 width,i32 height,u32 format,u32 ttype,voidptr pixels);
extern "C" void glGetBooleanv(u32 pname,u8* params);
extern "C" void glGetDoublev(u32 pname,float64* params);
extern "C" u32 glGetError();
extern "C" void glGetFloatv(u32 pname,float32* params);
extern "C" void glGetIntegerv(u32 pname,i32* params);
extern "C" u8* glGetString(u32 name);
extern "C" void glGetTexImage(u32 target,i32 level,u32 format,u32 ttype,voidptr pixels);
extern "C" void glGetTexParameterfv(u32 target,u32 pname,float32* params);
extern "C" void glGetTexParameteriv(u32 target,u32 pname,i32* params);
extern "C" void glGetTexLevelParameterfv(u32 target,i32 level,u32 pname,float32* params);
extern "C" void glGetTexLevelParameteriv(u32 target,i32 level,u32 pname,i32* params);
extern "C" u8 glIsEnabled(u32 cap);
extern "C" void glDepthRange(float64 near,float64 far);
extern "C" void glViewport(i32 x,i32 y,i32 width,i32 height);
extern "C" void glDrawArrays(u32 mode,i32 first,i32 count);
extern "C" void glDrawElements(u32 mode,i32 count,u32 ttype,voidptr indices);
extern "C" void glPolygonOffset(float32 factor,float32 units);
extern "C" void glCopyTexImage1D(u32 target,i32 level,u32 internalformat,i32 x,i32 y,i32 width,i32 border);
extern "C" void glCopyTexImage2D(u32 target,i32 level,u32 internalformat,i32 x,i32 y,i32 width,i32 height,i32 border);
extern "C" void glCopyTexSubImage1D(u32 target,i32 level,i32 xoffset,i32 x,i32 y,i32 width);
extern "C" void glCopyTexSubImage2D(u32 target,i32 level,i32 xoffset,i32 yoffset,i32 x,i32 y,i32 width,i32 height);
extern "C" void glTexSubImage1D(u32 target,i32 level,i32 xoffset,i32 width,u32 format,u32 ttype,voidptr pixels);
extern "C" void glTexSubImage2D(u32 target,i32 level,i32 xoffset,i32 yoffset,i32 width,i32 height,u32 format,u32 ttype,voidptr pixels);
extern "C" void glBindTexture(u32 target,u32 texture);
extern "C" void glDeleteTextures(i32 n,u32* textures);
extern "C" void glGenTextures(i32 n,u32* textures);
extern "C" u8 glIsTexture(u32 texture);
extern "C" void glBlendColor(float32 red,float32 green,float32 blue,float32 alpha);
extern "C" void glBlendEquation(u32 mode);
extern "C" void glDrawRangeElements(u32 mode,u32 start,u32 end,i32 count,u32 ttype,voidptr indices);
extern "C" void glTexImage3D(u32 target,i32 level,i32 internalformat,i32 width,i32 height,i32 depth,i32 border,u32 format,u32 ttype,voidptr pixels);
extern "C" void glTexSubImage3D(u32 target,i32 level,i32 xoffset,i32 yoffset,i32 zoffset,i32 width,i32 height,i32 depth,u32 format,u32 ttype,voidptr pixels);
extern "C" void glCopyTexSubImage3D(u32 target,i32 level,i32 xoffset,i32 yoffset,i32 zoffset,i32 x,i32 y,i32 width,i32 height);
extern "C" void glActiveTexture(u32 texture);
extern "C" void glSampleCoverage(float32 value,u8 invert);
extern "C" void glCompressedTexImage3D(u32 target,i32 level,u32 internalformat,i32 width,i32 height,i32 depth,i32 border,i32 imageSize,voidptr data);
extern "C" void glCompressedTexImage2D(u32 target,i32 level,u32 internalformat,i32 width,i32 height,i32 border,i32 imageSize,voidptr data);
extern "C" void glCompressedTexImage1D(u32 target,i32 level,u32 internalformat,i32 width,i32 border,i32 imageSize,voidptr data);
extern "C" void glCompressedTexSubImage3D(u32 target,i32 level,i32 xoffset,i32 yoffset,i32 zoffset,i32 width,i32 height,i32 depth,u32 format,i32 imageSize,voidptr data);
extern "C" void glCompressedTexSubImage2D(u32 target,i32 level,i32 xoffset,i32 yoffset,i32 width,i32 height,u32 format,i32 imageSize,voidptr data);
extern "C" void glCompressedTexSubImage1D(u32 target,i32 level,i32 xoffset,i32 width,u32 format,i32 imageSize,voidptr data);
extern "C" void glGetCompressedTexImage(u32 target,i32 level,voidptr img);
extern "C" void glBlendfnSeparate(u32 sfactorRGB,u32 dfactorRGB,u32 sfactorAlpha,u32 dfactorAlpha);
extern "C" void glMultiDrawArrays(u32 mode,i32* first,i32* count,i32 drawcount);
extern "C" void glMultiDrawElements(u32 mode,i32* count,u32 ttype,voidptr* indices,i32 drawcount);
extern "C" void glPointParameterf(u32 pname,float32 param);
extern "C" void glPointParameterfv(u32 pname,float32* params);
extern "C" void glPointParameteri(u32 pname,i32 param);
extern "C" void glPointParameteriv(u32 pname,i32* params);
extern "C" void glGenQueries(i32 n,u32* ids);
extern "C" void glDeleteQueries(i32 n,u32* ids);
extern "C" u8 glIsQuery(u32 id);
extern "C" void glBeginQuery(u32 target,u32 id);
extern "C" void glEndQuery(u32 target);
extern "C" void glGetQueryiv(u32 target,u32 pname,i32* params);
extern "C" void glGetQueryObjectiv(u32 id,u32 pname,i32* params);
extern "C" void glGetQueryObjectuiv(u32 id,u32 pname,u32* params);
extern "C" void glBindBuffer(u32 target,u32 buffer);
extern "C" void glDeleteBuffers(i32 n,u32* buffers);
extern "C" void glGenBuffers(i32 n,u32* buffers);
extern "C" u8 glIsBuffer(u32 buffer);
extern "C" void glBufferData(u32 target,i64 size,voidptr data,u32 usage);
extern "C" void glBufferSubData(u32 target,i64 offset,i64 size,voidptr data);
extern "C" void glGetBufferSubData(u32 target,i64 offset,i64 size,voidptr data);
extern "C" voidptr glMapBuffer(u32 target,u32 access);
extern "C" u8 glUnmapBuffer(u32 target);
extern "C" void glGetBufferParameteriv(u32 target,u32 pname,i32* params);
extern "C" void glGetBufferPointerv(u32 target,u32 pname,voidptr* params);
extern "C" void glBlendEquationSeparate(u32 modeRGB,u32 modeAlpha);
extern "C" void glDrawBuffers(i32 n,u32* bufs);
extern "C" void glStencilOpSeparate(u32 face,u32 sfail,u32 dpfail,u32 dppass);
extern "C" void glStencilfnSeparate(u32 face,u32 func,i32 sref,u32 mask);
extern "C" void glStencilMaskSeparate(u32 face,u32 mask);
extern "C" void glAttachShader(u32 program,u32 shader);
extern "C" void glBindAttribLocation(u32 program,u32 index,u8* name);
extern "C" void glCompileShader(u32 shader);
extern "C" u32 glCreateProgram();
extern "C" u32 glCreateShader(u32 ttype);
extern "C" void glDeleteProgram(u32 program);
extern "C" void glDeleteShader(u32 shader);
extern "C" void glDetachShader(u32 program,u32 shader);
extern "C" void glDisableVertexAttribArray(u32 index);
extern "C" void glEnableVertexAttribArray(u32 index);
extern "C" void glGetActiveAttrib(u32 program,u32 index,i32 bufSize,i32* length,i32* size,u32* ttype,u8* name);
extern "C" void glGetActiveUniform(u32 program,u32 index,i32 bufSize,i32* length,i32* size,u32* ttype,u8* name);
extern "C" void glGetAttachedShaders(u32 program,i32 maxCount,i32* count,u32* shaders);
extern "C" i64 glGetAttribLocation(u32 program,u8* name);
extern "C" void glGetProgramiv(u32 program,u32 pname,i32* params);
extern "C" void glGetProgramInfoLog(u32 program,i32 bufSize,i32* length,u8* infoLog);
extern "C" void glGetShaderiv(u32 shader,u32 pname,i32* params);
extern "C" void glGetShaderInfoLog(u32 shader,i32 bufSize,i32* length,u8* infoLog);
extern "C" void glGetShaderSource(u32 shader,i32 bufSize,i32* length,u8* source);
extern "C" i32 glGetUniformLocation(u32 program,u8* name);
extern "C" void glGetUniformfv(u32 program,i32 location,float32* params);
extern "C" void glGetUniformiv(u32 program,i32 location,i32* params);
extern "C" void glGetVertexAttribdv(u32 index,u32 pname,float64* params);
extern "C" void glGetVertexAttribfv(u32 index,u32 pname,float32* params);
extern "C" void glGetVertexAttribiv(u32 index,u32 pname,i32* params);
extern "C" void glGetVertexAttribPointerv(u32 index,u32 pname,voidptr* pointer);
extern "C" u8 glIsProgram(u32 program);
extern "C" u8 glIsShader(u32 shader);
extern "C" void glLinkProgram(u32 program);
extern "C" void glShaderSource(u32 shader,i32 count,u8** string,i32* length);
extern "C" void glUseProgram(u32 program);
extern "C" void glUniform1f(i32 location,float32 v0);
extern "C" void glUniform2f(i32 location,float32 v0,float32 v1);
extern "C" void glUniform3f(i32 location,float32 v0,float32 v1,float32 v2);
extern "C" void glUniform4f(i32 location,float32 v0,float32 v1,float32 v2,float32 v3);
extern "C" void glUniform1i(i32 location,i32 v0);
extern "C" void glUniform2i(i32 location,i32 v0,i32 v1);
extern "C" void glUniform3i(i32 location,i32 v0,i32 v1,i32 v2);
extern "C" void glUniform4i(i32 location,i32 v0,i32 v1,i32 v2,i32 v3);
extern "C" void glUniform1fv(i32 location,i32 count,float32* value);
extern "C" void glUniform2fv(i32 location,i32 count,float32* value);
extern "C" void glUniform3fv(i32 location,i32 count,float32* value);
extern "C" void glUniform4fv(i32 location,i32 count,float32* value);
extern "C" void glUniform1iv(i32 location,i32 count,i32* value);
extern "C" void glUniform2iv(i32 location,i32 count,i32* value);
extern "C" void glUniform3iv(i32 location,i32 count,i32* value);
extern "C" void glUniform4iv(i32 location,i32 count,i32* value);
extern "C" void glUniformMatrix2fv(i32 location,i32 count,u8 transpose,float32* value);
extern "C" void glUniformMatrix3fv(i32 location,i32 count,u8 transpose,float32* value);
extern "C" void glUniformMatrix4fv(i32 location,i32 count,u8 transpose,float32* value);
extern "C" void glValidateProgram(u32 program);
extern "C" void glVertexAttrib1d(u32 index,float64 x);
extern "C" void glVertexAttrib1dv(u32 index,float64* v);
extern "C" void glVertexAttrib1f(u32 index,float32 x);
extern "C" void glVertexAttrib1fv(u32 index,float32* v);
extern "C" void glVertexAttrib1s(u32 index,i16 x);
extern "C" void glVertexAttrib1sv(u32 index,i16* v);
extern "C" void glVertexAttrib2d(u32 index,float64 x,float64 y);
extern "C" void glVertexAttrib2dv(u32 index,float64* v);
extern "C" void glVertexAttrib2f(u32 index,float32 x,float32 y);
extern "C" void glVertexAttrib2fv(u32 index,float32* v);
extern "C" void glVertexAttrib2s(u32 index,i16 x,i16 y);
extern "C" void glVertexAttrib2sv(u32 index,i16* v);
extern "C" void glVertexAttrib3d(u32 index,float64 x,float64 y,float64 z);
extern "C" void glVertexAttrib3dv(u32 index,float64* v);
extern "C" void glVertexAttrib3f(u32 index,float32 x,float32 y,float32 z);
extern "C" void glVertexAttrib3fv(u32 index,float32* v);
extern "C" void glVertexAttrib3s(u32 index,i16 x,i16 y,i16 z);
extern "C" void glVertexAttrib3sv(u32 index,i16* v);
extern "C" void glVertexAttrib4Nbv(u32 index,i8* v);
extern "C" void glVertexAttrib4Niv(u32 index,i32* v);
extern "C" void glVertexAttrib4Nsv(u32 index,i16* v);
extern "C" void glVertexAttrib4Nub(u32 index,u8 x,u8 y,u8 z,u8 w);
extern "C" void glVertexAttrib4Nubv(u32 index,u8* v);
extern "C" void glVertexAttrib4Nuiv(u32 index,u32* v);
extern "C" void glVertexAttrib4Nusv(u32 index,u16* v);
extern "C" void glVertexAttrib4bv(u32 index,i8* v);
extern "C" void glVertexAttrib4d(u32 index,float64 x,float64 y,float64 z,float64 w);
extern "C" void glVertexAttrib4dv(u32 index,float64* v);
extern "C" void glVertexAttrib4f(u32 index,float32 x,float32 y,float32 z,float32 w);
extern "C" void glVertexAttrib4fv(u32 index,float32* v);
extern "C" void glVertexAttrib4iv(u32 index,i32* v);
extern "C" void glVertexAttrib4s(u32 index,i16 x,i16 y,i16 z,i16 w);
extern "C" void glVertexAttrib4sv(u32 index,i16* v);
extern "C" void glVertexAttrib4ubv(u32 index,u8* v);
extern "C" void glVertexAttrib4uiv(u32 index,u32* v);
extern "C" void glVertexAttrib4usv(u32 index,u16* v);
extern "C" void glVertexAttribPointer(u32 index,i32 size,u32 ttype,u8 normalized,i32 stride,voidptr pointer);
extern "C" void glUniformMatrix2x3fv(i32 location,i32 count,u8 transpose,float32* value);
extern "C" void glUniformMatrix3x2fv(i32 location,i32 count,u8 transpose,float32* value);
extern "C" void glUniformMatrix2x4fv(i32 location,i32 count,u8 transpose,float32* value);
extern "C" void glUniformMatrix4x2fv(i32 location,i32 count,u8 transpose,float32* value);
extern "C" void glUniformMatrix3x4fv(i32 location,i32 count,u8 transpose,float32* value);
extern "C" void glUniformMatrix4x3fv(i32 location,i32 count,u8 transpose,float32* value);
extern "C" void glColorMaski(u32 index,u8 r,u8 g,u8 b,u8 a);
extern "C" void glGetBooleani_v(u32 target,u32 index,u8* data);
extern "C" void glGetIntegeri_v(u32 target,u32 index,i32* data);
extern "C" void glEnablei(u32 target,u32 index);
extern "C" void glDisablei(u32 target,u32 index);
extern "C" u8 glIsEnabledi(u32 target,u32 index);
extern "C" void glBeginTransformFeedback(u32 primitiveMode);
extern "C" void glEndTransformFeedback();
extern "C" void glBindBufferRange(u32 target,u32 index,u32 buffer,i64 offset,i64 size);
extern "C" void glBindBufferBase(u32 target,u32 index,u32 buffer);
extern "C" void glTransformFeedbackVaryings(u32 program,i32 count,i8** varyings,u32 bufferMode);
extern "C" void glGetTransformFeedbackVarying(u32 program,u32 index,i32 bufSize,i32* length,i32* size,u32* ttype,i8* name);
extern "C" void glClampColor(u32 target,u32 clamp);
extern "C" void glBeginConditionalRender(u32 id,u32 mode);
extern "C" void glEndConditionalRender();
extern "C" void glVertexAttribIPointer(u32 index,i32 size,u32 ttype,i32 stride,voidptr pointer);
extern "C" void glGetVertexAttribIiv(u32 index,u32 pname,i32* params);
extern "C" void glGetVertexAttribIuiv(u32 index,u32 pname,u32* params);
extern "C" void glVertexAttribI1i(u32 index,i32 x);
extern "C" void glVertexAttribI2i(u32 index,i32 x,i32 y);
extern "C" void glVertexAttribI3i(u32 index,i32 x,i32 y,i32 z);
extern "C" void glVertexAttribI4i(u32 index,i32 x,i32 y,i32 z,i32 w);
extern "C" void glVertexAttribI1ui(u32 index,u32 x);
extern "C" void glVertexAttribI2ui(u32 index,u32 x,u32 y);
extern "C" void glVertexAttribI3ui(u32 index,u32 x,u32 y,u32 z);
extern "C" void glVertexAttribI4ui(u32 index,u32 x,u32 y,u32 z,u32 w);
extern "C" void glVertexAttribI1iv(u32 index,i32* v);
extern "C" void glVertexAttribI2iv(u32 index,i32* v);
extern "C" void glVertexAttribI3iv(u32 index,i32* v);
extern "C" void glVertexAttribI4iv(u32 index,i32* v);
extern "C" void glVertexAttribI1uiv(u32 index,u32* v);
extern "C" void glVertexAttribI2uiv(u32 index,u32* v);
extern "C" void glVertexAttribI3uiv(u32 index,u32* v);
extern "C" void glVertexAttribI4uiv(u32 index,u32* v);
extern "C" void glVertexAttribI4bv(u32 index,i8* v);
extern "C" void glVertexAttribI4sv(u32 index,i16* v);
extern "C" void glVertexAttribI4ubv(u32 index,u8* v);
extern "C" void glVertexAttribI4usv(u32 index,u16* v);
extern "C" void glGetUniformuiv(u32 program,i32 location,u32* params);
extern "C" void glBindFragDataLocation(u32 program,u32 color,i8* name);
extern "C" i64 glGetFragDataLocation(u32 program,i8* name);
extern "C" void glUniform1ui(i32 location,u32 v0);
extern "C" void glUniform2ui(i32 location,u32 v0,u32 v1);
extern "C" void glUniform3ui(i32 location,u32 v0,u32 v1,u32 v2);
extern "C" void glUniform4ui(i32 location,u32 v0,u32 v1,u32 v2,u32 v3);
extern "C" void glUniform1uiv(i32 location,i32 count,u32* value);
extern "C" void glUniform2uiv(i32 location,i32 count,u32* value);
extern "C" void glUniform3uiv(i32 location,i32 count,u32* value);
extern "C" void glUniform4uiv(i32 location,i32 count,u32* value);
extern "C" void glTexParameterIiv(u32 target,u32 pname,i32* params);
extern "C" void glTexParameterIuiv(u32 target,u32 pname,u32* params);
extern "C" void glGetTexParameterIiv(u32 target,u32 pname,i32* params);
extern "C" void glGetTexParameterIuiv(u32 target,u32 pname,u32* params);
extern "C" void glClearBufferiv(u32 buffer,i32 drawbuffer,i32* value);
extern "C" void glClearBufferuiv(u32 buffer,i32 drawbuffer,u32* value);
extern "C" void glClearBufferfv(u32 buffer,i32 drawbuffer,float32* value);
extern "C" void glClearBufferfi(u32 buffer,i32 drawbuffer,float32 depth,i32 stencil);
extern "C" u8* glGetStringi(u32 name,u32 index);
extern "C" void glDrawArraysInstanced(u32 mode,i32 first,i32 count,i32 instancecount);
extern "C" void glDrawElementsInstanced(u32 mode,i32 count,u32 ttype,voidptr indices,i32 instancecount);
extern "C" void glTexBuffer(u32 target,u32 internalformat,u32 buffer);
extern "C" void glPrimitiveRestartIndex(u32 index);
extern "C" void glGetInteger64i_v(u32 target,u32 index,i64* data);
extern "C" void glGetBufferParameteri64v(u32 target,u32 pname,i64* params);
extern "C" void glFramebufferTexture(u32 target,u32 attachment,u32 texture,i32 level);
extern "C" void glVertexAttribDivisor(u32 index,u32 divisor);
extern "C" void glMinSampleShading(float32 value);
extern "C" void glBlendEquationi(u32 buf,u32 mode);
extern "C" void glBlendEquationSeparatei(u32 buf,u32 modeRGB,u32 modeAlpha);
extern "C" void glBlendfni(u32 buf,u32 src,u32 dst);
extern "C" void glBlendfnSeparatei(u32 buf,u32 srcRGB,u32 dstRGB,u32 srcAlpha,u32 dstAlpha);
extern "C" u8 glIsRenderbuffer(u32 renderbuffer);
extern "C" void glBindRenderbuffer(u32 target,u32 renderbuffer);
extern "C" void glDeleteRenderbuffers(i32 n,u32* renderbuffers);
extern "C" void glGenRenderbuffers(i32 n,u32* renderbuffers);
extern "C" void glRenderbufferStorage(u32 target,u32 internalformat,i32 width,i32 height);
extern "C" void glGetRenderbufferParameteriv(u32 target,u32 pname,i32* params);
extern "C" u8 glIsFramebuffer(u32 framebuffer);
extern "C" void glBindFramebuffer(u32 target,u32 framebuffer);
extern "C" void glDeleteFramebuffers(i32 n,u32* framebuffers);
extern "C" void glGenFramebuffers(i32 n,u32* framebuffers);
extern "C" u32 glCheckFramebufferStatus(u32 target);
extern "C" void glFramebufferTexture1D(u32 target,u32 attachment,u32 textarget,u32 texture,i32 level);
extern "C" void glFramebufferTexture2D(u32 target,u32 attachment,u32 textarget,u32 texture,i32 level);
extern "C" void glFramebufferTexture3D(u32 target,u32 attachment,u32 textarget,u32 texture,i32 level,i32 zoffset);
extern "C" void glFramebufferRenderbuffer(u32 target,u32 attachment,u32 renderbuffertarget,u32 renderbuffer);
extern "C" void glGetFramebufferAttachmentParameteriv(u32 target,u32 attachment,u32 pname,i32* params);
extern "C" void glGenerateMipmap(u32 target);
extern "C" void glBlitFramebuffer(i32 srcX0,i32 srcY0,i32 srcX1,i32 srcY1,i32 dstX0,i32 dstY0,i32 dstX1,i32 dstY1,u32 mask,u32 filter);
extern "C" void glRenderbufferStorageMultisample(u32 target,i32 samples,u32 internalformat,i32 width,i32 height);
extern "C" void glFramebufferTextureLayer(u32 target,u32 attachment,u32 texture,i32 level,i32 layer);
extern "C" voidptr glMapBufferRange(u32 target,i64 offset,i64 length,u32 access);
extern "C" void glFlushMappedBufferRange(u32 target,i64 offset,i64 length);
extern "C" void glBindVertexArray(u32 array);
extern "C" void glDeleteVertexArrays(i32 n,u32* arrays);
extern "C" void glGenVertexArrays(i32 n,u32* arrays);
extern "C" u8 glIsVertexArray(u32 array);
extern "C" void glGetUniformIndices(u32 program,i32 uniformCount,u8** uniformNames,u32* uniformIndices);
extern "C" void glGetActiveUniformsiv(u32 program,i32 uniformCount,u32* uniformIndices,u32 pname,i32* params);
extern "C" void glGetActiveUniformName(u32 program,u32 uniformIndex,i32 bufSize,i32* length,u8* uniformName);
extern "C" u32 glGetUniformBlockIndex(u32 program,u8* uniformBlockName);
extern "C" void glGetActiveUniformBlockiv(u32 program,u32 uniformBlockIndex,u32 pname,i32* params);
extern "C" void glGetActiveUniformBlockName(u32 program,u32 uniformBlockIndex,i32 bufSize,i32* length,u8* uniformBlockName);
extern "C" void glUniformBlockBinding(u32 program,u32 uniformBlockIndex,u32 uniformBlockBinding);
extern "C" void glCopyBufferSubData(u32 readTarget,u32 writeTarget,i64 readOffset,i64 writeOffset,i64 size);
extern "C" void glDrawElementsBaseVertex(u32 mode,i32 count,u32 ttype,voidptr indices,i32 basevertex);
extern "C" void glDrawRangeElementsBaseVertex(u32 mode,u32 start,u32 end,i32 count,u32 ttype,voidptr indices,i32 basevertex);
extern "C" void glDrawElementsInstancedBaseVertex(u32 mode,i32 count,u32 ttype,voidptr indices,i32 instancecount,i32 basevertex);
extern "C" void glMultiDrawElementsBaseVertex(u32 mode,i32* count,u32 ttype,voidptr* indices,i32 drawcount,i32* basevertex);
extern "C" void glProvokingVertex(u32 mode);
extern "C" void glTexImage2DMultisample(u32 target,i32 samples,i32 internalformat,i32 width,i32 height,u8 fixedsamplelocations);
extern "C" void glTexImage3DMultisample(u32 target,i32 samples,i32 internalformat,i32 width,i32 height,i32 depth,u8 fixedsamplelocations);
extern "C" void glGetMultisamplefv(u32 pname,u32 index,float32* value);
extern "C" void glSampleMaski(u32 index,u32 mask);
extern "C" void glBindFragDataLocationIndexed(u32 program,u32 colorNumber,u32 index,i8* name);
extern "C" i64 glGetFragDataIndex(u32 program,i8* name);
extern "C" void glGenSamplers(i32 count,u32* samplers);
extern "C" void glDeleteSamplers(i32 count,u32* samplers);
extern "C" u8 glIsSampler(u32 sampler);
extern "C" void glBindSampler(u32 unit,u32 sampler);
extern "C" void glSamplerParameteri(u32 sampler,u32 pname,i32 param);
extern "C" void glSamplerParameteriv(u32 sampler,u32 pname,i32* param);
extern "C" void glSamplerParameterf(u32 sampler,u32 pname,float32 param);
extern "C" void glSamplerParameterfv(u32 sampler,u32 pname,float32* param);
extern "C" void glSamplerParameterIiv(u32 sampler,u32 pname,i32* param);
extern "C" void glSamplerParameterIuiv(u32 sampler,u32 pname,u32* param);
extern "C" void glGetSamplerParameteriv(u32 sampler,u32 pname,i32* params);
extern "C" void glGetSamplerParameterIiv(u32 sampler,u32 pname,i32* params);
extern "C" void glGetSamplerParameterfv(u32 sampler,u32 pname,float32* params);
extern "C" void glGetSamplerParameterIuiv(u32 sampler,u32 pname,u32* params);
extern "C" void glQueryCounter(u32 id,u32 target);
extern "C" void glGetQueryObjecti64v(u32 id,u32 pname,i64* params);
extern "C" void glGetQueryObjectui64v(u32 id,u32 pname,u64* params);
extern "C" void glVertexAttribP1ui(u32 index,u32 ttype,u8 normalized,u32 value);
extern "C" void glVertexAttribP1uiv(u32 index,u32 ttype,u8 normalized,u32* value);
extern "C" void glVertexAttribP2ui(u32 index,u32 ttype,u8 normalized,u32 value);
extern "C" void glVertexAttribP2uiv(u32 index,u32 ttype,u8 normalized,u32* value);
extern "C" void glVertexAttribP3ui(u32 index,u32 ttype,u8 normalized,u32 value);
extern "C" void glVertexAttribP3uiv(u32 index,u32 ttype,u8 normalized,u32* value);
extern "C" void glVertexAttribP4ui(u32 index,u32 ttype,u8 normalized,u32 value);
extern "C" void glVertexAttribP4uiv(u32 index,u32 ttype,u8 normalized,u32* value);
extern "C" void glDrawArraysIndirect(u32 mode,voidptr indirect);
extern "C" void glDrawElementsIndirect(u32 mode,u32 ttype,voidptr indirect);
extern "C" void glUniform1d(i32 location,float64 x);
extern "C" void glUniform2d(i32 location,float64 x,float64 y);
extern "C" void glUniform3d(i32 location,float64 x,float64 y,float64 z);
extern "C" void glUniform4d(i32 location,float64 x,float64 y,float64 z,float64 w);
extern "C" void glUniform1dv(i32 location,i32 count,float64* value);
extern "C" void glUniform2dv(i32 location,i32 count,float64* value);
extern "C" void glUniform3dv(i32 location,i32 count,float64* value);
extern "C" void glUniform4dv(i32 location,i32 count,float64* value);
extern "C" void glUniformMatrix2dv(i32 location,i32 count,u8 transpose,float64* value);
extern "C" void glUniformMatrix3dv(i32 location,i32 count,u8 transpose,float64* value);
extern "C" void glUniformMatrix4dv(i32 location,i32 count,u8 transpose,float64* value);
extern "C" void glUniformMatrix2x3dv(i32 location,i32 count,u8 transpose,float64* value);
extern "C" void glUniformMatrix2x4dv(i32 location,i32 count,u8 transpose,float64* value);
extern "C" void glUniformMatrix3x2dv(i32 location,i32 count,u8 transpose,float64* value);
extern "C" void glUniformMatrix3x4dv(i32 location,i32 count,u8 transpose,float64* value);
extern "C" void glUniformMatrix4x2dv(i32 location,i32 count,u8 transpose,float64* value);
extern "C" void glUniformMatrix4x3dv(i32 location,i32 count,u8 transpose,float64* value);
extern "C" void glGetUniformdv(u32 program,i32 location,float64* params);
extern "C" i64 glGetSubroutineUniformLocation(u32 program,u32 shaderttype,i8* name);
extern "C" u64 glGetSubroutineIndex(u32 program,u32 shaderttype,i8* name);
extern "C" void glGetActiveSubroutineUniformiv(u32 program,u32 shaderttype,u32 index,u32 pname,i32* values);
extern "C" void glGetActiveSubroutineUniformName(u32 program,u32 shaderttype,u32 index,i32 bufsize,i32* length,i8* name);
extern "C" void glGetActiveSubroutineName(u32 program,u32 shaderttype,u32 index,i32 bufsize,i32* length,i8* name);
extern "C" void glUniformSubroutinesuiv(u32 shaderttype,i32 count,u32* indices);
extern "C" void glGetUniformSubroutineuiv(u32 shaderttype,i32 location,u32* params);
extern "C" void glGetProgramStageiv(u32 program,u32 shaderttype,u32 pname,i32* values);
extern "C" void glPatchParameteri(u32 pname,i32 value);
extern "C" void glPatchParameterfv(u32 pname,float32* values);
extern "C" void glBindTransformFeedback(u32 target,u32 id);
extern "C" void glDeleteTransformFeedbacks(i32 n,u32* ids);
extern "C" void glGenTransformFeedbacks(i32 n,u32* ids);
extern "C" u8 glIsTransformFeedback(u32 id);
extern "C" void glPauseTransformFeedback();
extern "C" void glResumeTransformFeedback();
extern "C" void glDrawTransformFeedback(u32 mode,u32 id);
extern "C" void glDrawTransformFeedbackStream(u32 mode,u32 id,u32 stream);
extern "C" void glBeginQueryIndexed(u32 target,u32 index,u32 id);
extern "C" void glEndQueryIndexed(u32 target,u32 index);
extern "C" void glGetQueryIndexediv(u32 target,u32 index,u32 pname,i32* params);
extern "C" void glReleaseShaderCompiler();
extern "C" void glShaderBinary(i32 count,u32* shaders,u32 binaryformat,voidptr binary,i32 length);
extern "C" void glGetShaderPrecisionFormat(u32 shaderttype,u32 precisionttype,i32* range,i32* precision);
extern "C" void glDepthRangef(float32 n,float32 f);
extern "C" void glClearDepthf(float32 d);
extern "C" void glGetProgramBinary(u32 program,i32 bufSize,i32* length,u32* binaryFormat,voidptr binary);
extern "C" void glProgramBinary(u32 program,u32 binaryFormat,voidptr binary,i32 length);
extern "C" void glProgramParameteri(u32 program,u32 pname,i32 value);
extern "C" void glUseProgramStages(u32 pipeline,u32 stages,u32 program);
extern "C" void glActiveShaderProgram(u32 pipeline,u32 program);
extern "C" u64 glCreateShaderProgramv(u32 ttype,i32 count,i8** strings);
extern "C" void glBindProgramPipeline(u32 pipeline);
extern "C" void glDeleteProgramPipelines(i32 n,u32* pipelines);
extern "C" void glGenProgramPipelines(i32 n,u32* pipelines);
extern "C" u8 glIsProgramPipeline(u32 pipeline);
extern "C" void glGetProgramPipelineiv(u32 pipeline,u32 pname,i32* params);
extern "C" void glProgramUniform1i(u32 program,i32 location,i32 v0);
extern "C" void glProgramUniform1iv(u32 program,i32 location,i32 count,i32* value);
extern "C" void glProgramUniform1f(u32 program,i32 location,float32 v0);
extern "C" void glProgramUniform1fv(u32 program,i32 location,i32 count,float32* value);
extern "C" void glProgramUniform1d(u32 program,i32 location,float64 v0);
extern "C" void glProgramUniform1dv(u32 program,i32 location,i32 count,float64* value);
extern "C" void glProgramUniform1ui(u32 program,i32 location,u32 v0);
extern "C" void glProgramUniform1uiv(u32 program,i32 location,i32 count,u32* value);
extern "C" void glProgramUniform2i(u32 program,i32 location,i32 v0,i32 v1);
extern "C" void glProgramUniform2iv(u32 program,i32 location,i32 count,i32* value);
extern "C" void glProgramUniform2f(u32 program,i32 location,float32 v0,float32 v1);
extern "C" void glProgramUniform2fv(u32 program,i32 location,i32 count,float32* value);
extern "C" void glProgramUniform2d(u32 program,i32 location,float64 v0,float64 v1);
extern "C" void glProgramUniform2dv(u32 program,i32 location,i32 count,float64* value);
extern "C" void glProgramUniform2ui(u32 program,i32 location,u32 v0,u32 v1);
extern "C" void glProgramUniform2uiv(u32 program,i32 location,i32 count,u32* value);
extern "C" void glProgramUniform3i(u32 program,i32 location,i32 v0,i32 v1,i32 v2);
extern "C" void glProgramUniform3iv(u32 program,i32 location,i32 count,i32* value);
extern "C" void glProgramUniform3f(u32 program,i32 location,float32 v0,float32 v1,float32 v2);
extern "C" void glProgramUniform3fv(u32 program,i32 location,i32 count,float32* value);
extern "C" void glProgramUniform3d(u32 program,i32 location,float64 v0,float64 v1,float64 v2);
extern "C" void glProgramUniform3dv(u32 program,i32 location,i32 count,float64* value);
extern "C" void glProgramUniform3ui(u32 program,i32 location,u32 v0,u32 v1,u32 v2);
extern "C" void glProgramUniform3uiv(u32 program,i32 location,i32 count,u32* value);
extern "C" void glProgramUniform4i(u32 program,i32 location,i32 v0,i32 v1,i32 v2,i32 v3);
extern "C" void glProgramUniform4iv(u32 program,i32 location,i32 count,i32* value);
extern "C" void glProgramUniform4f(u32 program,i32 location,float32 v0,float32 v1,float32 v2,float32 v3);
extern "C" void glProgramUniform4fv(u32 program,i32 location,i32 count,float32* value);
extern "C" void glProgramUniform4d(u32 program,i32 location,float64 v0,float64 v1,float64 v2,float64 v3);
extern "C" void glProgramUniform4dv(u32 program,i32 location,i32 count,float64* value);
extern "C" void glProgramUniform4ui(u32 program,i32 location,u32 v0,u32 v1,u32 v2,u32 v3);
extern "C" void glProgramUniform4uiv(u32 program,i32 location,i32 count,u32* value);
extern "C" void glProgramUniformMatrix2fv(u32 program,i32 location,i32 count,u8 transpose,float32* value);
extern "C" void glProgramUniformMatrix3fv(u32 program,i32 location,i32 count,u8 transpose,float32* value);
extern "C" void glProgramUniformMatrix4fv(u32 program,i32 location,i32 count,u8 transpose,float32* value);
extern "C" void glProgramUniformMatrix2dv(u32 program,i32 location,i32 count,u8 transpose,float64* value);
extern "C" void glProgramUniformMatrix3dv(u32 program,i32 location,i32 count,u8 transpose,float64* value);
extern "C" void glProgramUniformMatrix4dv(u32 program,i32 location,i32 count,u8 transpose,float64* value);
extern "C" void glProgramUniformMatrix2x3fv(u32 program,i32 location,i32 count,u8 transpose,float32* value);
extern "C" void glProgramUniformMatrix3x2fv(u32 program,i32 location,i32 count,u8 transpose,float32* value);
extern "C" void glProgramUniformMatrix2x4fv(u32 program,i32 location,i32 count,u8 transpose,float32* value);
extern "C" void glProgramUniformMatrix4x2fv(u32 program,i32 location,i32 count,u8 transpose,float32* value);
extern "C" void glProgramUniformMatrix3x4fv(u32 program,i32 location,i32 count,u8 transpose,float32* value);
extern "C" void glProgramUniformMatrix4x3fv(u32 program,i32 location,i32 count,u8 transpose,float32* value);
extern "C" void glProgramUniformMatrix2x3dv(u32 program,i32 location,i32 count,u8 transpose,float64* value);
extern "C" void glProgramUniformMatrix3x2dv(u32 program,i32 location,i32 count,u8 transpose,float64* value);
extern "C" void glProgramUniformMatrix2x4dv(u32 program,i32 location,i32 count,u8 transpose,float64* value);
extern "C" void glProgramUniformMatrix4x2dv(u32 program,i32 location,i32 count,u8 transpose,float64* value);
extern "C" void glProgramUniformMatrix3x4dv(u32 program,i32 location,i32 count,u8 transpose,float64* value);
extern "C" void glProgramUniformMatrix4x3dv(u32 program,i32 location,i32 count,u8 transpose,float64* value);
extern "C" void glValidateProgramPipeline(u32 pipeline);
extern "C" void glGetProgramPipelineInfoLog(u32 pipeline,i32 bufSize,i32* length,i8* infoLog);
extern "C" void glVertexAttribL1d(u32 index,float64 x);
extern "C" void glVertexAttribL2d(u32 index,float64 x,float64 y);
extern "C" void glVertexAttribL3d(u32 index,float64 x,float64 y,float64 z);
extern "C" void glVertexAttribL4d(u32 index,float64 x,float64 y,float64 z,float64 w);
extern "C" void glVertexAttribL1dv(u32 index,float64* v);
extern "C" void glVertexAttribL2dv(u32 index,float64* v);
extern "C" void glVertexAttribL3dv(u32 index,float64* v);
extern "C" void glVertexAttribL4dv(u32 index,float64* v);
extern "C" void glVertexAttribLPointer(u32 index,i32 size,u32 ttype,i32 stride,voidptr pointer);
extern "C" void glGetVertexAttribLdv(u32 index,u32 pname,float64* params);
extern "C" void glViewportArrayv(u32 first,i32 count,float32* v);
extern "C" void glViewportIndexedf(u32 index,float32 x,float32 y,float32 w,float32 h);
extern "C" void glViewportIndexedfv(u32 index,float32* v);
extern "C" void glScissorArrayv(u32 first,i32 count,i32* v);
extern "C" void glScissorIndexed(u32 index,i32 left,i32 bottom,i32 width,i32 height);
extern "C" void glScissorIndexedv(u32 index,i32* v);
extern "C" void glDepthRangeArrayv(u32 first,i32 count,float64* v);
extern "C" void glDepthRangeIndexed(u32 index,float64 n,float64 f);
extern "C" void glGetFloati_v(u32 target,u32 index,float32* data);
extern "C" void glGetDoublei_v(u32 target,u32 index,float64* data);
extern "C" void glBlendFuncSeparatei(u32 buf,u32 srcRGB,u32 dstRGB,u32 srcAlpha,u32 dstAlpha);
extern "C" i32 glfwInit();
extern "C" void glfwTerminate();
extern "C" void glfwGetVersion(u32* major,u32* minor,u32* rev);
extern "C" i8* glfwGetVersionString();
extern "C" i64 glfwSetErrorCallback(i64 cbfun);
extern "C" GLFWmonitor** glfwGetMonitors(u32* count);
extern "C" GLFWmonitor* glfwGetPrimaryMonitor();
extern "C" void glfwGetMonitorPos(GLFWmonitor* monitor,u32* xpos,u32* ypos);
extern "C" void glfwGetMonitorPhysicalSize(GLFWmonitor* monitor,u32* widthMM,u32* heightMM);
extern "C" i8* glfwGetMonitorName(GLFWmonitor* monitor);
extern "C" i64 glfwSetMonitorCallback(i64 cbfun);
extern "C" GLFWvidmode* glfwGetVideoModes(GLFWmonitor* monitor,u32* count);
extern "C" GLFWvidmode* glfwGetVideoMode(GLFWmonitor* monitor);
extern "C" void glfwSetGamma(GLFWmonitor* monitor,float32 gamma);
extern "C" GLFWgammaramp* glfwGetGammaRamp(GLFWmonitor* monitor);
extern "C" void glfwSetGammaRamp(GLFWmonitor* monitor,GLFWgammaramp* ramp);
extern "C" void glfwDefaultWindowHints();
extern "C" void glfwWindowHint(i32 hint,i32 value);
extern "C" GLFWwindow* glfwCreateWindow(u32 width,u32 height,u8* title,GLFWmonitor* monitor,GLFWwindow* share);
extern "C" void glfwDestroyWindow(GLFWwindow* window);
extern "C" u32 glfwWindowShouldClose(GLFWwindow* window);
extern "C" void glfwSetWindowShouldClose(GLFWwindow* window,u32 value);
extern "C" void glfwSetWindowTitle(GLFWwindow* window,i8* title);
extern "C" void glfwSetWindowIcon(GLFWwindow* window,u32 count,GLFWimage* images);
extern "C" void glfwGetWindowPos(GLFWwindow* window,u32* xpos,u32* ypos);
extern "C" void glfwSetWindowPos(GLFWwindow* window,u32 xpos,u32 ypos);
extern "C" void glfwGetWindowSize(GLFWwindow* window,u32* width,u32* height);
extern "C" void glfwSetWindowSizeLimits(GLFWwindow* window,u32 minwidth,u32 minheight,u32 maxwidth,u32 maxheight);
extern "C" void glfwSetWindowAspectRatio(GLFWwindow* window,u32 numer,u32 denom);
extern "C" void glfwSetWindowSize(GLFWwindow* window,u32 width,u32 height);
extern "C" void glfwGetFramebufferSize(GLFWwindow* window,u32* width,u32* height);
extern "C" void glfwGetWindowFrameSize(GLFWwindow* window,u32* left,u32* top,u32* right,u32* bottom);
extern "C" void glfwIconifyWindow(GLFWwindow* window);
extern "C" void glfwRestoreWindow(GLFWwindow* window);
extern "C" void glfwMaximizeWindow(GLFWwindow* window);
extern "C" void glfwShowWindow(GLFWwindow* window);
extern "C" void glfwHideWindow(GLFWwindow* window);
extern "C" void glfwFocusWindow(GLFWwindow* window);
extern "C" GLFWmonitor* glfwGetWindowMonitor(GLFWwindow* window);
extern "C" void glfwSetWindowMonitor(GLFWwindow* window,GLFWmonitor* monitor,u32 xpos,u32 ypos,u32 width,u32 height,u32 refreshRate);
extern "C" u32 glfwGetWindowAttrib(GLFWwindow* window,u32 attrib);
extern "C" void glfwSetWindowUserPointer(GLFWwindow* window,voidptr pointer);
extern "C" voidptr glfwGetWindowUserPointer(GLFWwindow* window);
extern "C" i64 glfwSetWindowPosCallback(GLFWwindow* window,i64 cbfun);
extern "C" i64 glfwSetWindowSizeCallback(GLFWwindow* window,i64 cbfun);
extern "C" i64 glfwSetWindowCloseCallback(GLFWwindow* window,i64 cbfun);
extern "C" i64 glfwSetWindowRefreshCallback(GLFWwindow* window,i64 cbfun);
extern "C" i64 glfwSetWindowFocusCallback(GLFWwindow* window,i64 cbfun);
extern "C" i64 glfwSetWindowIconifyCallback(GLFWwindow* window,i64 cbfun);
extern "C" i64 glfwSetFramebufferSizeCallback(GLFWwindow* window,i64 cbfun);
extern "C" void glfwPollEvents();
extern "C" void glfwWaitEvents();
extern "C" void glfwWaitEventsTimeout(float64 timeout);
extern "C" void glfwPostEmptyEvent();
extern "C" u32 glfwGetInputMode(GLFWwindow* window,u32 mode);
extern "C" void glfwSetInputMode(GLFWwindow* window,u32 mode,u32 value);
extern "C" i8* glfwGetKeyName(u32 key,u32 scancode);
extern "C" u32 glfwGetKey(GLFWwindow* window,u32 key);
extern "C" u32 glfwGetMouseButton(GLFWwindow* window,u32 button);
extern "C" void glfwGetCursorPos(GLFWwindow* window,float64* xpos,float64* ypos);
extern "C" void glfwSetCursorPos(GLFWwindow* window,float64 xpos,float64 ypos);
extern "C" GLFWcursor* glfwCreateCursor(GLFWimage* image,u32 xhot,u32 yhot);
extern "C" GLFWcursor* glfwCreateStandardCursor(u32 shape);
extern "C" void glfwDestroyCursor(GLFWcursor* cursor);
extern "C" void glfwSetCursor(GLFWwindow* window,GLFWcursor* cursor);
extern "C" i64 glfwSetKeyCallback(GLFWwindow* window,i64 cbfun);
extern "C" i64 glfwSetCharCallback(GLFWwindow* window,i64 cbfun);
extern "C" i64 glfwSetCharModsCallback(GLFWwindow* window,i64 cbfun);
extern "C" i64 glfwSetMouseButtonCallback(GLFWwindow* window,i64 cbfun);
extern "C" i64 glfwSetCursorPosCallback(GLFWwindow* window,i64 cbfun);
extern "C" i64 glfwSetCursorEnterCallback(GLFWwindow* window,i64 cbfun);
extern "C" i64 glfwSetScrollCallback(GLFWwindow* window,i64 cbfun);
extern "C" i64 glfwSetDropCallback(GLFWwindow* window,i64 cbfun);
extern "C" u32 glfwJoystickPresent(u32 joy);
extern "C" float32* glfwGetJoystickAxes(u32 joy,u32* count);
extern "C" u8* glfwGetJoystickButtons(u32 joy,u32* count);
extern "C" i8* glfwGetJoystickName(u32 joy);
extern "C" i64 glfwSetJoystickCallback(i64 cbfun);
extern "C" void glfwSetClipboardString(GLFWwindow* window,i8* string);
extern "C" i8* glfwGetClipboardString(GLFWwindow* window);
extern "C" float64 glfwGetTime();
extern "C" void glfwSetTime(float64 time);
extern "C" u64 glfwGetTimerValue();
extern "C" u64 glfwGetTimerFrequency();
extern "C" void glfwMakeContextCurrent(GLFWwindow* window);
extern "C" GLFWwindow* glfwGetCurrentContext();
extern "C" void glfwSwapBuffers(GLFWwindow* window);
extern "C" void glfwSwapInterval(u32 interval);
extern "C" u32 glfwExtensionSupported(i8* extension);
extern "C" i64 glfwGetProcAddress(i8* procname);
extern "C" u32 glfwVulkanSupported();
extern "C" i8** glfwGetRequiredInstanceExtensions(u32* count);
void Assert667(i64 condition,str detail);
void Init0912(Array1& array,i64 length);
void Init1914(Array2& array,i64 length);
void Init2916(Array3& array,i64 length);
void Init3918(Array4& array,i64 length);
void Init4921(Array5& array,i64 length);
void Init51007(Array5& array,i64 length);
void Init61075(Array7& array,i64 length);
u8& opArray0923(Array5& array,i64 index);
u8& opArray1924(Array5& array,i64 index);
i64& opArray0920(Array1& array,i64 index);
i64& opArray3953(Array1& array,i64 index);
i64& opArray4954(Array1& array,i64 index);
Sprite& opArray5955(Array4& array,i64 index);
u8& opArray6958(Array5& array,i64 index);
u8& opArray7959(Array5& array,i64 index);
u8& opArray8960(Array5& array,i64 index);
u8& opArray9961(Array5& array,i64 index);
u8& opArray10962(Array5& array,i64 index);
u8& opArray11963(Array5& array,i64 index);
u8& opArray12964(Array5& array,i64 index);
u16& opArray131001(Array6& array,i64 index);
u16& opArray141002(Array6& array,i64 index);
u16& opArray151003(Array6& array,i64 index);
u16& opArray161004(Array6& array,i64 index);
u16& opArray171005(Array6& array,i64 index);
u16& opArray181006(Array6& array,i64 index);
u8& opArray191009(Array5& array,i64 index);
i64& opArray201053(Array1& array,i64 index);
i64& opArray211054(Array1& array,i64 index);
Transform& opArray221055(Array3& array,i64 index);
u32& opArray231079(Array7& array,i64 index);
i64& opArray241105(Array1& array,i64 index);
Transform& opArray251106(Array3& array,i64 index);
Sprite& opArray261107(Array4& array,i64 index);
Archive& opArray0940(DynamicArray7& array,i64 index);
Archive& opArray1941(DynamicArray7& array,i64 index);
Archive& opArray2945(DynamicArray7& array,i64 index);
Archive& opArray3946(DynamicArray7& array,i64 index);
Archive& opArray4950(DynamicArray7& array,i64 index);
TableNode2& opArray5968(DynamicArray6& array,i64 index);
TableNode2& opArray6969(DynamicArray6& array,i64 index);
TableNode2& opArray7970(DynamicArray6& array,i64 index);
TableNode2& opArray8971(DynamicArray6& array,i64 index);
TableNode2& opArray9972(DynamicArray6& array,i64 index);
TableNode2& opArray10973(DynamicArray6& array,i64 index);
TableNode2& opArray11974(DynamicArray6& array,i64 index);
TableNode2& opArray12975(DynamicArray6& array,i64 index);
TableNode2& opArray13976(DynamicArray6& array,i64 index);
TableNode2& opArray14980(DynamicArray6& array,i64 index);
TableNode2& opArray15981(DynamicArray6& array,i64 index);
TableNode2& opArray16982(DynamicArray6& array,i64 index);
TableNode2& opArray17983(DynamicArray6& array,i64 index);
TableNode2& opArray18984(DynamicArray6& array,i64 index);
TableNode2& opArray19985(DynamicArray6& array,i64 index);
TableNode2& opArray20986(DynamicArray6& array,i64 index);
TableNode2& opArray21987(DynamicArray6& array,i64 index);
TableNode2& opArray22988(DynamicArray6& array,i64 index);
TableNode2& opArray23992(DynamicArray6& array,i64 index);
TableNode2& opArray24993(DynamicArray6& array,i64 index);
TableNode2& opArray25994(DynamicArray6& array,i64 index);
TableNode2& opArray26995(DynamicArray6& array,i64 index);
TableNode2& opArray27996(DynamicArray6& array,i64 index);
TableNode2& opArray28997(DynamicArray6& array,i64 index);
TableNode2& opArray29998(DynamicArray6& array,i64 index);
TableNode2& opArray30999(DynamicArray6& array,i64 index);
TableNode2& opArray311000(DynamicArray6& array,i64 index);
TableNode1& opArray321013(DynamicArray5& array,i64 index);
TableNode1& opArray331014(DynamicArray5& array,i64 index);
TableNode1& opArray341015(DynamicArray5& array,i64 index);
TableNode1& opArray351016(DynamicArray5& array,i64 index);
TableNode1& opArray361017(DynamicArray5& array,i64 index);
TableNode1& opArray371018(DynamicArray5& array,i64 index);
TableNode1& opArray381019(DynamicArray5& array,i64 index);
TableNode1& opArray391020(DynamicArray5& array,i64 index);
TableNode1& opArray401021(DynamicArray5& array,i64 index);
TableNode1& opArray411025(DynamicArray5& array,i64 index);
TableNode1& opArray421026(DynamicArray5& array,i64 index);
TableNode1& opArray431027(DynamicArray5& array,i64 index);
TableNode1& opArray441028(DynamicArray5& array,i64 index);
TableNode1& opArray451029(DynamicArray5& array,i64 index);
TableNode1& opArray461030(DynamicArray5& array,i64 index);
TableNode1& opArray471031(DynamicArray5& array,i64 index);
TableNode1& opArray481032(DynamicArray5& array,i64 index);
TableNode1& opArray491033(DynamicArray5& array,i64 index);
TableNode1& opArray501037(DynamicArray5& array,i64 index);
TableNode1& opArray511038(DynamicArray5& array,i64 index);
TableNode1& opArray521039(DynamicArray5& array,i64 index);
TableNode1& opArray531040(DynamicArray5& array,i64 index);
TableNode1& opArray541041(DynamicArray5& array,i64 index);
TableNode1& opArray551042(DynamicArray5& array,i64 index);
TableNode1& opArray561043(DynamicArray5& array,i64 index);
TableNode1& opArray571044(DynamicArray5& array,i64 index);
TableNode1& opArray581045(DynamicArray5& array,i64 index);
Archive& opArray591046(DynamicArray7& array,i64 index);
Archive& opArray601047(DynamicArray7& array,i64 index);
Archive& opArray611048(DynamicArray7& array,i64 index);
Archive& opArray621049(DynamicArray7& array,i64 index);
Archive& opArray631050(DynamicArray7& array,i64 index);
Archive& opArray641056(DynamicArray7& array,i64 index);
Archive& opArray651057(DynamicArray7& array,i64 index);
Archive& opArray661058(DynamicArray7& array,i64 index);
Transform*& opArray671059(DynamicArray1& array,i64 index);
Texture*& opArray681077(DynamicArray3& array,i64 index);
Texture*& opArray691078(DynamicArray3& array,i64 index);
ShadingPass& opArray701097(DynamicArray4& array,i64 index);
ShadingPass& opArray711098(DynamicArray4& array,i64 index);
ShadingPass& opArray721099(DynamicArray4& array,i64 index);
Texture*& opArray731100(DynamicArray3& array,i64 index);
ShadingPass& opArray741101(DynamicArray4& array,i64 index);
ShadingPass& opArray751102(DynamicArray4& array,i64 index);
ShadingPass& opArray761109(DynamicArray4& array,i64 index);
ShadingPass& opArray771110(DynamicArray4& array,i64 index);
Archive& opArray781115(DynamicArray7& array,i64 index);
Archive& opArray791116(DynamicArray7& array,i64 index);
Archive& opArray801117(DynamicArray7& array,i64 index);
Archive& opArray811118(DynamicArray7& array,i64 index);
Archive& opArray821120(DynamicArray7& array,i64 index);
Archive& opArray831121(DynamicArray7& array,i64 index);
Archive& opArray841122(DynamicArray7& array,i64 index);
Archive& opArray851124(DynamicArray7& array,i64 index);
Archive& opArray861125(DynamicArray7& array,i64 index);
Archive& opArray871126(DynamicArray7& array,i64 index);
Archive& opArray881127(DynamicArray7& array,i64 index);
Archive& opArray891128(DynamicArray7& array,i64 index);
Archive& opArray901129(DynamicArray7& array,i64 index);
Archive& opArray911130(DynamicArray7& array,i64 index);
Archive& opArray921131(DynamicArray7& array,i64 index);
void Init0925(DynamicArray8& array);
void Init1932(DynamicArray8& array);
void Init2939(DynamicArray7& array);
void Init31060(DynamicArray4& array);
void Init41062(DynamicArray5& array);
void Init51065(DynamicArray6& array);
void Init61067(DynamicArray3& array);
void Init71068(DynamicArray3& array);
void push0926(DynamicArray8& array,u8 value);
void push1929(DynamicArray8& array,u8 value);
void push2933(DynamicArray8& array,u8 value);
void push3936(DynamicArray8& array,u8 value);
void push4942(DynamicArray7& array,Archive value);
void push5947(DynamicArray7& array,Archive value);
void push61069(DynamicArray3& array,Texture* value);
void push71072(DynamicArray3& array,Texture* value);
void push81080(DynamicArray4& array,ShadingPass value);
void push91083(DynamicArray4& array,ShadingPass value);
void push101086(DynamicArray3& array,Texture* value);
void push111089(DynamicArray3& array,Texture* value);
void push121092(DynamicArray4& array,ShadingPass value);
void push131111(DynamicArray1& array,Transform* value);
void Reserve0927(DynamicArray8& array,i64 size);
void Reserve1928(DynamicArray8& array,i64 size);
void Reserve2930(DynamicArray8& array,i64 size);
void Reserve3931(DynamicArray8& array,i64 size);
void Reserve4934(DynamicArray8& array,i64 size);
void Reserve5935(DynamicArray8& array,i64 size);
void Reserve6937(DynamicArray8& array,i64 size);
void Reserve7938(DynamicArray8& array,i64 size);
void Reserve8943(DynamicArray7& array,i64 size);
void Reserve9944(DynamicArray7& array,i64 size);
void Reserve10948(DynamicArray7& array,i64 size);
void Reserve11949(DynamicArray7& array,i64 size);
void Reserve121070(DynamicArray3& array,i64 size);
void Reserve131071(DynamicArray3& array,i64 size);
void Reserve141073(DynamicArray3& array,i64 size);
void Reserve151074(DynamicArray3& array,i64 size);
void Reserve161081(DynamicArray4& array,i64 size);
void Reserve171082(DynamicArray4& array,i64 size);
void Reserve181084(DynamicArray4& array,i64 size);
void Reserve191085(DynamicArray4& array,i64 size);
void Reserve201087(DynamicArray3& array,i64 size);
void Reserve211088(DynamicArray3& array,i64 size);
void Reserve221090(DynamicArray3& array,i64 size);
void Reserve231091(DynamicArray3& array,i64 size);
void Reserve241093(DynamicArray4& array,i64 size);
void Reserve251094(DynamicArray4& array,i64 size);
void Reserve261112(DynamicArray1& array,i64 size);
void Reserve271113(DynamicArray1& array,i64 size);
void Resize0967(DynamicArray6& array,i64 size);
void Resize1979(DynamicArray6& array,i64 size);
void Resize2991(DynamicArray6& array,i64 size);
void Resize31012(DynamicArray5& array,i64 size);
void Resize41024(DynamicArray5& array,i64 size);
void Resize51036(DynamicArray5& array,i64 size);
void Resize61063(DynamicArray5& array,i64 size);
void Resize71066(DynamicArray6& array,i64 size);
void Resize81114(DynamicArray7& array,i64 size);
void Resize91119(DynamicArray7& array,i64 size);
void Resize101123(DynamicArray7& array,i64 size);
void Init01061(Table1& table);
void Init11064(Table2& table);
void Resize0966(Table2& table);
void Resize1978(Table2& table);
void Resize2990(Table2& table);
void Resize31011(Table1& table);
void Resize41023(Table1& table);
void Resize51035(Table1& table);
Texture& opArray0965(Table2& table,str key);
Texture& opArray1977(Table2& table,str key);
Texture& opArray2989(Table2& table,str key);
Shader& opArray31010(Table1& table,str key);
Shader& opArray41022(Table1& table,str key);
Shader& opArray51034(Table1& table,str key);
extern "C" File* FileOpen(u8* filename,u8* mode);
extern "C" u32 FileClose(File* file);
extern "C" u64 GetLine(u8** lineptr,u64* n,File* stream);
extern "C" u64 FileRead(u8* f,u64 a,u64 b,File* c);
extern "C" i32 FileGetChar(File* file);
extern "C" u64 FileWrite(voidptr ptr,u64 size,u64 count,File* stream);
extern "C" void FileFlush(File* file);
extern "C" i32 putchar(i32 c);
extern "C" voidptr malloc(u64 c);
extern "C" voidptr calloc(u64 nmem,u64 size);
extern "C" voidptr realloc(voidptr nmem,u64 size);
extern "C" voidptr memcpy(voidptr dst,voidptr src,u64 count);
extern "C" voidptr memset(voidptr ptr,i32 value,u64 count);
extern "C" i32 chdir(u8* dir);
extern "C" void abort();
str String695(Vec4 v);
str String696(Vec3 v);
str String697(Vec2 v);
Vec4& opArray698(Mat4& matrix,i64 index);
float32& opArray699(Vec4& v,i64 index);
Mat4 Mat4700(float32 v);
Mat4 Mat4Scale701(Vec3 scale);
Mat4 Mat4Transform702(Vec3 v);
Mat4 mul703(Mat4 lhs,Mat4 rhs);
Vec4 Vec4704(float32 x,float32 y,float32 z,float32 w);
Vec4 Vec4705(Vec3 v,float32 w);
Vec4 Vec4706(float32 v);
Vec3 Vec3707(float32 x,float32 y,float32 z);
Vec3 Vec3708(float32 value);
Vec3 Vec3709(Vec2 v);
Vec2 Vec2710(Vec3 v);
Vec2 Vec2711(float32 x,float32 y);
Vec2 Vec2712(float32 v);
Vec3 sub713(Vec3 lhs,Vec3 rhs);
Vec3 sub714(Vec3 lhs,Vec2 rhs);
Vec2 sub715(Vec2 lhs,Vec2 rhs);
Vec3 add716(Vec3 lhs,Vec3 rhs);
Vec3 add717(Vec3 lhs,Vec2 rhs);
Vec2 add718(Vec2 lhs,Vec2 rhs);
Vec3 mul719(Vec3 lhs,Vec3 rhs);
Vec4 mul720(float32 l,Vec4 r);
Vec4 mul721(Vec4 l,float32 r);
Vec3 mul722(float32 l,Vec3 r);
Vec3 mul723(Vec3 l,float32 r);
Vec2 mul724(float32 l,Vec2 r);
Vec2 mul725(Vec2 l,float32 r);
Vec2 div726(Vec2 l,float32 r);
Vec3 div727(Vec3 l,float32 r);
Vec4 div728(Vec4 l,float32 r);
float32 Dot729(Vec3 l,Vec3 r);
float32 Dot730(Vec2 l,Vec2 r);
Vec3 Cross731(Vec3 l,Vec3 r);
float32 Length732(Vec3 v);
float32 Length733(Vec2 v);
Vec3 Normalize734(Vec3 v);
Vec2 Normalize735(Vec2 v);
void Print736(str string);
void Error737(str string);
Shader Shader738(str vs,str fs);
void GLError739(str string);
void Bind740(Shader shader);
u32 CompileShader741(u32 shaderType,str data,str file);
void AddUniforms742(Shader shader);
str ReadFile743(str file);
extern "C" u8* stbi_load(u8* file,u32* x,u32* y,u32* comp,u32 req);
extern "C" void stbi_image_free(voidptr retval_from_stbi_load);
Texture Texture746(str file);
Texture Texture747(Vec2 size);
Transform* Transform748(Entity entity);
Vec3 Scale749(Transform self);
void Scale750(Transform& self,Vec3 scale);
Vec3 Position751(Transform& self);
void Position752(Transform& self,Vec3 p);
Vec3 WorldPosition753(Transform self);
void Recalculate754(Transform& self);
void Parent755(Transform& self,Transform& parent);
Camera Camera756();
Mat4 Frustum757(float32 left,float32 right,float32 bottom,float32 top,float32 near,float32 far);
Mat4 Perspective758(float32 fovy,float32 aspect,float32 zNear,float32 zFar);
Mat4 Translate759(Vec3 translate);
Vec3 PointAt760(Ray self,float32 distance);
i8 IntersectsSphere761(Ray self,Vec3 point,float32 radius);
float32 IntersectsSphereDistance762(Ray self,Vec3 point,float32 radius);
Ray ScreenToRay763(Camera self,Vec2 screen);
Vec4 mul764(Mat4 self,Vec4 v);
Mat4 Inverse765(Mat4 v);
RenderTarget RenderTarget766();
void GenerateFrameBuffer767(RenderTarget& target,DynamicArray3& textures);
void Bind768(RenderTarget target,Window window);
void BindScreen769();
ShadingPass ShadingPass770();
ShadingPass PostProcess771(Sprite& sprite);
void Refresh772(ShadingPass& pass);
Shader Shader773(Renderer& renderer,str vs,str fs);
Texture Texture774(Renderer& renderer,str file);
Renderer Renderer775();
void Draw776(Sprite& sprite,Transform& transform);
u32 InterfaceBinding777();
u32 InterfaceBinding778();
Buffer CreateInterfaceBlock01095(CameraBlock block,i64 count);
Buffer CreateInterfaceBlock11103(TransformBlock block,i64 count);
void LoadInterfaceBlock01096(Buffer buffer,CameraBlock block);
void LoadInterfaceBlock11108(Buffer buffer,TransformBlock block);
void Draw781(Renderer& renderer,World& world);
void Render782(Renderer& renderer,World& world,Camera camera,Window window);
void Bind783(Material material);
Sprite* Sprite784(Entity entity,Renderer& renderer,str file);
Sprite Sprite785(Renderer& renderer,str file);
void Color786(Sprite& sprite,Vec4 color);
Archive Archive787();
void Load788(Archive self,Vec4& v);
void Load789(Archive self,Vec3& v);
void Save790(Archive& self,u64 v);
void Save791(Archive& self,i64 v);
void Save792(Archive& self,float64 v);
void Save793(Archive& self,float32 v);
void Save794(Archive& self,str string);
void Save795(Archive& self,Vec4 v);
void Save796(Archive& self,Vec3 v);
void Save797(Archive& self,Vec2 v);
Archive& opArray798(Archive& self,str field);
void Save799(Archive& self,Transform transform);
void Save800(Archive& self,Sprite sprite);
void PrintDepth801(i64 depth);
void WriteDepth802(File* file,i64 depth);
void Print803(Archive& self,i64& depth);
void Write804(File* file,str string);
void ArchiveFile805(Archive& self,File* file,i64 depth);
void ArchiveFile806(Archive& self,str file);
Archive Unarchive807(str file);
i8 Unarchive808(Archive& archive,Lexer& lexer);
i64 int809(u8 i);
i64 int810(u32 i);
i64 int811(u64 i);
i64 int812(i8 i);
i64 int813(i32 i);
i64 int814(i64 i);
i64 int815(float32 i);
i32 int32816(u8 i);
i32 int32817(u32 i);
i32 int32818(u64 i);
i32 int32819(i8 i);
i32 int32820(i32 i);
i32 int32821(i64 i);
i32 int32822(float32 i);
i8 int8823(u8 i);
i8 int8824(u32 i);
i8 int8825(u64 i);
i8 int8826(i8 i);
i8 int8827(i32 i);
i8 int8828(i64 i);
i8 int8829(float32 i);
u8 uint8830(u8 i);
u8 uint8831(u32 i);
u8 uint8832(u64 i);
u8 uint8833(i8 i);
u8 uint8834(i32 i);
u8 uint8835(i64 i);
u8 uint8836(float32 i);
u32 uint32837(u8 i);
u32 uint32838(u32 i);
u32 uint32839(u64 i);
u32 uint32840(i8 i);
u32 uint32841(i32 i);
u32 uint32842(i64 i);
u32 uint32843(float32 i);
u64 uint844(u8 i);
u64 uint845(u32 i);
u64 uint846(u64 i);
u64 uint847(i8 i);
u64 uint848(i32 i);
u64 uint849(i64 i);
u64 uint850(float32 i);
float32 float32851(u8 i);
float32 float32852(u32 i);
float32 float32853(u64 i);
float32 float32854(i8 i);
float32 float32855(i32 i);
float32 float32856(i64 i);
float32 float32857(float32 i);
float32 float32858(float64 i);
float64 float64859(u8 i);
float64 float64860(u32 i);
float64 float64861(u64 i);
float64 float64862(i8 i);
float64 float64863(i32 i);
float64 float64864(i64 i);
float64 float64865(float32 i);
float64 float64866(float64 i);
void AllocPtr0909(u8*& ptr,i64 len);
void AllocPtr1956(PositionTextureColor*& ptr,i64 len);
void AllocPtr2957(u16*& ptr,i64 len);
void AllocPtrZeroed0913(i64*& ptr,i64 len);
void AllocPtrZeroed1915(Entity*& ptr,i64 len);
void AllocPtrZeroed2917(Transform*& ptr,i64 len);
void AllocPtrZeroed3919(Sprite*& ptr,i64 len);
void AllocPtrZeroed4922(u8*& ptr,i64 len);
void AllocPtrZeroed51008(u8*& ptr,i64 len);
void AllocPtrZeroed61076(u32*& ptr,i64 len);
void CopyPtr0910(u8* from,u8* to,i64 len);
void CopyPtr1911(u8* from,u8* to,i64 len);
void Print872(str string);
void Println873(str string);
str add874(str a,str b);
str String875(u8* chars,i64 length);
str String876(i64 number);
str String877(float32 number);
i64 equal878(str l,str r);
i64 Hash879(str string);
extern "C" float32 cosf(float32 v);
extern "C" float32 sinf(float32 v);
extern "C" float32 tanf(float32 v);
extern "C" float32 fabsf(float32 v);
extern "C" float32 sqrtf(float32 v);
float32 sqrt885(float32 f);
float32 abs886(float32 f);
float32 cos887(float32 f);
float32 sin888(float32 f);
float32 tan889(float32 f);
Mat4 GetRotationMatrix890(Quaternion q);
Quaternion CreateQuaternion891(Vec3 axis,float32 angle);
Quaternion CreateQuaternion892();
void normalize893(Quaternion& v);
Quaternion mul894(Quaternion lhs,Quaternion rhs);
Buffer Buffer895(u32 buffertype,i64 length);
voidptr Map896(Buffer& buffer,i64 begin,i64 length);
void Unmap897(Buffer buffer);
void Resize898(Buffer buffer,i64 size);
i32 Char899(str char);
Lexer Lexer900(str file);
i32 Peek901(Lexer& self);
i32 Get902(Lexer& self);
extern "C" i32 isspace(i32 v);
extern "C" i32 isalpha(i32 v);
extern "C" i32 isalnum(i32 v);
extern "C" i32 isdigit(i32 v);
void Consume907(Lexer& self);
Token Next908(Lexer& self);
